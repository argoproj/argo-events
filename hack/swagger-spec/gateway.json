{
  "swagger": "2.0",
  "info": {
   "title": "Argo-Events",
   "version": "1.0"
  },
  "paths": {},
  "definitions": {
   "v1alpha1.ArtifactLocation": {
    "description": "ArtifactLocation describes the source location for an external artifact",
    "properties": {
     "configmap": {
      "$ref": "#/definitions/v1alpha1.ConfigmapArtifact"
     },
     "file": {
      "$ref": "#/definitions/v1alpha1.FileArtifact"
     },
     "inline": {
      "type": "string"
     },
     "s3": {
      "$ref": "#/definitions/v1alpha1.S3Artifact"
     },
     "url": {
      "$ref": "#/definitions/v1alpha1.URLArtifact"
     }
    }
   },
   "v1alpha1.ConfigmapArtifact": {
    "description": "ConfigmapArtifact contains information about artifact in k8 configmap",
    "required": [
     "name",
     "namespace",
     "key"
    ],
    "properties": {
     "key": {
      "description": "Key within configmap data which contains trigger resource definition",
      "type": "string"
     },
     "name": {
      "description": "Name of the configmap",
      "type": "string"
     },
     "namespace": {
      "description": "Namespace where configmap is deployed",
      "type": "string"
     }
    }
   },
   "v1alpha1.Data": {
    "required": [
     "filters"
    ],
    "properties": {
     "escalationPolicy": {
      "description": "EscalationPolicy is the escalation to trigger in case the signal filter fails",
      "$ref": "#/definitions/v1alpha1.EscalationPolicy"
     },
     "filters": {
      "description": "filter constraints",
      "type": "array",
      "items": {
       "$ref": "#/definitions/v1alpha1.DataFilter"
      }
     }
    }
   },
   "v1alpha1.DataFilter": {
    "description": "DataFilter describes constraints and filters for event data Regular Expressions are purposefully not a feature as they are overkill for our uses here See Rob Pike's Post: https://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html",
    "required": [
     "path",
     "type",
     "value"
    ],
    "properties": {
     "escalationPolicy": {
      "description": "EscalationPolicy is the escalation to trigger in case the signal filter fails",
      "$ref": "#/definitions/v1alpha1.EscalationPolicy"
     },
     "path": {
      "description": "Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
      "type": "string"
     },
     "type": {
      "description": "Type contains the JSON type of the data",
      "type": "string"
     },
     "value": {
      "description": "Value is the expected string value for this key Booleans are pased using strconv.ParseBool() Numbers are parsed using as float64 using strconv.ParseFloat() Strings are taken as is Nils this value is ignored",
      "type": "string"
     }
    }
   },
   "v1alpha1.EscalationPolicy": {
    "description": "EscalationPolicy describes the policy for escalating sensors in an Error state. An escalation policy is associated with signal filter. Whenever a signal filter fails escalation will be triggered",
    "required": [
     "name",
     "level",
     "message"
    ],
    "properties": {
     "level": {
      "description": "Level is the degree of importance",
      "type": "string"
     },
     "message": {
      "description": "need someway to progressively get more serious notifications",
      "type": "string"
     },
     "name": {
      "description": "Name is name of the escalation policy This is referred by signal filter/s",
      "type": "string"
     }
    }
   },
   "v1alpha1.Event": {
    "description": "Event is a data record expressing an occurrence and its context. Adheres to the CloudEvents v0.1 specification",
    "required": [
     "context",
     "payload"
    ],
    "properties": {
     "context": {
      "$ref": "#/definitions/v1alpha1.EventContext"
     },
     "payload": {
      "type": "string",
      "format": "byte"
     }
    }
   },
   "v1alpha1.EventContext": {
    "description": "EventContext contains metadata that provides circumstantial information about the occurrence.",
    "required": [
     "eventType",
     "eventTypeVersion",
     "cloudEventsVersion",
     "source",
     "eventID",
     "schemaURL",
     "contentType"
    ],
    "properties": {
     "cloudEventsVersion": {
      "description": "The version of the CloudEvents specification which the event uses. Enables the interpretation of the context.",
      "type": "string"
     },
     "contentType": {
      "description": "Content type of the data attribute value. Enables the data attribute to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, the data attribute may carry an XML or JSON payload and the consumer is informed by this attribute being set to \"application/xml\" or \"application/json\" respectively.",
      "type": "string"
     },
     "escalationPolicy": {
      "description": "EscalationPolicy is the name of escalation policy to trigger in case the signal filter fails",
      "$ref": "#/definitions/v1alpha1.EscalationPolicy"
     },
     "eventID": {
      "description": "ID of the event. The semantics are explicitly undefined to ease the implementation of producers. Enables deduplication. Must be unique within scope of producer.",
      "type": "string"
     },
     "eventType": {
      "description": "The type of occurrence which has happened. Often this attribute is used for routing, observability, policy enforcement, etc. should be prefixed with a reverse-DNS name. The prefixed domain dictates the organization which defines the semantics of this event type. ex: com.github.pull.create",
      "type": "string"
     },
     "eventTypeVersion": {
      "description": "The version of the eventType. Enables the interpretation of data by eventual consumers, requires the consumer to be knowledgeable about the producer.",
      "type": "string"
     },
     "extensions": {
      "description": "This is for additional metadata and does not have a mandated structure. Enables a place for custom fields a producer or middleware might want to include and provides a place to test metadata before adding them to the CloudEvents specification.",
      "type": "object",
      "additionalProperties": {
       "type": "string"
      }
     },
     "schemaURL": {
      "description": "A link to the schema that the data attribute adheres to. Must adhere to the format specified in RFC 3986.",
      "$ref": "#/definitions/v1alpha1.URI"
     },
     "source": {
      "description": "This describes the event producer.",
      "$ref": "#/definitions/v1alpha1.URI"
     }
    }
   },
   "v1alpha1.EventWrapper": {
    "description": "EventWrapper wraps an event with an additional flag to check if we processed this event already",
    "required": [
     "event",
     "seen"
    ],
    "properties": {
     "event": {
      "$ref": "#/definitions/v1alpha1.Event"
     },
     "seen": {
      "type": "boolean"
     }
    }
   },
   "v1alpha1.FileArtifact": {
    "description": "FileArtifact contains information about an artifact in a filesystem",
    "properties": {
     "path": {
      "type": "string"
     }
    }
   },
   "v1alpha1.GroupVersionKind": {
    "description": "GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion to avoid automatic coercion.  It doesn't use a GroupVersion to avoid custom marshalling.",
    "required": [
     "group",
     "version",
     "kind"
    ],
    "properties": {
     "group": {
      "type": "string"
     },
     "kind": {
      "type": "string"
     },
     "version": {
      "type": "string"
     }
    }
   },
   "v1alpha1.NodeStatus": {
    "description": "NodeStatus describes the status for an individual node in the sensor's FSM. A single node can represent the status for signal or a trigger.",
    "required": [
     "id",
     "name",
     "displayName",
     "type",
     "phase"
    ],
    "properties": {
     "displayName": {
      "description": "DisplayName is the human readable representation of the node",
      "type": "string"
     },
     "id": {
      "description": "ID is a unique identifier of a node within a sensor It is a hash of the node name",
      "type": "string"
     },
     "latestEvent": {
      "description": "LatestEvent stores the last seen event for this node",
      "$ref": "#/definitions/v1alpha1.EventWrapper"
     },
     "message": {
      "description": "store data or something to save for signal notifications or trigger events",
      "type": "string"
     },
     "name": {
      "description": "Name is a unique name in the node tree used to generate the node ID",
      "type": "string"
     },
     "phase": {
      "description": "Phase of the node",
      "type": "string"
     },
     "type": {
      "description": "Type is the type of the node",
      "type": "string"
     }
    }
   },
   "v1alpha1.ResourceObject": {
    "description": "ResourceObject is the resource object to create on kubernetes",
    "required": [
     "group",
     "version",
     "kind",
     "namespace",
     "source",
     "parameters"
    ],
    "properties": {
     "group": {
      "type": "string"
     },
     "kind": {
      "type": "string"
     },
     "labels": {
      "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. This overrides any labels in the unstructured object with the same key.",
      "type": "object",
      "additionalProperties": {
       "type": "string"
      }
     },
     "namespace": {
      "description": "Namespace in which to create this object optional defaults to the service account namespace",
      "type": "string"
     },
     "parameters": {
      "description": "Parameters is the list of resource parameters to pass in the object",
      "type": "array",
      "items": {
       "$ref": "#/definitions/v1alpha1.ResourceParameter"
      }
     },
     "source": {
      "description": "Source of the K8 resource file(s)",
      "$ref": "#/definitions/v1alpha1.ArtifactLocation"
     },
     "version": {
      "type": "string"
     }
    }
   },
   "v1alpha1.ResourceParameter": {
    "description": "ResourceParameter indicates a passed parameter to a service template",
    "required": [
     "src",
     "dest"
    ],
    "properties": {
     "dest": {
      "description": "Dest is the JSONPath of a resource key. A path is a series of keys separated by a dot. The colon character can be escaped with '.' The -1 key can be used to append a value to an existing array. See https://github.com/tidwall/sjson#path-syntax for more information about how this is used.",
      "type": "string"
     },
     "src": {
      "description": "Src contains a source reference to the value of the resource parameter from a signal event",
      "$ref": "#/definitions/v1alpha1.ResourceParameterSource"
     }
    }
   },
   "v1alpha1.ResourceParameterSource": {
    "description": "ResourceParameterSource defines the source for a resource parameter from a signal event",
    "required": [
     "signal",
     "path"
    ],
    "properties": {
     "path": {
      "description": "Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
      "type": "string"
     },
     "signal": {
      "description": "Signal is the name of the signal for which to retrieve this event",
      "type": "string"
     },
     "value": {
      "description": "Value is the default literal value to use for this parameter source This is only used if the path is invalid. If the path is invalid and this is not defined, this param source will produce an error.",
      "type": "string"
     }
    }
   },
   "v1alpha1.RetryStrategy": {
    "description": "RetryStrategy represents a strategy for retrying operations"
   },
   "v1alpha1.S3Artifact": {
    "description": "S3Artifact contains information about an artifact in S3",
    "properties": {
     "bucket": {
      "type": "string"
     },
     "endpoint": {
      "type": "string"
     },
     "event": {
      "type": "string"
     },
     "filter": {
      "$ref": "#/definitions/v1alpha1.S3Filter"
     },
     "insecure": {
      "type": "boolean"
     },
     "key": {
      "type": "string"
     },
     "region": {
      "type": "string"
     }
    }
   },
   "v1alpha1.S3Bucket": {
    "description": "S3Bucket contains information for an S3 Bucket",
    "properties": {
     "bucket": {
      "type": "string"
     },
     "endpoint": {
      "type": "string"
     },
     "insecure": {
      "type": "boolean"
     },
     "region": {
      "type": "string"
     }
    }
   },
   "v1alpha1.S3Filter": {
    "description": "S3Filter represents filters to apply to bucket nofifications for specifying constraints on objects",
    "required": [
     "prefix",
     "suffix"
    ],
    "properties": {
     "prefix": {
      "type": "string"
     },
     "suffix": {
      "type": "string"
     }
    }
   },
   "v1alpha1.Sensor": {
    "description": "Sensor is the definition of a sensor resource",
    "required": [
     "spec",
     "status"
    ],
    "properties": {
     "spec": {
      "$ref": "#/definitions/v1alpha1.SensorSpec"
     },
     "status": {
      "$ref": "#/definitions/v1alpha1.SensorStatus"
     }
    }
   },
   "v1alpha1.SensorList": {
    "description": "SensorList is the list of Sensor resources",
    "required": [
     "items"
    ],
    "properties": {
     "items": {
      "type": "array",
      "items": {
       "$ref": "#/definitions/v1alpha1.Sensor"
      }
     }
    }
   },
   "v1alpha1.SensorSpec": {
    "description": "SensorSpec represents desired sensor state",
    "required": [
     "signals",
     "triggers"
    ],
    "properties": {
     "imagePullPolicy": {
      "description": "ImagePullPolicy determines the when the image should be pulled from docker repository",
      "type": "string"
     },
     "imageVersion": {
      "description": "ImageVersion is the sensor image version to run",
      "type": "string"
     },
     "repeat": {
      "description": "Repeat is a flag that determines if the sensor status should be reset after completion. NOTE: functionality is currently experimental and part of an initiative to define a more concrete pattern or cycle for sensor repetition.",
      "type": "boolean"
     },
     "serviceAccountName": {
      "description": "ServiceAccountName required for role based access",
      "type": "string"
     },
     "signals": {
      "description": "Signals is a list of the things that this sensor is dependent on. These are the inputs to this sensor.",
      "type": "array",
      "items": {
       "$ref": "#/definitions/v1alpha1.Signal"
      }
     },
     "triggers": {
      "description": "Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.",
      "type": "array",
      "items": {
       "$ref": "#/definitions/v1alpha1.Trigger"
      }
     }
    }
   },
   "v1alpha1.SensorStatus": {
    "description": "SensorStatus contains information about the status of a sensor.",
    "required": [
     "phase"
    ],
    "properties": {
     "completionCount": {
      "description": "CompletionCount is the count of sensor's successful runs.",
      "type": "integer",
      "format": "int32"
     },
     "message": {
      "description": "Message is a human readable string indicating details about a sensor in its phase",
      "type": "string"
     },
     "nodes": {
      "description": "Nodes is a mapping between a node ID and the node's status it records the states for the FSM of this sensor.",
      "type": "object",
      "additionalProperties": {
       "$ref": "#/definitions/v1alpha1.NodeStatus"
      }
     },
     "phase": {
      "description": "Phase is the high-level summary of the sensor",
      "type": "string"
     }
    }
   },
   "v1alpha1.Signal": {
    "description": "Signal describes a dependency",
    "required": [
     "name"
    ],
    "properties": {
     "deadline": {
      "description": "Deadline is the duration in seconds after the StartedAt time of the sensor after which this signal is terminated. Note: this functionality is not yet respected, but it's theoretical behavior is as follows: This trumps the recurrence patterns of calendar signals and allows any signal to have a strict defined life. After the deadline is reached and this signal has not in a Resolved state, this signal is marked as Failed and proper escalations should proceed.",
      "type": "integer",
      "format": "int64"
     },
     "filters": {
      "description": "Filters and rules governing tolerations of success and constraints on the context and data of an event",
      "$ref": "#/definitions/v1alpha1.SignalFilter"
     },
     "name": {
      "description": "Name is a unique name of this dependency",
      "type": "string"
     }
    }
   },
   "v1alpha1.SignalFilter": {
    "description": "SignalFilter defines filters and constraints for a signal.",
    "required": [
     "name"
    ],
    "properties": {
     "context": {
      "description": "Context filter constraints with escalation",
      "$ref": "#/definitions/v1alpha1.EventContext"
     },
     "data": {
      "description": "Data filter constraints with escalation",
      "$ref": "#/definitions/v1alpha1.Data"
     },
     "name": {
      "description": "Name is the name of signal filter",
      "type": "string"
     },
     "time": {
      "description": "Time filter on the signal with escalation",
      "$ref": "#/definitions/v1alpha1.TimeFilter"
     }
    }
   },
   "v1alpha1.TimeFilter": {
    "description": "TimeFilter describes a window in time. Filters out signal events that occur outside the time limits. In other words, only events that occur after Start and before Stop will pass this filter.",
    "properties": {
     "escalationPolicy": {
      "description": "EscalationPolicy is the escalation to trigger in case the signal filter fails",
      "$ref": "#/definitions/v1alpha1.EscalationPolicy"
     },
     "start": {
      "description": "Start is the beginning of a time window. Before this time, events for this signal are ignored and format is hh:mm:ss",
      "type": "string"
     },
     "stop": {
      "description": "StopPattern is the end of a time window. After this time, events for this signal are ignored and format is hh:mm:ss",
      "type": "string"
     }
    }
   },
   "v1alpha1.Trigger": {
    "description": "Trigger is an action taken, output produced, an event created, a message sent",
    "required": [
     "name",
     "retryStrategy"
    ],
    "properties": {
     "message": {
      "description": "Message describes a message that will be sent on a queue",
      "type": "string"
     },
     "name": {
      "description": "Name is a unique name of the action to take",
      "type": "string"
     },
     "resource": {
      "description": "Resource describes the resource that will be created by this action",
      "$ref": "#/definitions/v1alpha1.ResourceObject"
     },
     "retryStrategy": {
      "description": "RetryStrategy is the strategy to retry a trigger if it fails",
      "$ref": "#/definitions/v1alpha1.RetryStrategy"
     }
    }
   },
   "v1alpha1.URI": {
    "description": "URI is a Uniform Resource Identifier based on RFC 3986",
    "required": [
     "scheme",
     "user",
     "password",
     "host",
     "port",
     "path",
     "query",
     "fragment"
    ],
    "properties": {
     "fragment": {
      "type": "string"
     },
     "host": {
      "type": "string"
     },
     "password": {
      "type": "string"
     },
     "path": {
      "type": "string"
     },
     "port": {
      "type": "integer",
      "format": "int32"
     },
     "query": {
      "type": "string"
     },
     "scheme": {
      "type": "string"
     },
     "user": {
      "type": "string"
     }
    }
   },
   "v1alpha1.URLArtifact": {
    "description": "URLArtifact contains information about an artifact at an http endpoint.",
    "properties": {
     "path": {
      "type": "string"
     },
     "verifyCert": {
      "type": "boolean"
     }
    }
   }
  }
 }