// Code generated by protoc-gen-go. DO NOT EDIT.
// source: job/shared/signal.proto

package shared // import "github.com/argoproj/argo-events/job/shared"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import v1alpha1 "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Event is a data record expressing an occurrence and its context.
// Adheres to the CloudEvents v0.1 specification
type Event struct {
	Context              *EventContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Data                 []byte        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_signal_70075876eaeaa839, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (dst *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(dst, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetContext() *EventContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *Event) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// URI is a Uniform Resource Identifier based on RFC 3986
type URI struct {
	Scheme               string   `protobuf:"bytes,1,opt,name=scheme" json:"scheme,omitempty"`
	User                 string   `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Host                 string   `protobuf:"bytes,4,opt,name=host" json:"host,omitempty"`
	Port                 int32    `protobuf:"varint,5,opt,name=port" json:"port,omitempty"`
	Path                 string   `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Query                string   `protobuf:"bytes,7,opt,name=query" json:"query,omitempty"`
	Fragment             string   `protobuf:"bytes,8,opt,name=fragment" json:"fragment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *URI) Reset()         { *m = URI{} }
func (m *URI) String() string { return proto.CompactTextString(m) }
func (*URI) ProtoMessage()    {}
func (*URI) Descriptor() ([]byte, []int) {
	return fileDescriptor_signal_70075876eaeaa839, []int{1}
}
func (m *URI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_URI.Unmarshal(m, b)
}
func (m *URI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_URI.Marshal(b, m, deterministic)
}
func (dst *URI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URI.Merge(dst, src)
}
func (m *URI) XXX_Size() int {
	return xxx_messageInfo_URI.Size(m)
}
func (m *URI) XXX_DiscardUnknown() {
	xxx_messageInfo_URI.DiscardUnknown(m)
}

var xxx_messageInfo_URI proto.InternalMessageInfo

func (m *URI) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *URI) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *URI) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *URI) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *URI) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *URI) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *URI) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *URI) GetFragment() string {
	if m != nil {
		return m.Fragment
	}
	return ""
}

// EventContext contains metadata that provides circumstantial information about the occurence.
type EventContext struct {
	// The type of occurrence which has happened. Often this attribute is used for
	// routing, observability, policy enforcement, etc.
	// should be prefixed with a reverse-DNS name. The prefixed domain dictates
	// the organization which defines the semantics of this event type. ex: com.github.pull.create
	EventType string `protobuf:"bytes,1,opt,name=eventType" json:"eventType,omitempty"`
	// The version of the eventType. Enables the interpretation of data by eventual consumers,
	// requires the consumer to be knowledgeable about the producer.
	EventTypeVersion string `protobuf:"bytes,2,opt,name=eventTypeVersion" json:"eventTypeVersion,omitempty"`
	// The version of the CloudEvents specification which the event uses.
	// Enables the intepretation of the context.
	CloudEventsVersion string `protobuf:"bytes,3,opt,name=cloudEventsVersion" json:"cloudEventsVersion,omitempty"`
	// This describes the event producer.
	Source *URI `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	// ID of the event. The semantics are explicitly undefined to ease the implementation of producers.
	// Enables deduplication. Must be unique within scope of producer.
	EventID string `protobuf:"bytes,5,opt,name=eventID" json:"eventID,omitempty"`
	// Timestamp of when the event happened. Must adhere to format specified in RFC 3339.
	EventTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=eventTime" json:"eventTime,omitempty"`
	// A link to the schema that the data attribute adheres to.
	// Must adhere to the format specified in RFC 3986.
	SchemaURL *URI `protobuf:"bytes,7,opt,name=schemaURL" json:"schemaURL,omitempty"`
	// Content type of the data attribute value. Enables the data attribute to carry any type of content,
	// whereby format and encoding might differ from that of the chosen event format.
	// For example, the data attribute may carry an XML or JSON payload and the consumer is informed
	// by this attribute being set to "application/xml" or "application/json" respectively.
	ContentType string `protobuf:"bytes,8,opt,name=contentType" json:"contentType,omitempty"`
	// This is for additional metadata and does not have a mandated structure.
	// Enables a place for custom fields a producer or middleware might want to include and provides a place
	// to test metadata before adding them to the CloudEvents specification.
	Extensions           map[string]string `protobuf:"bytes,9,rep,name=extensions" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EventContext) Reset()         { *m = EventContext{} }
func (m *EventContext) String() string { return proto.CompactTextString(m) }
func (*EventContext) ProtoMessage()    {}
func (*EventContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_signal_70075876eaeaa839, []int{2}
}
func (m *EventContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventContext.Unmarshal(m, b)
}
func (m *EventContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventContext.Marshal(b, m, deterministic)
}
func (dst *EventContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventContext.Merge(dst, src)
}
func (m *EventContext) XXX_Size() int {
	return xxx_messageInfo_EventContext.Size(m)
}
func (m *EventContext) XXX_DiscardUnknown() {
	xxx_messageInfo_EventContext.DiscardUnknown(m)
}

var xxx_messageInfo_EventContext proto.InternalMessageInfo

func (m *EventContext) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *EventContext) GetEventTypeVersion() string {
	if m != nil {
		return m.EventTypeVersion
	}
	return ""
}

func (m *EventContext) GetCloudEventsVersion() string {
	if m != nil {
		return m.CloudEventsVersion
	}
	return ""
}

func (m *EventContext) GetSource() *URI {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *EventContext) GetEventID() string {
	if m != nil {
		return m.EventID
	}
	return ""
}

func (m *EventContext) GetEventTime() *timestamp.Timestamp {
	if m != nil {
		return m.EventTime
	}
	return nil
}

func (m *EventContext) GetSchemaURL() *URI {
	if m != nil {
		return m.SchemaURL
	}
	return nil
}

func (m *EventContext) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *EventContext) GetExtensions() map[string]string {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "shared.Event")
	proto.RegisterType((*URI)(nil), "shared.URI")
	proto.RegisterType((*EventContext)(nil), "shared.EventContext")
	proto.RegisterMapType((map[string]string)(nil), "shared.EventContext.ExtensionsEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Signal service

type SignalClient interface {
	// Start listening. Events are streamed back to the client.
	Start(ctx context.Context, in *v1alpha1.Signal, opts ...grpc.CallOption) (Signal_StartClient, error)
	// Stop listening. This should terminate the above event stream.
	Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type signalClient struct {
	cc *grpc.ClientConn
}

func NewSignalClient(cc *grpc.ClientConn) SignalClient {
	return &signalClient{cc}
}

func (c *signalClient) Start(ctx context.Context, in *v1alpha1.Signal, opts ...grpc.CallOption) (Signal_StartClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Signal_serviceDesc.Streams[0], c.cc, "/shared.Signal/Start", opts...)
	if err != nil {
		return nil, err
	}
	x := &signalStartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Signal_StartClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type signalStartClient struct {
	grpc.ClientStream
}

func (x *signalStartClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *signalClient) Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/shared.Signal/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Signal service

type SignalServer interface {
	// Start listening. Events are streamed back to the client.
	Start(*v1alpha1.Signal, Signal_StartServer) error
	// Stop listening. This should terminate the above event stream.
	Stop(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterSignalServer(s *grpc.Server, srv SignalServer) {
	s.RegisterService(&_Signal_serviceDesc, srv)
}

func _Signal_Start_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1alpha1.Signal)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SignalServer).Start(m, &signalStartServer{stream})
}

type Signal_StartServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type signalStartServer struct {
	grpc.ServerStream
}

func (x *signalStartServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Signal_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shared.Signal/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalServer).Stop(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Signal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shared.Signal",
	HandlerType: (*SignalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _Signal_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Start",
			Handler:       _Signal_Start_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "job/shared/signal.proto",
}

func init() { proto.RegisterFile("job/shared/signal.proto", fileDescriptor_signal_70075876eaeaa839) }

var fileDescriptor_signal_70075876eaeaa839 = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0x56, 0xd6, 0x35, 0x5b, 0x9c, 0xfd, 0xf4, 0x9b, 0xac, 0x69, 0x44, 0x01, 0x89, 0x6a, 0x70,
	0x51, 0x26, 0x70, 0x58, 0x91, 0xd0, 0x84, 0x84, 0x84, 0x60, 0x95, 0xa8, 0xe0, 0xca, 0x5d, 0xb9,
	0xd8, 0x0d, 0x72, 0x5b, 0x2f, 0xc9, 0xda, 0xc4, 0xc6, 0x76, 0xca, 0xfa, 0x2e, 0xbc, 0x09, 0x8f,
	0xc1, 0x0b, 0x21, 0x1f, 0x27, 0x6d, 0xe9, 0x86, 0xb8, 0x3b, 0xe7, 0x3b, 0x9f, 0xcf, 0xc9, 0xf9,
	0xf3, 0x05, 0x3d, 0xb8, 0x11, 0xe3, 0x44, 0x67, 0x4c, 0xf1, 0x69, 0xa2, 0xf3, 0xb4, 0x64, 0x73,
	0x22, 0x95, 0x30, 0x02, 0xfb, 0x0e, 0x8c, 0x3f, 0xa6, 0xb9, 0xc9, 0xaa, 0x31, 0x99, 0x88, 0x22,
	0x61, 0x2a, 0x15, 0x52, 0x89, 0x1b, 0x30, 0x5e, 0xf0, 0x05, 0x2f, 0x8d, 0x4e, 0xe4, 0x2c, 0x4d,
	0x98, 0xcc, 0x75, 0xa2, 0x79, 0xa9, 0x85, 0x4a, 0x16, 0x67, 0x6c, 0x2e, 0x33, 0x76, 0x96, 0xa4,
	0xbc, 0xe4, 0x8a, 0x19, 0x3e, 0x75, 0x19, 0xe3, 0x87, 0xa9, 0x10, 0xe9, 0x9c, 0x27, 0xe0, 0x8d,
	0xab, 0xeb, 0x84, 0x17, 0xd2, 0x2c, 0xeb, 0xe0, 0xe3, 0xed, 0xa0, 0xc9, 0x0b, 0xae, 0x0d, 0x2b,
	0xa4, 0x23, 0x9c, 0x7c, 0x42, 0xed, 0xbe, 0x2d, 0x88, 0x09, 0xda, 0x9b, 0x88, 0xd2, 0xf0, 0x5b,
	0x13, 0x79, 0x1d, 0xaf, 0x1b, 0xf6, 0x8e, 0x88, 0xfb, 0x54, 0x02, 0xf1, 0x0f, 0x2e, 0x46, 0x1b,
	0x12, 0xc6, 0x68, 0x77, 0xca, 0x0c, 0x8b, 0x76, 0x3a, 0x5e, 0xf7, 0x80, 0x82, 0x7d, 0xf2, 0xd3,
	0x43, 0xad, 0x11, 0x1d, 0xe0, 0x63, 0xe4, 0xeb, 0x49, 0xc6, 0x0b, 0x0e, 0xa9, 0x02, 0x5a, 0x7b,
	0xf6, 0x4d, 0xa5, 0xb9, 0x82, 0x37, 0x01, 0x05, 0x1b, 0xc7, 0x68, 0x5f, 0x32, 0xad, 0xbf, 0x0b,
	0x35, 0x8d, 0x5a, 0x80, 0xaf, 0x7c, 0xcb, 0xcf, 0x84, 0x36, 0xd1, 0xae, 0xe3, 0x5b, 0xdb, 0x62,
	0x52, 0x28, 0x13, 0xb5, 0x3b, 0x5e, 0xb7, 0x4d, 0xc1, 0x06, 0x8c, 0x99, 0x2c, 0xf2, 0x1d, 0xcf,
	0xda, 0xf8, 0x08, 0xb5, 0xbf, 0x55, 0x5c, 0x2d, 0xa3, 0x3d, 0x00, 0x9d, 0x63, 0xab, 0x5d, 0x2b,
	0x96, 0x16, 0xbc, 0x34, 0xd1, 0xbe, 0xab, 0xd6, 0xf8, 0x27, 0xbf, 0x5a, 0xe8, 0x60, 0xb3, 0x57,
	0xfc, 0x08, 0x05, 0xb0, 0x8c, 0xcb, 0xa5, 0x6c, 0x3a, 0x59, 0x03, 0xf8, 0x14, 0x1d, 0xae, 0x9c,
	0x2f, 0x5c, 0xe9, 0x5c, 0x94, 0x75, 0x63, 0x77, 0x70, 0x4c, 0x10, 0x9e, 0xcc, 0x45, 0x35, 0x85,
	0xf4, 0xba, 0x61, 0xbb, 0x76, 0xef, 0x89, 0xe0, 0x27, 0xc8, 0xd7, 0xa2, 0x52, 0x13, 0x0e, 0xad,
	0x87, 0xbd, 0xb0, 0xd9, 0xc5, 0x88, 0x0e, 0x68, 0x1d, 0xc2, 0x11, 0xda, 0x83, 0x42, 0x83, 0x0b,
	0x18, 0x46, 0x40, 0x1b, 0x17, 0x9f, 0x37, 0x1f, 0x9e, 0x17, 0x1c, 0x86, 0x12, 0xf6, 0x62, 0xe2,
	0x2e, 0x81, 0x34, 0x97, 0x40, 0x2e, 0x9b, 0x4b, 0xa0, 0x6b, 0x32, 0x7e, 0x86, 0x02, 0xd8, 0x15,
	0x1b, 0xd1, 0xcf, 0x30, 0xb9, 0xad, 0xda, 0xeb, 0x28, 0xee, 0xa0, 0x10, 0x6e, 0xa1, 0x9e, 0x8f,
	0x9b, 0xe6, 0x26, 0x84, 0x2f, 0x10, 0xe2, 0xb7, 0x86, 0x97, 0xb6, 0x25, 0x1d, 0x05, 0x9d, 0x56,
	0x37, 0xec, 0x3d, 0xbd, 0xef, 0xaa, 0x48, 0x7f, 0x45, 0xeb, 0x97, 0x46, 0x2d, 0xe9, 0xc6, 0xbb,
	0xf8, 0x2d, 0xfa, 0x7f, 0x2b, 0x8c, 0x0f, 0x51, 0x6b, 0xc6, 0x97, 0xf5, 0x4a, 0xac, 0x69, 0xb7,
	0xbd, 0x60, 0xf3, 0x8a, 0xd7, 0x1b, 0x70, 0xce, 0x9b, 0x9d, 0x73, 0xaf, 0xf7, 0xc3, 0x43, 0xfe,
	0x10, 0x14, 0x88, 0xaf, 0x50, 0x7b, 0x68, 0x98, 0x32, 0xf8, 0x1d, 0x59, 0xab, 0x8f, 0x34, 0xea,
	0x03, 0xe3, 0xab, 0x53, 0x1f, 0x91, 0xb3, 0x94, 0x58, 0xf5, 0x11, 0xa7, 0x3e, 0xd2, 0xa8, 0x8f,
	0xb8, 0x54, 0xf1, 0x7f, 0x7f, 0xb4, 0xf1, 0xd2, 0xc3, 0xaf, 0xd1, 0xee, 0xd0, 0x08, 0x89, 0x8f,
	0xef, 0xcc, 0xb9, 0x6f, 0xe5, 0x18, 0xff, 0x05, 0x7f, 0xff, 0xfc, 0xea, 0xf4, 0x5f, 0x7f, 0x82,
	0xf5, 0xaf, 0x64, 0xec, 0xc3, 0xeb, 0x57, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x29, 0x24, 0x18,
	0x27, 0x5f, 0x04, 0x00, 0x00,
}
