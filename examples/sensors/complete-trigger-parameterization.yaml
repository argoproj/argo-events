# Consider an event payload,
#
#  {
#   "name": "trigger-wf-1",
#   "namespace": "argo-events",
#   "bucket": "mybucket",
#   "port": "9000",
#   "key": "hello.yaml",
#   "image": "docker/busybox",
#  }
#
# The example refers to workflow stored on a S3 bucket. With normal sensor spec, you would hard-code the S3 bucket name, object key and other things in trigger.
# But user would like to have dynamic trigger spec where depending on the data in the payload.
# The example data payload contains information like bucket, key, name, namespace which is used to replace the placeholders in trigger spec.
# The image in payload will be used to replace the image in the workflow.

# A parameter takes a key from event payload, extracts the value and set it at the destination.

apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: webhook
spec:
  template:
    serviceAccountName: argo-events-sa
  dependencies:
    - name: test-dep
      eventSourceName: webhook
      eventName: example
  triggers:
    - template:
        name: THIS_WILL_BE_REPLACED_BY_NAME_FROM_EVENT
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          source:
            s3:
              bucket:
                name: THIS_WILL_BE_REPLACED_BUCKET_FROM_EVENT
                key: THIS_WILL_BE_REPLACED_KEY_FROM_EVENT
              # endpoint can vary based on your minio installation
              endpoint: minio-service.argo-events:9000
              insecure: true
              accessKey:
                key: accesskey
                name: artifacts-minio
              secretKey:
                key: secretkey
                name: artifacts-minio
          # Apply parameters for workflow resource fetched from the S3 bucket
          parameters:
            - src:
                dependencyName: test-dep
                dataKey: namespace
              dest: metadata.namespace
            - src:
                dependencyName: test-dep
                dataKey: image
              dest: spec.templates.0.container.image
      # Apply parameters at the template level.
      parameters:
        - src:
            dependencyName: test-dep
            dataKey: name
          dest: name
        - src:
            dependencyName: test-dep
            dataKey: bucket
          dest: k8s.source.s3.bucket.name
        - src:
            dependencyName: test-dep
            dataKey: key
          dest: k8s.source.s3.bucket.key
        - src:
            dependencyName: test-dep
            dataKey: port
          dest: k8s.source.s3.endpoint
          # Append the port to the existing source.s3.endpoint value
          operation: append
