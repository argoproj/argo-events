// +build !ignore_autogenerated

/*
Copyright 2018 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.AMQPEventSource":           schema_pkg_apis_eventsources_v1alpha1_AMQPEventSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.AzureEventsHubEventSource": schema_pkg_apis_eventsources_v1alpha1_AzureEventsHubEventSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.CalendarEventSource":       schema_pkg_apis_eventsources_v1alpha1_CalendarEventSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.EventSource":               schema_pkg_apis_eventsources_v1alpha1_EventSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.EventSourceList":           schema_pkg_apis_eventsources_v1alpha1_EventSourceList(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.EventSourceSpec":           schema_pkg_apis_eventsources_v1alpha1_EventSourceSpec(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.EventSourceStatus":         schema_pkg_apis_eventsources_v1alpha1_EventSourceStatus(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.FileEventSource":           schema_pkg_apis_eventsources_v1alpha1_FileEventSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.GithubEventSource":         schema_pkg_apis_eventsources_v1alpha1_GithubEventSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.GitlabEventSource":         schema_pkg_apis_eventsources_v1alpha1_GitlabEventSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.HDFSEventSource":           schema_pkg_apis_eventsources_v1alpha1_HDFSEventSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.KafkaEventSource":          schema_pkg_apis_eventsources_v1alpha1_KafkaEventSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.MQTTEventSource":           schema_pkg_apis_eventsources_v1alpha1_MQTTEventSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.NATSEventsSource":          schema_pkg_apis_eventsources_v1alpha1_NATSEventsSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.PubSubEventSource":         schema_pkg_apis_eventsources_v1alpha1_PubSubEventSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.ResourceEventSource":       schema_pkg_apis_eventsources_v1alpha1_ResourceEventSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.ResourceFilter":            schema_pkg_apis_eventsources_v1alpha1_ResourceFilter(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.SNSEventSource":            schema_pkg_apis_eventsources_v1alpha1_SNSEventSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.SQSEventSource":            schema_pkg_apis_eventsources_v1alpha1_SQSEventSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.SlackEventSource":          schema_pkg_apis_eventsources_v1alpha1_SlackEventSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.StorageGridEventSource":    schema_pkg_apis_eventsources_v1alpha1_StorageGridEventSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.StorageGridFilter":         schema_pkg_apis_eventsources_v1alpha1_StorageGridFilter(ref),
	}
}

func schema_pkg_apis_eventsources_v1alpha1_AMQPEventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AMQPEventSource refers to an event-source for AMQP stream events",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL for rabbitmq service",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"exchangeName": {
						SchemaProps: spec.SchemaProps{
							Description: "ExchangeName is the exchange name For more information, visit https://www.rabbitmq.com/tutorials/amqp-concepts.html",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"exchangeType": {
						SchemaProps: spec.SchemaProps{
							Description: "ExchangeType is rabbitmq exchange type",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"routingKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Routing key for bindings",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"connectionBackoff": {
						SchemaProps: spec.SchemaProps{
							Description: "Backoff holds parameters applied to connection.",
							Ref:         ref("github.com/argoproj/argo-events/common.Backoff"),
						},
					},
				},
				Required: []string{"url", "exchangeName", "exchangeType", "routingKey"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/common.Backoff"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_AzureEventsHubEventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureEventsHubEventSource describes the event source for azure events hub More info at https://docs.microsoft.com/en-us/azure/event-hubs/",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"fqdn": {
						SchemaProps: spec.SchemaProps{
							Description: "FQDN of the EventHubs namespace you created More info at https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sharedAccessKeyName": {
						SchemaProps: spec.SchemaProps{
							Description: "SharedAccessKeyName is the name you chose for your application's SAS keys",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"sharedAccessKey": {
						SchemaProps: spec.SchemaProps{
							Description: "SharedAccessKey is the the generated value of the key",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"hubName": {
						SchemaProps: spec.SchemaProps{
							Description: "Event Hub path/name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace refers to Kubernetes namespace which is used to retrieve the shared access key and name from.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"fqdn", "sharedAccessKeyName", "sharedAccessKey", "hubName", "namespace"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_CalendarEventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CalendarEventSource describes a time based dependency. One of the fields (schedule, interval, or recurrence) must be passed. Schedule takes precedence over interval; interval takes precedence over recurrence",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"schedule": {
						SchemaProps: spec.SchemaProps{
							Description: "Schedule is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"interval": {
						SchemaProps: spec.SchemaProps{
							Description: "Interval is a string that describes an interval duration, e.g. 1s, 30m, 2h...",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"exclusionDates": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "string",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "ExclusionDates defines the list of DATE-TIME exceptions for recurring events.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"timezone": {
						SchemaProps: spec.SchemaProps{
							Description: "Timezone in which to run the schedule",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"userPayload": {
						SchemaProps: spec.SchemaProps{
							Description: "UserPayload will be sent to sensor as extra data once the event is triggered",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
				},
				Required: []string{"schedule", "interval"},
			},
		},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_EventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EventSource is the definition of a eventsource resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.EventSourceStatus"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.EventSourceSpec"),
						},
					},
				},
				Required: []string{"metadata", "status", "spec"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.EventSourceSpec", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.EventSourceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_EventSourceList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EventSourceList is the list of eventsource resources",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "eventsource",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.EventSource"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.EventSource", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_EventSourceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EventSourceSpec refers to specification of event-source resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"minio": {
						SchemaProps: spec.SchemaProps{
							Description: "Minio event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/common.S3Artifact"),
									},
								},
							},
						},
					},
					"calendar": {
						SchemaProps: spec.SchemaProps{
							Description: "Calendar event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.CalendarEventSource"),
									},
								},
							},
						},
					},
					"file": {
						SchemaProps: spec.SchemaProps{
							Description: "File event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.FileEventSource"),
									},
								},
							},
						},
					},
					"resource": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.ResourceEventSource"),
									},
								},
							},
						},
					},
					"webhook": {
						SchemaProps: spec.SchemaProps{
							Description: "Webhook event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/gateways/server/common/webhook.Context"),
									},
								},
							},
						},
					},
					"amqp": {
						SchemaProps: spec.SchemaProps{
							Description: "AMQP event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.AMQPEventSource"),
									},
								},
							},
						},
					},
					"kafka": {
						SchemaProps: spec.SchemaProps{
							Description: "Kafka event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.KafkaEventSource"),
									},
								},
							},
						},
					},
					"mqtt": {
						SchemaProps: spec.SchemaProps{
							Description: "MQTT event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.MQTTEventSource"),
									},
								},
							},
						},
					},
					"nats": {
						SchemaProps: spec.SchemaProps{
							Description: "NATS event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.NATSEventsSource"),
									},
								},
							},
						},
					},
					"sns": {
						SchemaProps: spec.SchemaProps{
							Description: "SNS event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.SNSEventSource"),
									},
								},
							},
						},
					},
					"sqs": {
						SchemaProps: spec.SchemaProps{
							Description: "SQS event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.SQSEventSource"),
									},
								},
							},
						},
					},
					"pubSub": {
						SchemaProps: spec.SchemaProps{
							Description: "PubSub eevnt sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.PubSubEventSource"),
									},
								},
							},
						},
					},
					"github": {
						SchemaProps: spec.SchemaProps{
							Description: "Github event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.GithubEventSource"),
									},
								},
							},
						},
					},
					"gitlab": {
						SchemaProps: spec.SchemaProps{
							Description: "Gitlab event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.GitlabEventSource"),
									},
								},
							},
						},
					},
					"hdfs": {
						SchemaProps: spec.SchemaProps{
							Description: "HDFS event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.HDFSEventSource"),
									},
								},
							},
						},
					},
					"slack": {
						SchemaProps: spec.SchemaProps{
							Description: "Slack event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.SlackEventSource"),
									},
								},
							},
						},
					},
					"storageGrid": {
						SchemaProps: spec.SchemaProps{
							Description: "StorageGrid event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.StorageGridEventSource"),
									},
								},
							},
						},
					},
					"azureEventsHub": {
						SchemaProps: spec.SchemaProps{
							Description: "AzureEventsHub event sources",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.AzureEventsHubEventSource"),
									},
								},
							},
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of the event source",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/gateways/server/common/webhook.Context", "github.com/argoproj/argo-events/pkg/apis/common.S3Artifact", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.AMQPEventSource", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.AzureEventsHubEventSource", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.CalendarEventSource", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.FileEventSource", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.GithubEventSource", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.GitlabEventSource", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.HDFSEventSource", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.KafkaEventSource", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.MQTTEventSource", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.NATSEventsSource", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.PubSubEventSource", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.ResourceEventSource", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.SNSEventSource", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.SQSEventSource", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.SlackEventSource", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.StorageGridEventSource"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_EventSourceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EventSourceStatus holds the status of the event-source resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"createdAt": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_FileEventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FileEventSource describes an event-source for file related events.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"eventType": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of file operations to watch Refer https://github.com/fsnotify/fsnotify/blob/master/fsnotify.go for more information",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"watchPathConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "WatchPathConfig contains configuration about the file path to watch",
							Ref:         ref("github.com/argoproj/argo-events/gateways/server/common/fsevent.WatchPathConfig"),
						},
					},
				},
				Required: []string{"eventType", "watchPathConfig"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/gateways/server/common/fsevent.WatchPathConfig"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_GithubEventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GithubEventSource refers to event-source for github related events",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Description: "Id is the webhook's id",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"webhook": {
						SchemaProps: spec.SchemaProps{
							Description: "Webhook refers to the configuration required to run a http server",
							Ref:         ref("github.com/argoproj/argo-events/gateways/server/common/webhook.Context"),
						},
					},
					"owner": {
						SchemaProps: spec.SchemaProps{
							Description: "Owner refers to GitHub owner name i.e. argoproj",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"repository": {
						SchemaProps: spec.SchemaProps{
							Description: "Repository refers to GitHub repo name i.e. argo-events",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"events": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "string",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Events refer to Github events to subscribe to which the gateway will subscribe",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"apiToken": {
						SchemaProps: spec.SchemaProps{
							Description: "APIToken refers to a K8s secret containing github api token",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"webhookSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "WebhookSecret refers to K8s secret containing GitHub webhook secret https://developer.github.com/webhooks/securing/",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"insecure": {
						SchemaProps: spec.SchemaProps{
							Description: "Insecure tls verification",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"active": {
						SchemaProps: spec.SchemaProps{
							Description: "Active refers to status of the webhook for event deliveries. https://developer.github.com/webhooks/creating/#active",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"contentType": {
						SchemaProps: spec.SchemaProps{
							Description: "ContentType of the event delivery",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"githubBaseURL": {
						SchemaProps: spec.SchemaProps{
							Description: "GitHub base URL (for GitHub Enterprise)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"githubUploadURL": {
						SchemaProps: spec.SchemaProps{
							Description: "GitHub upload URL (for GitHub Enterprise)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace refers to Kubernetes namespace which is used to retrieve webhook secret and api token from.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deleteHookOnFinish": {
						SchemaProps: spec.SchemaProps{
							Description: "DeleteHookOnFinish determines whether to delete the GitHub hook for the repository once the event source is stopped.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"id", "webhook", "owner", "repository", "events", "apiToken", "namespace"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/gateways/server/common/webhook.Context", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_GitlabEventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitlabEventSource refers to event-source related to Gitlab events",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"webhook": {
						SchemaProps: spec.SchemaProps{
							Description: "Webhook holds configuration to run a http server",
							Ref:         ref("github.com/argoproj/argo-events/gateways/server/common/webhook.Context"),
						},
					},
					"projectId": {
						SchemaProps: spec.SchemaProps{
							Description: "ProjectId is the id of project for which integration needs to setup",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"event": {
						SchemaProps: spec.SchemaProps{
							Description: "Event is a gitlab event to listen to. Refer https://github.com/xanzy/go-gitlab/blob/bf34eca5d13a9f4c3f501d8a97b8ac226d55e4d9/projects.go#L794.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"accessToken": {
						SchemaProps: spec.SchemaProps{
							Description: "AccessToken is reference to k8 secret which holds the gitlab api access information",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"enableSSLVerification": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableSSLVerification to enable ssl verification",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"gitlabBaseURL": {
						SchemaProps: spec.SchemaProps{
							Description: "GitlabBaseURL is the base URL for API requests to a custom endpoint",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace refers to Kubernetes namespace which is used to retrieve access token from.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deleteHookOnFinish": {
						SchemaProps: spec.SchemaProps{
							Description: "DeleteHookOnFinish determines whether to delete the GitLab hook for the project once the event source is stopped.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"webhook", "projectId", "event", "accessToken", "gitlabBaseURL", "namespace"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/gateways/server/common/webhook.Context", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_HDFSEventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HDFSEventSource refers to event-source for HDFS related events",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"directory": {
						SchemaProps: spec.SchemaProps{
							Description: "Directory to watch for events",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path is relative path of object to watch with respect to the directory",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pathRegexp": {
						SchemaProps: spec.SchemaProps{
							Description: "PathRegexp is regexp of relative path of object to watch with respect to the directory",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of file operations to watch",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"checkInterval": {
						SchemaProps: spec.SchemaProps{
							Description: "CheckInterval is a string that describes an interval duration to check the directory state, e.g. 1s, 30m, 2h... (defaults to 1m)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"addresses": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "string",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Addresses is accessible addresses of HDFS name nodes",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"hdfsUser": {
						SchemaProps: spec.SchemaProps{
							Description: "HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"krbCCacheSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"krbKeytabSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"krbUsername": {
						SchemaProps: spec.SchemaProps{
							Description: "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"krbRealm": {
						SchemaProps: spec.SchemaProps{
							Description: "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"krbConfigConfigMap": {
						SchemaProps: spec.SchemaProps{
							Description: "KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.",
							Ref:         ref("k8s.io/api/core/v1.ConfigMapKeySelector"),
						},
					},
					"krbServicePrincipalName": {
						SchemaProps: spec.SchemaProps{
							Description: "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace refers to Kubernetes namespace which is used to retrieve cache secret and ket tab secret from.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"directory", "type", "addresses", "namespace"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ConfigMapKeySelector", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_KafkaEventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KafkaEventSource refers to event-source for Kafka related events",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL to kafka cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"partition": {
						SchemaProps: spec.SchemaProps{
							Description: "Partition name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"topic": {
						SchemaProps: spec.SchemaProps{
							Description: "Topic name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"connectionBackoff": {
						SchemaProps: spec.SchemaProps{
							Description: "Backoff holds parameters applied to connection.",
							Ref:         ref("github.com/argoproj/argo-events/common.Backoff"),
						},
					},
				},
				Required: []string{"url", "partition", "topic"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/common.Backoff"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_MQTTEventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MQTTEventSource refers to event-source for MQTT related events",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL to connect to broker",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"topic": {
						SchemaProps: spec.SchemaProps{
							Description: "Topic name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clientId": {
						SchemaProps: spec.SchemaProps{
							Description: "ClientID is the id of the client",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"connectionBackoff": {
						SchemaProps: spec.SchemaProps{
							Description: "ConnectionBackoff holds backoff applied to connection.",
							Ref:         ref("github.com/argoproj/argo-events/common.Backoff"),
						},
					},
				},
				Required: []string{"url", "topic", "clientId"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/common.Backoff"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_NATSEventsSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NATSEventSource refers to event-source for NATS related events",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL to connect to NATS cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subject": {
						SchemaProps: spec.SchemaProps{
							Description: "Subject holds the name of the subject onto which messages are published",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"connectionBackoff": {
						SchemaProps: spec.SchemaProps{
							Description: "ConnectionBackoff holds backoff applied to connection.",
							Ref:         ref("github.com/argoproj/argo-events/common.Backoff"),
						},
					},
				},
				Required: []string{"url", "subject"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/common.Backoff"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_PubSubEventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PubSubEventSource refers to event-source for GCP PubSub related events.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"projectID": {
						SchemaProps: spec.SchemaProps{
							Description: "ProjectID is the unique identifier for your project on GCP",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"topicProjectID": {
						SchemaProps: spec.SchemaProps{
							Description: "TopicProjectID identifies the project where the topic should exist or be created (assumed to be the same as ProjectID by default)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"topic": {
						SchemaProps: spec.SchemaProps{
							Description: "Topic on which a subscription will be created",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"credentialsFile": {
						SchemaProps: spec.SchemaProps{
							Description: "CredentialsFile is the file that contains credentials to authenticate for GCP",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deleteSubscriptionOnFinish": {
						SchemaProps: spec.SchemaProps{
							Description: "DeleteSubscriptionOnFinish determines whether to delete the GCP PubSub subscription once the event source is stopped.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"projectID", "topicProjectID", "topic", "credentialsFile"},
			},
		},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_ResourceEventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ResourceEventSource refers to a event-source for K8s resource related events.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace where resource is deployed",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"filter": {
						SchemaProps: spec.SchemaProps{
							Description: "Filter is applied on the metadata of the resource",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.ResourceFilter"),
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"resource": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"eventType": {
						SchemaProps: spec.SchemaProps{
							Description: "Type is the event type. If not provided, the gateway will watch all events for a resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"namespace", "group", "version", "resource"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.ResourceFilter"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_ResourceFilter(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ResourceFilter contains K8 ObjectMeta information to further filter resource event objects",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"prefix": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"fields": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"createdBy": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_SNSEventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SNSEventSource refers to event-source for AWS SNS related events",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"webhook": {
						SchemaProps: spec.SchemaProps{
							Description: "Webhook configuration for http server",
							Ref:         ref("github.com/argoproj/argo-events/gateways/server/common/webhook.Context"),
						},
					},
					"topicArn": {
						SchemaProps: spec.SchemaProps{
							Description: "TopicArn",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"accessKey": {
						SchemaProps: spec.SchemaProps{
							Description: "AccessKey refers K8 secret containing aws access key",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"secretKey": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretKey refers K8 secret containing aws secret key",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace refers to Kubernetes namespace to read access related secret from.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region is AWS region",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"webhook", "topicArn", "region"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/gateways/server/common/webhook.Context", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_SQSEventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SQSEventSource refers to event-source for AWS SQS related events",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"accessKey": {
						SchemaProps: spec.SchemaProps{
							Description: "AccessKey refers K8 secret containing aws access key",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"secretKey": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretKey refers K8 secret containing aws secret key",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region is AWS region",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"queue": {
						SchemaProps: spec.SchemaProps{
							Description: "Queue is AWS SQS queue to listen to for messages",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"waitTimeSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "WaitTimeSeconds is The duration (in seconds) for which the call waits for a message to arrive in the queue before returning.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace refers to Kubernetes namespace to read access related secret from.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"region", "queue", "waitTimeSeconds"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_SlackEventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SlackEventSource refers to event-source for Slack related events",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"signingSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "Slack App signing secret",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"token": {
						SchemaProps: spec.SchemaProps{
							Description: "Token for URL verification handshake",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"webhook": {
						SchemaProps: spec.SchemaProps{
							Description: "Webhook holds configuration for a REST endpoint",
							Ref:         ref("github.com/argoproj/argo-events/gateways/server/common/webhook.Context"),
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace refers to Kubernetes namespace which is used to retrieve token and signing secret from.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"webhook", "namespace"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/gateways/server/common/webhook.Context", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_StorageGridEventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StorageGridEventSource refers to event-source for StorageGrid related events",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"webhook": {
						SchemaProps: spec.SchemaProps{
							Description: "Webhook holds configuration for a REST endpoint",
							Ref:         ref("github.com/argoproj/argo-events/gateways/server/common/webhook.Context"),
						},
					},
					"events": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "string",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Events are s3 bucket notification events. For more information on s3 notifications, follow https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations Note that storage grid notifications do not contain `s3:`",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"filter": {
						SchemaProps: spec.SchemaProps{
							Description: "Filter on object key which caused the notification.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.StorageGridFilter"),
						},
					},
				},
				Required: []string{"webhook"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/gateways/server/common/webhook.Context", "github.com/argoproj/argo-events/pkg/apis/eventsources/v1alpha1.StorageGridFilter"},
	}
}

func schema_pkg_apis_eventsources_v1alpha1_StorageGridFilter(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Filter represents filters to apply to bucket notifications for specifying constraints on objects",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"prefix": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"suffix": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"prefix", "suffix"},
			},
		},
	}
}
