/*
Copyright 2020 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.argoproj.argo_events.pkg.apis.eventbus.v1alpha1;

import "github.com/argoproj/argo-events/pkg/apis/common/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// BusConfig has the finalized configuration for EventBus
message BusConfig {
  optional NATSConfig nats = 1;
}

// ContainerTemplate defines customized spec for a container
message ContainerTemplate {
  optional k8s.io.api.core.v1.ResourceRequirements resources = 1;
}

// EventBus is the definition of a eventbus resource
// +genclient
// +kubebuilder:resource:singular=eventbus,shortName=eb
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
message EventBus {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EventBusSpec spec = 2;

  optional EventBusStatus status = 3;
}

// EventBusList is the list of eventbus resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message EventBusList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated EventBus items = 2;
}

// EventBusSpec refers to specification of eventbus resource
message EventBusSpec {
  // NATS eventbus
  optional NATSBus nats = 1;
}

// EventBusStatus holds the status of the eventbus resource
message EventBusStatus {
  optional github.com.argoproj.argo_events.pkg.apis.common.Status status = 1;

  // Config holds the fininalized configuration of EventBus
  optional BusConfig config = 2;
}

// NATSBus holds the NATS eventbus information
message NATSBus {
  // Native means to bring up a native NATS service
  optional NativeStrategy native = 1;

  // Exotic holds an exotic NATS config
  optional NATSConfig exotic = 2;
}

// NATSConfig holds the config of NATS
message NATSConfig {
  // NATS host url
  optional string url = 1;

  // Cluster ID for nats streaming, if it's missing, treat it as NATS server
  // +optional
  optional string clusterID = 2;

  // Auth strategy, default to AuthStrategyNone
  // +optional
  optional string auth = 3;

  // Secret for auth
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector accessSecret = 4;
}

// NativeStrategy indicates to install a native NATS service
message NativeStrategy {
  // Size is the NATS StatefulSet size
  optional int32 replicas = 1;

  optional string auth = 2;

  optional bool antiAffinity = 3;

  // +optional
  optional PersistenceStrategy persistence = 4;

  // ContainerTemplate contains customized spec for NATS container
  // +optional
  optional ContainerTemplate containerTemplate = 5;

  // MetricsContainerTemplate contains customized spec for metrics container
  // +optional
  optional ContainerTemplate metricsContainerTemplate = 6;

  // NodeSelector is a selector which must be true for the pod to fit on a node.
  // Selector which must match a node's labels for the pod to be scheduled on that node.
  // More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  // +optional
  map<string, string> nodeSelector = 7;
}

// PersistenceStrategy defines the strategy of persistence
message PersistenceStrategy {
  // Name of the StorageClass required by the claim.
  // More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
  // +optional
  optional string storageClassName = 1;

  // Available access modes such as ReadWriteOnce, ReadWriteMany
  // https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes
  // +optional
  optional string accessMode = 2;

  // Volume size, e.g. 10Gi
  optional k8s.io.apimachinery.pkg.api.resource.Quantity volumeSize = 3;
}

