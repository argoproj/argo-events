/*
Copyright 2021 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.argoproj.argo_events.pkg.apis.eventbus.v1alpha1;

import "github.com/argoproj/argo-events/pkg/apis/common/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// BusConfig has the finalized configuration for EventBus
message BusConfig {
  // +optional
  optional NATSConfig nats = 1;

  // +optional
  optional JetStreamConfig jetstream = 2;

  // +optional
  optional KafkaBus kafka = 3;
}

// ContainerTemplate defines customized spec for a container
message ContainerTemplate {
  optional k8s.io.api.core.v1.ResourceRequirements resources = 1;

  optional string imagePullPolicy = 2;

  optional k8s.io.api.core.v1.SecurityContext securityContext = 3;
}

// EventBus is the definition of a eventbus resource
// +genclient
// +kubebuilder:resource:singular=eventbus,shortName=eb
// +kubebuilder:subresource:status
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
message EventBus {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EventBusSpec spec = 2;

  // +optional
  optional EventBusStatus status = 3;
}

// EventBusList is the list of eventbus resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message EventBusList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated EventBus items = 2;
}

// EventBusSpec refers to specification of eventbus resource
message EventBusSpec {
  // NATS eventbus
  // +optional
  optional NATSBus nats = 1;

  // +optional
  optional JetStreamBus jetstream = 2;

  // +optional
  // Kafka eventbus
  optional KafkaBus kafka = 3;

  // Exotic JetStream
  // +optional
  optional JetStreamConfig jetstreamExotic = 4;
}

// EventBusStatus holds the status of the eventbus resource
message EventBusStatus {
  optional github.com.argoproj.argo_events.pkg.apis.common.Status status = 1;

  // Config holds the fininalized configuration of EventBus
  optional BusConfig config = 2;
}

// JetStreamBus holds the JetStream EventBus information
message JetStreamBus {
  // JetStream version, such as "2.7.3"
  optional string version = 1;

  // Redis StatefulSet size
  // +kubebuilder:default=3
  optional int32 replicas = 2;

  // ContainerTemplate contains customized spec for Nats JetStream container
  // +optional
  optional ContainerTemplate containerTemplate = 3;

  // ReloaderContainerTemplate contains customized spec for config reloader container
  // +optional
  optional ContainerTemplate reloaderContainerTemplate = 4;

  // MetricsContainerTemplate contains customized spec for metrics container
  // +optional
  optional ContainerTemplate metricsContainerTemplate = 5;

  // +optional
  optional PersistenceStrategy persistence = 6;

  // Metadata sets the pods's metadata, i.e. annotations and labels
  optional github.com.argoproj.argo_events.pkg.apis.common.Metadata metadata = 7;

  // NodeSelector is a selector which must be true for the pod to fit on a node.
  // Selector which must match a node's labels for the pod to be scheduled on that node.
  // More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  // +optional
  map<string, string> nodeSelector = 8;

  // If specified, the pod's tolerations.
  // +optional
  repeated k8s.io.api.core.v1.Toleration tolerations = 9;

  // SecurityContext holds pod-level security attributes and common container settings.
  // Optional: Defaults to empty.  See type description for default values of each field.
  // +optional
  optional k8s.io.api.core.v1.PodSecurityContext securityContext = 10;

  // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
  // If specified, these secrets will be passed to individual puller implementations for them to use. For example,
  // in the case of docker, only DockerConfig type secrets are honored.
  // More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
  // +optional
  // +patchMergeKey=name
  // +patchStrategy=merge
  repeated k8s.io.api.core.v1.LocalObjectReference imagePullSecrets = 11;

  // If specified, indicates the Redis pod's priority. "system-node-critical"
  // and "system-cluster-critical" are two special keywords which indicate the
  // highest priorities with the former being the highest priority. Any other
  // name must be defined by creating a PriorityClass object with that name.
  // If not specified, the pod priority will be default or zero if there is no
  // default.
  // More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  // +optional
  optional string priorityClassName = 12;

  // The priority value. Various system components use this field to find the
  // priority of the Redis pod. When Priority Admission Controller is enabled,
  // it prevents users from setting this field. The admission controller populates
  // this field from PriorityClassName.
  // The higher the value, the higher the priority.
  // More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  // +optional
  optional int32 priority = 13;

  // The pod's scheduling constraints
  // More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  // +optional
  optional k8s.io.api.core.v1.Affinity affinity = 14;

  // ServiceAccountName to apply to the StatefulSet
  // +optional
  optional string serviceAccountName = 15;

  // JetStream configuration, if not specified, global settings in controller-config will be used.
  // See https://docs.nats.io/running-a-nats-service/configuration#jetstream.
  // Only configure "max_memory_store" or "max_file_store", do not set "store_dir" as it has been hardcoded.
  // +optional
  optional string settings = 16;

  // Optional arguments to start nats-server. For example, "-D" to enable debugging output, "-DV" to enable debugging and tracing.
  // Check https://docs.nats.io/ for all the available arguments.
  // +optional
  repeated string startArgs = 17;

  // Optional configuration for the streams to be created in this JetStream service, if specified, it will be merged with the default configuration in controller-config.
  // It accepts a YAML format configuration, available fields include, "maxBytes", "maxMsgs", "maxAge" (e.g. 72h), "replicas" (1, 3, 5), "duplicates" (e.g. 5m).
  // +optional
  optional string streamConfig = 18;

  // Maximum number of bytes in a message payload, 0 means unlimited. Defaults to 1MB
  // +optional
  optional string maxPayload = 19;
}

message JetStreamConfig {
  // JetStream (Nats) URL
  optional string url = 1;

  // Secret for auth
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector accessSecret = 2;

  // +optional
  optional string streamConfig = 3;
}

// KafkaBus holds the KafkaBus EventBus information
message KafkaBus {
  // URL to kafka cluster, multiple URLs separated by comma
  optional string url = 1;

  // Topic name, defaults to {namespace_name}-{eventbus_name}
  // +optional
  optional string topic = 2;

  // Kafka version, sarama defaults to the oldest supported stable version
  // +optional
  optional string version = 3;

  // TLS configuration for the kafka client.
  // +optional
  optional github.com.argoproj.argo_events.pkg.apis.common.TLSConfig tls = 4;

  // SASL configuration for the kafka client
  // +optional
  optional github.com.argoproj.argo_events.pkg.apis.common.SASLConfig sasl = 5;

  // Consumer group for kafka client
  // +optional
  optional KafkaConsumerGroup consumerGroup = 6;
}

message KafkaConsumerGroup {
  // Consumer group name, defaults to {namespace_name}-{sensor_name}
  // +optional
  optional string groupName = 1;

  // Rebalance strategy can be one of: sticky, roundrobin, range. Range is the default.
  // +optional
  optional string rebalanceStrategy = 2;

  // When starting up a new group do we want to start from the oldest event (true) or the newest event (false), defaults to false
  // +optional
  optional bool startOldest = 3;
}

// NATSBus holds the NATS eventbus information
message NATSBus {
  // Native means to bring up a native NATS service
  optional NativeStrategy native = 1;

  // Exotic holds an exotic NATS config
  optional NATSConfig exotic = 2;
}

// NATSConfig holds the config of NATS
message NATSConfig {
  // NATS streaming url
  optional string url = 1;

  // Cluster ID for nats streaming
  optional string clusterID = 2;

  // Auth strategy, default to AuthStrategyNone
  // +optional
  optional string auth = 3;

  // Secret for auth
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector accessSecret = 4;
}

// NativeStrategy indicates to install a native NATS service
message NativeStrategy {
  // Size is the NATS StatefulSet size
  optional int32 replicas = 1;

  optional string auth = 2;

  // +optional
  optional PersistenceStrategy persistence = 3;

  // ContainerTemplate contains customized spec for NATS container
  // +optional
  optional ContainerTemplate containerTemplate = 4;

  // MetricsContainerTemplate contains customized spec for metrics container
  // +optional
  optional ContainerTemplate metricsContainerTemplate = 5;

  // NodeSelector is a selector which must be true for the pod to fit on a node.
  // Selector which must match a node's labels for the pod to be scheduled on that node.
  // More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  // +optional
  map<string, string> nodeSelector = 6;

  // If specified, the pod's tolerations.
  // +optional
  repeated k8s.io.api.core.v1.Toleration tolerations = 7;

  // Metadata sets the pods's metadata, i.e. annotations and labels
  optional github.com.argoproj.argo_events.pkg.apis.common.Metadata metadata = 8;

  // SecurityContext holds pod-level security attributes and common container settings.
  // Optional: Defaults to empty.  See type description for default values of each field.
  // +optional
  optional k8s.io.api.core.v1.PodSecurityContext securityContext = 9;

  // Max Age of existing messages, i.e. "72h", “4h35m”
  // +optional
  optional string maxAge = 10;

  // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
  // If specified, these secrets will be passed to individual puller implementations for them to use. For example,
  // in the case of docker, only DockerConfig type secrets are honored.
  // More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
  // +optional
  // +patchMergeKey=name
  // +patchStrategy=merge
  repeated k8s.io.api.core.v1.LocalObjectReference imagePullSecrets = 11;

  // ServiceAccountName to apply to NATS StatefulSet
  // +optional
  optional string serviceAccountName = 12;

  // If specified, indicates the EventSource pod's priority. "system-node-critical"
  // and "system-cluster-critical" are two special keywords which indicate the
  // highest priorities with the former being the highest priority. Any other
  // name must be defined by creating a PriorityClass object with that name.
  // If not specified, the pod priority will be default or zero if there is no
  // default.
  // More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  // +optional
  optional string priorityClassName = 13;

  // The priority value. Various system components use this field to find the
  // priority of the EventSource pod. When Priority Admission Controller is enabled,
  // it prevents users from setting this field. The admission controller populates
  // this field from PriorityClassName.
  // The higher the value, the higher the priority.
  // More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  // +optional
  optional int32 priority = 14;

  // The pod's scheduling constraints
  // More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  // +optional
  optional k8s.io.api.core.v1.Affinity affinity = 15;

  // Maximum number of messages per channel, 0 means unlimited. Defaults to 1000000
  optional uint64 maxMsgs = 16;

  // Total size of messages per channel, 0 means unlimited. Defaults to 1GB
  optional string maxBytes = 17;

  // Maximum number of subscriptions per channel, 0 means unlimited. Defaults to 1000
  optional uint64 maxSubs = 18;

  // Maximum number of bytes in a message payload, 0 means unlimited. Defaults to 1MB
  optional string maxPayload = 19;

  // Specifies the time in follower state without a leader before attempting an election, i.e. "72h", “4h35m”. Defaults to 2s
  optional string raftHeartbeatTimeout = 20;

  // Specifies the time in candidate state without a leader before attempting an election, i.e. "72h", “4h35m”. Defaults to 2s
  optional string raftElectionTimeout = 21;

  // Specifies how long a leader waits without being able to contact a quorum of nodes before stepping down as leader, i.e. "72h", “4h35m”. Defaults to 1s
  optional string raftLeaseTimeout = 22;

  // Specifies the time without an Apply() operation before sending an heartbeat to ensure timely commit, i.e. "72h", “4h35m”. Defaults to 100ms
  optional string raftCommitTimeout = 23;
}

// PersistenceStrategy defines the strategy of persistence
message PersistenceStrategy {
  // Name of the StorageClass required by the claim.
  // More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
  // +optional
  optional string storageClassName = 1;

  // Available access modes such as ReadWriteOnce, ReadWriteMany
  // https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes
  // +optional
  optional string accessMode = 2;

  // Volume size, e.g. 10Gi
  optional k8s.io.apimachinery.pkg.api.resource.Quantity volumeSize = 3;
}

