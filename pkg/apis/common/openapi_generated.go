// +build !ignore_autogenerated

/*
Copyright 2020 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package common

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/argoproj/argo-events/pkg/apis/common.AMQPEventData":           schema_argo_events_pkg_apis_common_AMQPEventData(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.AzureEventsHubEventData": schema_argo_events_pkg_apis_common_AzureEventsHubEventData(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.CalendarEventData":       schema_argo_events_pkg_apis_common_CalendarEventData(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.EmitterEventData":        schema_argo_events_pkg_apis_common_EmitterEventData(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.Event":                   schema_argo_events_pkg_apis_common_Event(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.EventContext":            schema_argo_events_pkg_apis_common_EventContext(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.EventProtocol":           schema_argo_events_pkg_apis_common_EventProtocol(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.GitLabEventData":         schema_argo_events_pkg_apis_common_GitLabEventData(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.GithubEventData":         schema_argo_events_pkg_apis_common_GithubEventData(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.Http":                    schema_argo_events_pkg_apis_common_Http(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.KafkaEventData":          schema_argo_events_pkg_apis_common_KafkaEventData(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.MQTTEventData":           schema_argo_events_pkg_apis_common_MQTTEventData(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.MinioEventData":          schema_argo_events_pkg_apis_common_MinioEventData(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.NATSEventData":           schema_argo_events_pkg_apis_common_NATSEventData(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.NSQEventData":            schema_argo_events_pkg_apis_common_NSQEventData(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.Nats":                    schema_argo_events_pkg_apis_common_Nats(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.PubSubEventData":         schema_argo_events_pkg_apis_common_PubSubEventData(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.RedisEventData":          schema_argo_events_pkg_apis_common_RedisEventData(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.ResourceEventData":       schema_argo_events_pkg_apis_common_ResourceEventData(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.S3Artifact":              schema_argo_events_pkg_apis_common_S3Artifact(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.S3Bucket":                schema_argo_events_pkg_apis_common_S3Bucket(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.S3Filter":                schema_argo_events_pkg_apis_common_S3Filter(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.SNSEventData":            schema_argo_events_pkg_apis_common_SNSEventData(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.SQSEventData":            schema_argo_events_pkg_apis_common_SQSEventData(ref),
		"github.com/argoproj/argo-events/pkg/apis/common.WebhookEventData":        schema_argo_events_pkg_apis_common_WebhookEventData(ref),
	}
}

func schema_argo_events_pkg_apis_common_AMQPEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AMQPEventData represents the event data generated by AMQP gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"contentType": {
						SchemaProps: spec.SchemaProps{
							Description: "ContentType is the MIME content type",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"contentEncoding": {
						SchemaProps: spec.SchemaProps{
							Description: "ContentEncoding is the MIME content encoding",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deliveryMode": {
						SchemaProps: spec.SchemaProps{
							Description: "Delivery mode can be either - non-persistent (1) or persistent (2)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"priority": {
						SchemaProps: spec.SchemaProps{
							Description: "Priority refers to the use - 0 to 9",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"correlationId": {
						SchemaProps: spec.SchemaProps{
							Description: "CorrelationId is the correlation identifier",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replyTo": {
						SchemaProps: spec.SchemaProps{
							Description: "ReplyTo is the address to reply to (ex: RPC)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"expiration": {
						SchemaProps: spec.SchemaProps{
							Description: "Expiration refers to message expiration spec",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"messageId": {
						SchemaProps: spec.SchemaProps{
							Description: "MessageId is message identifier",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"timestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Timestamp refers to the message timestamp",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type refers to the message type name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"appId": {
						SchemaProps: spec.SchemaProps{
							Description: "AppId refers to the application id",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"exchange": {
						SchemaProps: spec.SchemaProps{
							Description: "Exchange is basic.publish exchange",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"routingKey": {
						SchemaProps: spec.SchemaProps{
							Description: "RoutingKey is basic.publish routing key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"body": {
						SchemaProps: spec.SchemaProps{
							Description: "Body represents the messsage body",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
				},
				Required: []string{"contentType", "contentEncoding", "deliveryMode", "priority", "correlationId", "replyTo", "expiration", "messageId", "timestamp", "type", "appId", "exchange", "routingKey", "body"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_AzureEventsHubEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureEventsHubEventData represents to the event data generated by Azure Events Hub gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Description: "Id of the message",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"partitionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "PartitionKey",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"body": {
						SchemaProps: spec.SchemaProps{
							Description: "Message body",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
				},
				Required: []string{"id", "partitionKey", "body"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_CalendarEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CalendarEventData represents the event data generated by the Calendar gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"eventTime": {
						SchemaProps: spec.SchemaProps{
							Description: "EventTime is time at which event occurred",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"userPayload": {
						SchemaProps: spec.SchemaProps{
							Description: "UserPayload if any",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
				},
				Required: []string{"eventTime"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_EmitterEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EmitterEventData represents the event data generated by the Emitter gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"topic": {
						SchemaProps: spec.SchemaProps{
							Description: "Topic name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"body": {
						SchemaProps: spec.SchemaProps{
							Description: "Body represents the message body",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
				},
				Required: []string{"topic", "body"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_Event(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Event is a data and its context. Adheres to the CloudEvents v0.3 specification",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"context": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/argoproj/argo-events/pkg/apis/common.EventContext"),
						},
					},
					"data": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "bytes",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "byte",
						},
					},
				},
				Required: []string{"context", "data"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/common.EventContext"},
	}
}

func schema_argo_events_pkg_apis_common_EventContext(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EventContext contains metadata that provides circumstantial information about the occurrence.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of occurrence which has happened. Often this attribute is used for routing, observability, policy enforcement, etc. should be prefixed with a reverse-DNS name. The prefixed domain dictates the organization which defines the semantics of this event type. ex: com.github.pull.create",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"specVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "The version of the CloudEvents specification which the event uses. Enables the interpretation of the context.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "This describes the event producer.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Description: "ID of the event. The semantics are explicitly undefined to ease the implementation of producers.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"time": {
						SchemaProps: spec.SchemaProps{
							Description: "Time when the event happened. Must adhere to format specified in RFC 3339.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime"),
						},
					},
					"dataContentType": {
						SchemaProps: spec.SchemaProps{
							Description: "Content type of the data attribute value. Enables the data attribute to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, the data attribute may carry an XML or JSON payload and the consumer is informed by this attribute being set to \"application/xml\" or \"application/json\" respectively.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subject": {
						SchemaProps: spec.SchemaProps{
							Description: "Subject of the event",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "specVersion", "source", "id", "time", "dataContentType", "subject"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime"},
	}
}

func schema_argo_events_pkg_apis_common_EventProtocol(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Dispatch protocol contains configuration necessary to dispatch an event to sensor over different communication protocols",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"http": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/argoproj/argo-events/pkg/apis/common.Http"),
						},
					},
					"nats": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/argoproj/argo-events/pkg/apis/common.Nats"),
						},
					},
				},
				Required: []string{"type", "http", "nats"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/common.Http", "github.com/argoproj/argo-events/pkg/apis/common.Nats"},
	}
}

func schema_argo_events_pkg_apis_common_GitLabEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitLabEventData represents the event data generated by the GitLab gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"body": {
						SchemaProps: spec.SchemaProps{
							Description: "Body represents the message body",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
				},
				Required: []string{"body"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_GithubEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GithubEventData represents the event data generated by the GitHub gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"body": {
						SchemaProps: spec.SchemaProps{
							Description: "Body represents the message body",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
				},
				Required: []string{"body"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_Http(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Http contains the information required to setup a http server and listen to incoming events",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Port on which server will run",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels to be set for the service generated",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations to be set for the service generated",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"port"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_KafkaEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KafkaEventData represents the event data generated by the Kafka gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"topic": {
						SchemaProps: spec.SchemaProps{
							Description: "Topic refers to the Kafka topic",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"partition": {
						SchemaProps: spec.SchemaProps{
							Description: "Partition refers to the Kafka partition",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "Body refers to the message value",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
					"timestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Timestamp of the message",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"topic", "partition", "value", "timestamp"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_MQTTEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MQTTEventData represents the event data generated by the MQTT gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"topic": {
						SchemaProps: spec.SchemaProps{
							Description: "Topic refers to the MQTT topic name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"messageId": {
						SchemaProps: spec.SchemaProps{
							Description: "MessageId is the unique ID for the message",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"payload": {
						SchemaProps: spec.SchemaProps{
							Description: "Payload is the message payload.",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
				},
				Required: []string{"topic", "messageId", "payload"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_MinioEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MinioEventData represents the event data generated by the Minio gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"notification": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/minio/minio-go.NotificationEvent"),
									},
								},
							},
						},
					},
				},
				Required: []string{"notification"},
			},
		},
		Dependencies: []string{
			"github.com/minio/minio-go.NotificationEvent"},
	}
}

func schema_argo_events_pkg_apis_common_NATSEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NATSEventData represents the event data generated by the NATS gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"subject": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the subject.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"data": {
						SchemaProps: spec.SchemaProps{
							Description: "Message data.",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
				},
				Required: []string{"subject", "data"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_NSQEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NSQEventData represents the event data generated by the NSQ gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"Body": {
						SchemaProps: spec.SchemaProps{
							Description: "Body is the message data.",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
					"Timestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Timestamp of the message.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"NSQDAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "NSQDAddress is the address of the nsq host.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"Body", "Timestamp", "NSQDAddress"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_Nats(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Nats contains the information required to connect to nats server and get subscriptions",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL is nats server/service URL",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"startWithLastReceived": {
						SchemaProps: spec.SchemaProps{
							Description: "Subscribe starting with most recently published value. Refer https://github.com/nats-io/go-nats-streaming",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"deliverAllAvailable": {
						SchemaProps: spec.SchemaProps{
							Description: "Receive all stored values in order.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"startAtSequence": {
						SchemaProps: spec.SchemaProps{
							Description: "Receive messages starting at a specific sequence number",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"startAtTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Subscribe starting at a specific time",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"startAtTimeDelta": {
						SchemaProps: spec.SchemaProps{
							Description: "Subscribe starting a specific amount of time in the past (e.g. 30 seconds ago)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"durable": {
						SchemaProps: spec.SchemaProps{
							Description: "Durable subscriptions allow clients to assign a durable name to a subscription when it is created",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"clusterId": {
						SchemaProps: spec.SchemaProps{
							Description: "The NATS Streaming cluster ID",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clientId": {
						SchemaProps: spec.SchemaProps{
							Description: "The NATS Streaming cluster ID",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of the connection. either standard or streaming",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"url", "type"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_PubSubEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PubSubEventData represents the event data generated by the GCP PubSub gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Description: "ID of the message",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"body": {
						SchemaProps: spec.SchemaProps{
							Description: "Body is the actual data in the message.",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
					"attributes": {
						SchemaProps: spec.SchemaProps{
							Description: "Attributes represents the key-value pairs the current message is labelled with.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"publishTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The time at which the message was published.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"id", "body", "attributes", "publishTime"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_RedisEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RedisEventData represents the event data generated by the Redis gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"channel": {
						SchemaProps: spec.SchemaProps{
							Description: "Subscription channel.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pattern": {
						SchemaProps: spec.SchemaProps{
							Description: "Message pattern",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"payload": {
						SchemaProps: spec.SchemaProps{
							Description: "Message body",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"channel", "pattern", "payload"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_ResourceEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ResourceEventData represents the event data generated by the Resource gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "EventType of the type of the event.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"body": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource body.",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource group name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource version.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resource": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "body", "group", "version", "resource"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_S3Artifact(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "S3Artifact contains information about an S3 connection and bucket",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"bucket": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/argoproj/argo-events/pkg/apis/common.S3Bucket"),
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"insecure": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"accessKey": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"secretKey": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"events": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "string",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"filter": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/argoproj/argo-events/pkg/apis/common.S3Filter"),
						},
					},
				},
				Required: []string{"endpoint", "bucket", "accessKey", "secretKey"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/common.S3Bucket", "github.com/argoproj/argo-events/pkg/apis/common.S3Filter", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_argo_events_pkg_apis_common_S3Bucket(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "S3Bucket contains information to describe an S3 Bucket",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"key": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_S3Filter(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "S3Filter represents filters to apply to bucket nofifications for specifying constraints on objects",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"prefix": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"suffix": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"prefix", "suffix"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_SNSEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SNSEventData represents the event data generated by SNS gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"body": {
						SchemaProps: spec.SchemaProps{
							Description: "Body represents the SNS message body",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
				},
				Required: []string{"body"},
			},
		},
	}
}

func schema_argo_events_pkg_apis_common_SQSEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SQSEventData represents the event data generated by SQS gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"messageId": {
						SchemaProps: spec.SchemaProps{
							Description: "A unique identifier for the message. A MessageId is considered unique across all AWS accounts for an extended period of time.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"messageAttributes": {
						SchemaProps: spec.SchemaProps{
							Description: "Each message attribute consists of a Name, Type, and Value. For more information, see Amazon SQS Message Attributes (https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html) in the Amazon Simple Queue Service Developer Guide.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/aws/aws-sdk-go/service/sqs.MessageAttributeValue"),
									},
								},
							},
						},
					},
					"body": {
						SchemaProps: spec.SchemaProps{
							Description: "The message's contents (not URL-encoded).",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
				},
				Required: []string{"messageId", "messageAttributes", "body"},
			},
		},
		Dependencies: []string{
			"github.com/aws/aws-sdk-go/service/sqs.MessageAttributeValue"},
	}
}

func schema_argo_events_pkg_apis_common_WebhookEventData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WebhookEventData represents the event data generated by the Webhook gateway.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"header": {
						SchemaProps: spec.SchemaProps{
							Description: "Header is the http request header",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type: []string{"array"},
										Items: &spec.SchemaOrArray{
											Schema: &spec.Schema{
												SchemaProps: spec.SchemaProps{
													Type:   []string{"string"},
													Format: "",
												},
											},
										},
									},
								},
							},
						},
					},
					"body": {
						SchemaProps: spec.SchemaProps{
							Description: "Body is http request body",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
				},
				Required: []string{"header", "body"},
			},
		},
	}
}
