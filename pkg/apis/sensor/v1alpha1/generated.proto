/*
Copyright 2020 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.argoproj.argo_events.pkg.apis.sensor.v1alpha1;

import "github.com/argoproj/argo-events/pkg/apis/common/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// AWSLambdaTrigger refers to specification of the trigger to invoke an AWS Lambda function
message AWSLambdaTrigger {
  // FunctionName refers to the name of the function to invoke.
  optional string functionName = 1;

  // AccessKey refers K8 secret containing aws access key
  optional k8s.io.api.core.v1.SecretKeySelector accessKey = 2;

  // SecretKey refers K8 secret containing aws secret key
  optional k8s.io.api.core.v1.SecretKeySelector secretKey = 3;

  // Region is AWS region
  optional string region = 4;

  repeated TriggerParameter payload = 5;

  // +optional
  repeated TriggerParameter parameters = 6;
}

// ArgoWorkflowTrigger is the trigger for the Argo Workflow
message ArgoWorkflowTrigger {
  // Source of the K8 resource file(s)
  optional ArtifactLocation source = 1;

  // Operation refers to the type of operation performed on the argo workflow resource.
  // Default value is Submit.
  // +optional
  optional string operation = 2;

  repeated TriggerParameter parameters = 3;

  // The unambiguous kind of this object - used in order to retrieve the appropriate kubernetes api client for this resource
  optional k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource groupVersionResource = 4;
}

// ArtifactLocation describes the source location for an external artifact
message ArtifactLocation {
  // S3 compliant artifact
  optional github.com.argoproj.argo_events.pkg.apis.common.S3Artifact s3 = 1;

  // Inline artifact is embedded in sensor spec as a string
  optional string inline = 2;

  // File artifact is artifact stored in a file
  optional FileArtifact file = 3;

  // URL to fetch the artifact from
  optional URLArtifact url = 4;

  // Configmap that stores the artifact
  optional k8s.io.api.core.v1.ConfigMapKeySelector configmap = 5;

  // Git repository hosting the artifact
  optional GitArtifact git = 6;

  // Resource is generic template for K8s resource
  optional github.com.argoproj.argo_events.pkg.apis.common.Resource resource = 7;
}

// BasicAuth contains the reference to K8s secrets that holds the username and password
message BasicAuth {
  // Username refers to the Kubernetes secret that holds the username required for basic auth.
  optional k8s.io.api.core.v1.SecretKeySelector username = 1;

  // Password refers to the Kubernetes secret that holds the password required for basic auth.
  optional k8s.io.api.core.v1.SecretKeySelector password = 2;
}

// CustomTrigger refers to the specification of the custom trigger.
message CustomTrigger {
  // ServerURL is the url of the gRPC server that executes custom trigger
  optional string serverURL = 1;

  // Secure refers to type of the connection between sensor to custom trigger gRPC
  optional bool secure = 2;

  // CertSecret refers to the secret that contains cert for secure connection between sensor and custom trigger gRPC server.
  optional k8s.io.api.core.v1.SecretKeySelector certSecret = 3;

  // ServerNameOverride for the secure connection between sensor and custom trigger gRPC server.
  optional string serverNameOverride = 4;

  // Spec is the custom trigger resource specification that custom trigger gRPC server knows how to interpret.
  map<string, string> spec = 5;

  repeated TriggerParameter parameters = 6;

  repeated TriggerParameter payload = 7;

  // DeprecatedCertFilePath is path to the cert file within sensor for secure connection between sensor and custom trigger gRPC server.
  // DEPRECATED: use CertSecret instead
  optional string certFilePath = 8;
}

// DataFilter describes constraints and filters for event data
// Regular Expressions are purposefully not a feature as they are overkill for our uses here
// See Rob Pike's Post: https://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html
message DataFilter {
  // Path is the JSONPath of the event's (JSON decoded) data key
  // Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'.
  // To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'.
  // See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
  optional string path = 1;

  // Type contains the JSON type of the data
  optional string type = 2;

  // Value is the allowed string values for this key
  // Booleans are passed using strconv.ParseBool()
  // Numbers are parsed using as float64 using strconv.ParseFloat()
  // Strings are taken as is
  // Nils this value is ignored
  repeated string value = 3;

  // Comparator compares the event data with a user given value.
  // Can be ">=", ">", "=", "!=", "<", or "<=".
  // Is optional, and if left blank treated as equality "=".
  optional string comparator = 4;
}

// DependencyGroup is the group of dependencies
message DependencyGroup {
  // Name of the group
  optional string name = 1;

  // Dependencies of events
  repeated string dependencies = 2;
}

// Event represents the cloudevent received from a gateway.
message Event {
  optional EventContext context = 1;

  optional bytes data = 2;
}

// EventContext holds the context of the cloudevent received from a gateway.
message EventContext {
  // ID of the event; must be non-empty and unique within the scope of the producer.
  optional string id = 1;

  // Source - A URI describing the event producer.
  optional string source = 2;

  // SpecVersion - The version of the CloudEvents specification used by the event.
  optional string specversion = 3;

  // Type - The type of the occurrence which has happened.
  optional string type = 4;

  // DataContentType - A MIME (RFC2046) string describing the media type of `data`.
  optional string datacontenttype = 5;

  // Subject - The subject of the event in the context of the event producer
  optional string subject = 6;

  // Time - A Timestamp when the event happened.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time time = 7;
}

// EventDependency describes a dependency
message EventDependency {
  // Name is a unique name of this dependency
  optional string name = 1;

  // EventSourceName is the name of EventSource that Sensor depends on
  optional string eventSourceName = 2;

  // EventName is the name of the event
  optional string eventName = 3;

  // Filters and rules governing toleration of success and constraints on the context and data of an event
  optional EventDependencyFilter filters = 4;
}

// EventDependencyFilter defines filters and constraints for a event.
message EventDependencyFilter {
  // Name is the name of event filter
  optional string name = 1;

  // Time filter on the event with escalation
  optional TimeFilter time = 2;

  // Context filter constraints
  optional EventContext context = 3;

  // Data filter constraints with escalation
  repeated DataFilter data = 4;
}

// FileArtifact contains information about an artifact in a filesystem
message FileArtifact {
  optional string path = 1;
}

// GitArtifact contains information about an artifact stored in git
message GitArtifact {
  // Git URL
  optional string url = 1;

  // Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers.
  // Hence we don't use any specific git provider client.
  optional string cloneDirectory = 2;

  // Creds contain reference to git username and password
  // +optional
  optional GitCreds creds = 3;

  // SSHKeySecret refers to the secret that contains SSH key
  optional k8s.io.api.core.v1.SecretKeySelector sshKeySecret = 4;

  // Path to file that contains trigger resource definition
  optional string filePath = 5;

  // Branch to use to pull trigger resource
  // +optional
  optional string branch = 6;

  // Tag to use to pull trigger resource
  // +optional
  optional string tag = 7;

  // Ref to use to pull trigger resource. Will result in a shallow clone and
  // fetch.
  // +optional
  optional string ref = 8;

  // Remote to manage set of tracked repositories. Defaults to "origin".
  // Refer https://git-scm.com/docs/git-remote
  // +optional
  optional GitRemoteConfig remote = 9;

  // DeprecatedSSHKeyPath is path to your ssh key path. Use this if you don't want to provide username and password.
  // ssh key path must be mounted in sensor pod.
  // DEPRECATED: use SSHKeySecret instead.
  // +optional
  optional string sshKeyPath = 10;
}

// GitCreds contain reference to git username and password
message GitCreds {
  optional k8s.io.api.core.v1.SecretKeySelector username = 1;

  optional k8s.io.api.core.v1.SecretKeySelector password = 2;
}

// GitRemoteConfig contains the configuration of a Git remote
message GitRemoteConfig {
  // Name of the remote to fetch from.
  optional string name = 1;

  // URLs the URLs of a remote repository. It must be non-empty. Fetch will
  // always use the first URL, while push will use all of them.
  repeated string urls = 2;
}

// HTTPTrigger is the trigger for the HTTP request
message HTTPTrigger {
  // URL refers to the URL to send HTTP request to.
  optional string url = 1;

  repeated TriggerParameter payload = 2;

  // TLS configuration for the HTTP client.
  // +optional
  optional github.com.argoproj.argo_events.pkg.apis.common.TLSConfig tls = 3;

  // Method refers to the type of the HTTP request.
  // Refer https://golang.org/src/net/http/method.go for more info.
  // Default value is POST.
  // +optional
  optional string method = 4;

  repeated TriggerParameter parameters = 5;

  // Timeout refers to the HTTP request timeout in seconds.
  // Default value is 60 seconds.
  // +optional
  optional int64 timeout = 6;

  // BasicAuth configuration for the http request.
  // +optional
  optional BasicAuth basicAuth = 7;

  // Headers for the HTTP request.
  // +optional
  map<string, string> headers = 8;
}

// K8SResourcePolicy refers to the policy used to check the state of K8s based triggers using labels
message K8SResourcePolicy {
  // Labels required to identify whether a resource is in success state
  map<string, string> labels = 1;

  // Backoff before checking resource state
  optional github.com.argoproj.argo_events.pkg.apis.common.Backoff backoff = 2;

  // ErrorOnBackoffTimeout determines whether sensor should transition to error state if the trigger policy is unable to determine
  // the state of the resource
  optional bool errorOnBackoffTimeout = 3;
}

// KafkaTrigger refers to the specification of the Kafka trigger.
message KafkaTrigger {
  // URL of the Kafka broker.
  optional string url = 1;

  // Name of the topic.
  // More info at https://kafka.apache.org/documentation/#intro_topics
  optional string topic = 2;

  // Partition to write data to.
  optional int32 partition = 3;

  repeated TriggerParameter parameters = 4;

  // RequiredAcks used in producer to tell the broker how many replica acknowledgements
  // Defaults to 1 (Only wait for the leader to ack).
  // +optional.
  optional int32 requiredAcks = 5;

  // Compress determines whether to compress message or not.
  // Defaults to false.
  // If set to true, compresses message using snappy compression.
  // +optional
  optional bool compress = 6;

  // FlushFrequency refers to the frequency in milliseconds to flush batches.
  // Defaults to 500 milliseconds.
  // +optional
  optional int32 flushFrequency = 7;

  // TLS configuration for the Kafka producer.
  // +optional
  optional github.com.argoproj.argo_events.pkg.apis.common.TLSConfig tls = 8;

  repeated TriggerParameter payload = 9;

  // The partitioning key for the messages put on the Kafka topic.
  // Defaults to broker url.
  // +optional.
  optional string partitioningKey = 10;
}

// Metadata holds the annotations and labels of an event source pod
message Metadata {
  map<string, string> annotations = 1;

  map<string, string> labels = 2;
}

// NATSTrigger refers to the specification of the NATS trigger.
message NATSTrigger {
  // URL of the NATS cluster.
  optional string url = 1;

  // Name of the subject to put message on.
  optional string subject = 2;

  repeated TriggerParameter payload = 3;

  repeated TriggerParameter parameters = 4;

  // TLS configuration for the NATS producer.
  // +optional
  optional github.com.argoproj.argo_events.pkg.apis.common.TLSConfig tls = 5;
}

// OpenWhiskTrigger refers to the specification of the OpenWhisk trigger.
message OpenWhiskTrigger {
  // Host URL of the OpenWhisk.
  optional string host = 1;

  // Version for the API.
  // Defaults to v1.
  // +optional
  optional string version = 2;

  // Namespace for the action.
  // Defaults to "_".
  // +optional.
  optional string namespace = 3;

  // AuthToken for authentication.
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector authToken = 4;

  // Name of the action/function.
  optional string actionName = 5;

  repeated TriggerParameter payload = 6;

  // +optional
  repeated TriggerParameter parameters = 7;
}

// Sensor is the definition of a sensor resource
// +genclient
// +genclient:noStatus
// +kubebuilder:resource:shortName=sn
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
message Sensor {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SensorSpec spec = 2;

  optional SensorStatus status = 3;
}

// SensorList is the list of Sensor resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message SensorList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Sensor items = 2;
}

// SensorSpec represents desired sensor state
message SensorSpec {
  // Dependencies is a list of the events that this sensor is dependent on.
  repeated EventDependency dependencies = 1;

  // Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.
  repeated Trigger triggers = 2;

  // Template is the pod specification for the sensor
  // +optional
  optional Template template = 3;

  // Circuit is a boolean expression of dependency groups
  optional string circuit = 4;

  // DependencyGroups is a list of the groups of events.
  repeated DependencyGroup dependencyGroups = 5;

  // ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger round fails.
  // Once sensor state is set to `error`, no further triggers will be processed.
  optional bool errorOnFailedRound = 6;

  // EventBusName references to a EventBus name. By default the value is "default"
  optional string eventBusName = 7;
}

// SensorStatus contains information about the status of a sensor.
message SensorStatus {
  optional github.com.argoproj.argo_events.pkg.apis.common.Status status = 1;
}

// SlackTrigger refers to the specification of the slack notification trigger.
message SlackTrigger {
  // +optional
  repeated TriggerParameter parameters = 1;

  // SlackToken refers to the Kubernetes secret that holds the slack token required to send messages.
  optional k8s.io.api.core.v1.SecretKeySelector slackToken = 2;

  // Channel refers to which Slack channel to send slack message.
  // +optional
  optional string channel = 3;

  // Message refers to the message to send to the Slack channel.
  // +optional
  optional string message = 4;
}

// StandardK8STrigger is the standard Kubernetes resource trigger
message StandardK8STrigger {
  // The unambiguous kind of this object - used in order to retrieve the appropriate kubernetes api client for this resource
  optional k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource groupVersionResource = 1;

  // Source of the K8 resource file(s)
  optional ArtifactLocation source = 2;

  // Operation refers to the type of operation performed on the k8s resource.
  // Default value is Create.
  // +optional
  optional string operation = 3;

  repeated TriggerParameter parameters = 4;

  // PatchStrategy controls the K8s object patching strategy when the trigger operation is specified as patch.
  // possible values:
  // "application/json-patch+json"
  // "application/merge-patch+json"
  // "application/strategic-merge-patch+json"
  // "application/apply-patch+yaml".
  // Defaults to "application/merge-patch+json"
  // +optional
  optional string patchStrategy = 5;

  // LiveObject specifies whether the resource should be directly fetched from K8s instead
  // of being marshaled from the resource artifact. If set to true, the resource artifact
  // must contain the information required to uniquely identify the resource in the cluster,
  // that is, you must specify "apiVersion", "kind" as well as "name" and "namespace" meta
  // data.
  // Only valid for operation type `update`
  // +optional
  optional bool liveObject = 6;
}

// StatusPolicy refers to the policy used to check the state of the trigger using response status
message StatusPolicy {
  repeated int32 allow = 1;
}

// Template holds the information of a sensor deployment template
message Template {
  // Metdata sets the pods's metadata, i.e. annotations and labels
  optional Metadata metadata = 1;

  // ServiceAccountName is the name of the ServiceAccount to use to run gateway pod.
  // More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  // +optional
  optional string serviceAccountName = 2;

  // Container is the main container image to run in the gateway pod
  // +optional
  optional k8s.io.api.core.v1.Container container = 3;

  // Volumes is a list of volumes that can be mounted by containers in a workflow.
  // +patchStrategy=merge
  // +patchMergeKey=name
  // +optional
  repeated k8s.io.api.core.v1.Volume volumes = 4;

  // SecurityContext holds pod-level security attributes and common container settings.
  // Optional: Defaults to empty.  See type description for default values of each field.
  // +optional
  optional k8s.io.api.core.v1.PodSecurityContext securityContext = 5;

  // NodeSelector is a selector which must be true for the pod to fit on a node.
  // Selector which must match a node's labels for the pod to be scheduled on that node.
  // More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  // +optional
  map<string, string> nodeSelector = 6;

  // If specified, the pod's tolerations.
  // +optional
  repeated k8s.io.api.core.v1.Toleration tolerations = 7;
}

// TimeFilter describes a window in time.
// It filters out events that occur outside the time limits.
// In other words, only events that occur after Start and before Stop
// will pass this filter.
message TimeFilter {
  // Start is the beginning of a time window in UTC.
  // Before this time, events for this dependency are ignored.
  // Format is hh:mm:ss.
  optional string start = 1;

  // Stop is the end of a time window in UTC.
  // After or equal to this time, events for this dependency are ignored and
  // Format is hh:mm:ss.
  // If it is smaller than Start, it is treated as next day of Start
  // (e.g.: 22:00:00-01:00:00 means 22:00:00-25:00:00).
  optional string stop = 2;
}

// Trigger is an action taken, output produced, an event created, a message sent
message Trigger {
  // Template describes the trigger specification.
  optional TriggerTemplate template = 1;

  // Parameters is the list of parameters applied to the trigger template definition
  repeated TriggerParameter parameters = 2;

  // Policy to configure backoff and execution criteria for the trigger
  optional TriggerPolicy policy = 3;
}

// TriggerParameter indicates a passed parameter to a service template
message TriggerParameter {
  // Src contains a source reference to the value of the parameter from a dependency
  optional TriggerParameterSource src = 1;

  // Dest is the JSONPath of a resource key.
  // A path is a series of keys separated by a dot. The colon character can be escaped with '.'
  // The -1 key can be used to append a value to an existing array.
  // See https://github.com/tidwall/sjson#path-syntax for more information about how this is used.
  optional string dest = 2;

  // Operation is what to do with the existing value at Dest, whether to
  // 'prepend', 'overwrite', or 'append' it.
  optional string operation = 3;
}

// TriggerParameterSource defines the source for a parameter from a event event
message TriggerParameterSource {
  // DependencyName refers to the name of the dependency. The event which is stored for this dependency is used as payload
  // for the parameterization. Make sure to refer to one of the dependencies you have defined under Dependencies list.
  optional string dependencyName = 1;

  // ContextKey is the JSONPath of the event's (JSON decoded) context key
  // ContextKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'.
  // To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'.
  // See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
  optional string contextKey = 2;

  // ContextTemplate is a go-template for extracting a string from the event's context.
  // If a ContextTemplate is provided with a ContextKey, the template will be evaluated first and fallback to the ContextKey.
  // The templating follows the standard go-template syntax as well as sprig's extra functions.
  // See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/
  optional string contextTemplate = 3;

  // DataKey is the JSONPath of the event's (JSON decoded) data key
  // DataKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'.
  // To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'.
  // See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
  optional string dataKey = 4;

  // DataTemplate is a go-template for extracting a string from the event's data.
  // If a DataTemplate is provided with a DataKey, the template will be evaluated first and fallback to the DataKey.
  // The templating follows the standard go-template syntax as well as sprig's extra functions.
  // See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/
  optional string dataTemplate = 5;

  // Value is the default literal value to use for this parameter source
  // This is only used if the DataKey is invalid.
  // If the DataKey is invalid and this is not defined, this param source will produce an error.
  optional string value = 6;
}

// TriggerPolicy dictates the policy for the trigger retries
message TriggerPolicy {
  // K8SResourcePolicy refers to the policy used to check the state of K8s based triggers using using labels
  optional K8SResourcePolicy k8s = 1;

  // Status refers to the policy used to check the state of the trigger using response status
  optional StatusPolicy status = 2;
}

// TriggerSwitch describes condition which must be satisfied in order to execute a trigger.
// Depending upon condition type, status of dependency groups is used to evaluate the result.
message TriggerSwitch {
  // Any acts as a OR operator between dependencies
  repeated string any = 1;

  // All acts as a AND operator between dependencies
  repeated string all = 2;
}

// TriggerTemplate is the template that describes trigger specification.
message TriggerTemplate {
  // Name is a unique name of the action to take.
  optional string name = 1;

  // Switch is the condition to execute the trigger.
  // +optional
  optional TriggerSwitch switch = 2;

  // StandardK8STrigger refers to the trigger designed to create or update a generic Kubernetes resource.
  // +optional
  optional StandardK8STrigger k8s = 3;

  // ArgoWorkflow refers to the trigger that can perform various operations on an Argo workflow.
  // +optional
  optional ArgoWorkflowTrigger argoWorkflow = 4;

  // HTTP refers to the trigger designed to dispatch a HTTP request with on-the-fly constructable payload.
  // +optional
  optional HTTPTrigger http = 5;

  // AWSLambda refers to the trigger designed to invoke AWS Lambda function with with on-the-fly constructable payload.
  // +optional
  optional AWSLambdaTrigger awsLambda = 6;

  // CustomTrigger refers to the trigger designed to connect to a gRPC trigger server and execute a custom trigger.
  // +optional
  optional CustomTrigger custom = 7;

  // Kafka refers to the trigger designed to place messages on Kafka topic.
  // +optional.
  optional KafkaTrigger kafka = 8;

  // NATS refers to the trigger designed to place message on NATS subject.
  // +optional.
  optional NATSTrigger nats = 9;

  // Slack refers to the trigger designed to send slack notification message.
  // +optional
  optional SlackTrigger slack = 10;

  // OpenWhisk refers to the trigger designed to invoke OpenWhisk action.
  // +optional
  optional OpenWhiskTrigger openWhisk = 11;
}

// URLArtifact contains information about an artifact at an http endpoint.
message URLArtifact {
  // Path is the complete URL
  optional string path = 1;

  // VerifyCert decides whether the connection is secure or not
  optional bool verifyCert = 2;
}

