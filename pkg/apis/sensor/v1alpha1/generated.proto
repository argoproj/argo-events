/*
Copyright 2018 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.argoproj.argo_events.pkg.apis.sensor.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// ArtifactLocation describes the source location for an external artifact
message ArtifactLocation {
  optional S3Artifact s3 = 1;

  optional string inline = 2;

  optional FileArtifact file = 3;

  optional URLArtifact url = 4;

  optional ConfigmapArtifact configmap = 5;
}

// ConfigmapArtifact contains information about artifact in k8 configmap
message ConfigmapArtifact {
  // Name of the configmap
  optional string name = 1;

  // Namespace where configmap is deployed
  optional string namespace = 2;

  // Key within configmap data which contains trigger resource definition
  optional string key = 3;
}

message Data {
  // filter constraints
  repeated DataFilter filters = 1;

  // EscalationPolicy is the escalation to trigger in case the signal filter fails
  optional EscalationPolicy escalationPolicy = 2;
}

// DataFilter describes constraints and filters for event data
// Regular Expressions are purposefully not a feature as they are overkill for our uses here
// See Rob Pike's Post: https://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html
message DataFilter {
  // Path is the JSONPath of the event's (JSON decoded) data key
  // Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'.
  // To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'.
  // See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
  optional string path = 1;

  // Type contains the JSON type of the data
  optional string type = 2;

  // Value is the expected string value for this key
  // Booleans are pased using strconv.ParseBool()
  // Numbers are parsed using as float64 using strconv.ParseFloat()
  // Strings are taken as is
  // Nils this value is ignored
  optional string value = 3;

  // EscalationPolicy is the escalation to trigger in case the signal filter fails
  optional EscalationPolicy escalationPolicy = 4;
}

// EscalationPolicy describes the policy for escalating sensors in an Error state.
// An escalation policy is associated with signal filter. Whenever a signal filter fails
// escalation will be triggered
message EscalationPolicy {
  // Name is name of the escalation policy
  // This is referred by signal filter/s
  optional string name = 1;

  // Level is the degree of importance
  optional string level = 2;

  // need someway to progressively get more serious notifications
  optional string message = 3;
}

// Event is a data record expressing an occurrence and its context.
// Adheres to the CloudEvents v0.1 specification
message Event {
  optional EventContext context = 1;

  optional bytes data = 2;
}

// EventContext contains metadata that provides circumstantial information about the occurrence.
message EventContext {
  // The type of occurrence which has happened. Often this attribute is used for
  // routing, observability, policy enforcement, etc.
  // should be prefixed with a reverse-DNS name. The prefixed domain dictates
  // the organization which defines the semantics of this event type. ex: com.github.pull.create
  optional string eventType = 1;

  // The version of the eventType. Enables the interpretation of data by eventual consumers,
  // requires the consumer to be knowledgeable about the producer.
  optional string eventTypeVersion = 2;

  // The version of the CloudEvents specification which the event uses.
  // Enables the interpretation of the context.
  optional string cloudEventsVersion = 3;

  // This describes the event producer.
  optional URI source = 4;

  // ID of the event. The semantics are explicitly undefined to ease the implementation of producers.
  // Enables deduplication. Must be unique within scope of producer.
  optional string eventID = 5;

  // Timestamp of when the event happened. Must adhere to format specified in RFC 3339.
  // +k8s:openapi-gen=false
  optional k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime eventTime = 6;

  // A link to the schema that the data attribute adheres to.
  // Must adhere to the format specified in RFC 3986.
  optional URI schemaURL = 7;

  // Content type of the data attribute value. Enables the data attribute to carry any type of content,
  // whereby format and encoding might differ from that of the chosen event format.
  // For example, the data attribute may carry an XML or JSON payload and the consumer is informed
  // by this attribute being set to "application/xml" or "application/json" respectively.
  optional string contentType = 8;

  // This is for additional metadata and does not have a mandated structure.
  // Enables a place for custom fields a producer or middleware might want to include and provides a place
  // to test metadata before adding them to the CloudEvents specification.
  map<string, string> extensions = 9;

  // EscalationPolicy is the name of escalation policy to trigger in case the signal filter fails
  optional EscalationPolicy escalationPolicy = 10;
}

// EventWrapper wraps an event with an additional flag to check if we processed this event already
message EventWrapper {
  optional Event event = 1;

  optional bool seen = 2;
}

// FileArtifact contains information about an artifact in a filesystem
message FileArtifact {
  optional string path = 1;
}

// GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion
// to avoid automatic coercion.  It doesn't use a GroupVersion to avoid custom marshalling.
message GroupVersionKind {
  optional string group = 1;

  optional string version = 2;

  optional string kind = 3;
}

// NodeStatus describes the status for an individual node in the sensor's FSM.
// A single node can represent the status for signal or a trigger.
message NodeStatus {
  // ID is a unique identifier of a node within a sensor
  // It is a hash of the node name
  optional string id = 1;

  // Name is a unique name in the node tree used to generate the node ID
  optional string name = 2;

  // DisplayName is the human readable representation of the node
  optional string displayName = 3;

  // Type is the type of the node
  optional string type = 4;

  // Phase of the node
  optional string phase = 5;

  // StartedAt is the time at which this node started
  // +k8s:openapi-gen=false
  optional k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime startedAt = 6;

  // CompletedAt is the time at which this node completed
  // +k8s:openapi-gen=false
  optional k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime completedAt = 7;

  // store data or something to save for signal notifications or trigger events
  optional string message = 8;

  // LatestEvent stores the last seen event for this node
  optional EventWrapper latestEvent = 9;
}

// ResourceObject is the resource object to create on kubernetes
message ResourceObject {
  // The unambiguous kind of this object - used in order to retrieve the appropriate kubernetes api client for this resource
  optional GroupVersionKind groupVersionKind = 5;

  // Namespace in which to create this object
  // optional
  // defaults to the service account namespace
  optional string namespace = 1;

  // Source of the K8 resource file(s)
  optional ArtifactLocation source = 6;

  // Map of string keys and values that can be used to organize and categorize
  // (scope and select) objects. This overrides any labels in the unstructured object with the same key.
  map<string, string> labels = 3;

  // Parameters is the list of resource parameters to pass in the object
  repeated ResourceParameter parameters = 4;
}

// ResourceParameter indicates a passed parameter to a service template
message ResourceParameter {
  // Src contains a source reference to the value of the resource parameter from a signal event
  optional ResourceParameterSource src = 1;

  // Dest is the JSONPath of a resource key.
  // A path is a series of keys separated by a dot. The colon character can be escaped with '.'
  // The -1 key can be used to append a value to an existing array.
  // See https://github.com/tidwall/sjson#path-syntax for more information about how this is used.
  optional string dest = 2;
}

// ResourceParameterSource defines the source for a resource parameter from a signal event
message ResourceParameterSource {
  // Signal is the name of the signal for which to retrieve this event
  optional string signal = 1;

  // Path is the JSONPath of the event's (JSON decoded) data key
  // Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'.
  // To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'.
  // See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
  optional string path = 2;

  // Value is the default literal value to use for this parameter source
  // This is only used if the path is invalid.
  // If the path is invalid and this is not defined, this param source will produce an error.
  optional string value = 3;
}

// RetryStrategy represents a strategy for retrying operations
// TODO: implement me
message RetryStrategy {
}

// S3Artifact contains information about an artifact in S3
message S3Artifact {
  optional S3Bucket s3Bucket = 4;

  optional string key = 1;

  optional string event = 2;

  optional S3Filter filter = 3;
}

// S3Bucket contains information for an S3 Bucket
message S3Bucket {
  optional string endpoint = 1;

  optional string bucket = 2;

  optional string region = 3;

  optional bool insecure = 4;

  // +k8s:openapi-gen=false
  optional k8s.io.api.core.v1.SecretKeySelector accessKey = 5;

  // +k8s:openapi-gen=false
  optional k8s.io.api.core.v1.SecretKeySelector secretKey = 6;
}

// S3Filter represents filters to apply to bucket nofifications for specifying constraints on objects
message S3Filter {
  optional string prefix = 1;

  optional string suffix = 2;
}

// Sensor is the definition of a sensor resource
// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
message Sensor {
  // +k8s:openapi-gen=false
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SensorSpec spec = 2;

  optional SensorStatus status = 3;
}

// SensorList is the list of Sensor resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message SensorList {
  // +k8s:openapi-gen=false
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Sensor items = 2;
}

// SensorSpec represents desired sensor state
message SensorSpec {
  // Signals is a list of the things that this sensor is dependent on. These are the inputs to this sensor.
  repeated Signal signals = 1;

  // Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.
  repeated Trigger triggers = 2;

  // Repeat is a flag that determines if the sensor status should be reset after completion.
  optional bool repeat = 4;

  // DeploySpec contains sensor pod specification. For more information, read https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#pod-v1-core
  optional k8s.io.api.core.v1.PodSpec deploySpec = 5;
}

// SensorStatus contains information about the status of a sensor.
message SensorStatus {
  // Phase is the high-level summary of the sensor
  optional string phase = 1;

  // StartedAt is the time at which this sensor was initiated
  // +k8s:openapi-gen=false
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startedAt = 2;

  // CompletedAt is the time at which this sensor was completed
  // +k8s:openapi-gen=false
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completedAt = 3;

  // CompletionCount is the count of sensor's successful runs.
  optional int32 completionCount = 6;

  // Message is a human readable string indicating details about a sensor in its phase
  optional string message = 4;

  // Nodes is a mapping between a node ID and the node's status
  // it records the states for the FSM of this sensor.
  map<string, NodeStatus> nodes = 5;
}

// Signal describes a dependency
message Signal {
  // Name is a unique name of this dependency
  optional string name = 1;

  // Deadline is the duration in seconds after the StartedAt time of the sensor after which this signal is terminated.
  // Note: this functionality is not yet respected, but it's theoretical behavior is as follows:
  // This trumps the recurrence patterns of calendar signals and allows any signal to have a strict defined life.
  // After the deadline is reached and this signal has not in a Resolved state, this signal is marked as Failed
  // and proper escalations should proceed.
  optional int64 deadline = 2;

  // Filters and rules governing tolerations of success and constraints on the context and data of an event
  optional SignalFilter filters = 3;
}

// SignalFilter defines filters and constraints for a signal.
message SignalFilter {
  // Name is the name of signal filter
  optional string name = 1;

  // Time filter on the signal with escalation
  optional TimeFilter time = 2;

  // Context filter constraints with escalation
  optional EventContext context = 3;

  // Data filter constraints with escalation
  optional Data data = 4;
}

// TimeFilter describes a window in time.
// Filters out signal events that occur outside the time limits.
// In other words, only events that occur after Start and before Stop
// will pass this filter.
message TimeFilter {
  // Start is the beginning of a time window.
  // Before this time, events for this signal are ignored and
  // format is hh:mm:ss
  optional string start = 1;

  // StopPattern is the end of a time window.
  // After this time, events for this signal are ignored and
  // format is hh:mm:ss
  optional string stop = 2;

  // EscalationPolicy is the escalation to trigger in case the signal filter fails
  optional EscalationPolicy escalationPolicy = 3;
}

// Trigger is an action taken, output produced, an event created, a message sent
message Trigger {
  // Name is a unique name of the action to take
  optional string name = 1;

  // Resource describes the resource that will be created by this action
  optional ResourceObject resource = 2;

  // Message describes a message that will be sent on a queue
  optional string message = 3;

  // RetryStrategy is the strategy to retry a trigger if it fails
  optional RetryStrategy replyStrategy = 4;
}

// URI is a Uniform Resource Identifier based on RFC 3986
message URI {
  optional string scheme = 1;

  optional string user = 2;

  optional string password = 3;

  optional string host = 4;

  optional int32 port = 5;

  optional string path = 6;

  optional string query = 7;

  optional string fragment = 8;
}

// URLArtifact contains information about an artifact at an http endpoint.
message URLArtifact {
  optional string path = 1;

  optional bool verifyCert = 2;
}

