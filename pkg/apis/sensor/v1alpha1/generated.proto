/*
Copyright 2018 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.argoproj.argo_events.pkg.apis.sensor.v1alpha1;

import "github.com/argoproj/argo-events/pkg/apis/common/generated.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option (gogoproto.marshaler_all) = true;
option (gogoproto.stable_marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_getters_all) = false;
option go_package = "v1alpha1";

// ArtifactLocation describes the source location for an external artifact
message ArtifactLocation {
  // S3 compliant artifact
  optional github.com.argoproj.argo_events.pkg.apis.common.S3Artifact s3 = 1 [(gogoproto.customname) = "S3"];

  // Inline artifact is embedded in sensor spec as a string
  optional string inline = 2 [(gogoproto.customname) = "Inline"];

  // File artifact is artifact stored in a file
  optional FileArtifact file = 3 [(gogoproto.customname) = "File"];

  // URL to fetch the artifact from
  optional URLArtifact url = 4 [(gogoproto.customname) = "URL"];

  // Configmap that stores the artifact
  optional ConfigmapArtifact configmap = 5 [(gogoproto.customname) = "Configmap"];

  // Git repository hosting the artifact
  optional GitArtifact git = 6 [(gogoproto.customname) = "Git"];
}

// Backoff for an operation
message Backoff {
  // Duration is the duration in nanoseconds
  optional int64 duration = 1 [(gogoproto.casttype) = "time.Duration", (gogoproto.customname) = "Duration", (gogoproto.nullable) = false];

  // Duration is multiplied by factor each iteration
  optional double factor = 2 [(gogoproto.customname) = "Factor", (gogoproto.nullable) = false];

  // The amount of jitter applied each iteration
  optional double jitter = 3 [(gogoproto.customname) = "Jitter", (gogoproto.nullable) = false];

  // Exit with error after this many steps
  optional int64 steps = 4 [(gogoproto.customname) = "Steps", (gogoproto.nullable) = false];
}

// ConfigmapArtifact contains information about artifact in k8 configmap
message ConfigmapArtifact {
  // Name of the configmap
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // Namespace where configmap is deployed
  optional string namespace = 2 [(gogoproto.customname) = "Namespace", (gogoproto.nullable) = false];

  // Key within configmap data which contains trigger resource definition
  optional string key = 3 [(gogoproto.customname) = "Key", (gogoproto.nullable) = false];
}

// DataFilter describes constraints and filters for event data
// Regular Expressions are purposefully not a feature as they are overkill for our uses here
// See Rob Pike's Post: https://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html
message DataFilter {
  // Path is the JSONPath of the event's (JSON decoded) data key
  // Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'.
  // To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'.
  // See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
  optional string path = 1 [(gogoproto.customname) = "Path", (gogoproto.nullable) = false];

  // Type contains the JSON type of the data
  optional string type = 2 [(gogoproto.casttype) = "JSONType", (gogoproto.customname) = "Type", (gogoproto.nullable) = false];

  // Value is the allowed string values for this key
  // Booleans are passed using strconv.ParseBool()
  // Numbers are parsed using as float64 using strconv.ParseFloat()
  // Strings are taken as is
  // Nils this value is ignored
  repeated string value = 3 [(gogoproto.customname) = "Value"];
}

// DependencyGroup is the group of dependencies
message DependencyGroup {
  // Name of the group
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // Dependencies of events
  repeated string dependencies = 2 [(gogoproto.customname) = "Dependencies"];
}

// EventDependency describes a dependency
message EventDependency {
  // Name is a unique name of this dependency
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // Filters and rules governing tolerations of success and constraints on the context and data of an event
  optional EventDependencyFilter filters = 2 [(gogoproto.customname) = "Filters", (gogoproto.nullable) = false];

  // Connected tells if subscription is already setup in case of nats protocol.
  optional bool connected = 3 [(gogoproto.customname) = "Connected", (gogoproto.nullable) = false];
}

// EventDependencyFilter defines filters and constraints for a event.
message EventDependencyFilter {
  // Name is the name of event filter
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // Time filter on the event with escalation
  optional TimeFilter time = 2 [(gogoproto.customname) = "Time"];

  // Context filter constraints with escalation
  optional github.com.argoproj.argo_events.pkg.apis.common.EventContext context = 3 [(gogoproto.customname) = "Context"];

  // Data filter constraints with escalation
  repeated DataFilter data = 4 [(gogoproto.customname) = "Data", (gogoproto.nullable) = false];
}

// FileArtifact contains information about an artifact in a filesystem
message FileArtifact {
  optional string path = 1 [(gogoproto.customname) = "Path", (gogoproto.nullable) = false];
}

// GitArtifact contains information about an artifact stored in git
message GitArtifact {
  // Git URL
  optional string url = 1 [(gogoproto.customname) = "URL", (gogoproto.nullable) = false];

  // Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers.
  // Hence we don't use any specific git provider client.
  optional string cloneDirectory = 2 [(gogoproto.customname) = "CloneDirectory", (gogoproto.nullable) = false];

  // Creds contain reference to git username and password
  // +optional
  optional GitCreds creds = 3 [(gogoproto.customname) = "Creds"];

  // Namespace where creds are stored.
  // +optional
  optional string namespace = 4 [(gogoproto.customname) = "Namespace", (gogoproto.nullable) = false];

  // SSHKeyPath is path to your ssh key path. Use this if you don't want to provide username and password.
  // ssh key path must be mounted in sensor pod.
  // +optional
  optional string sshKeyPath = 5 [(gogoproto.customname) = "SSHKeyPath", (gogoproto.nullable) = false];

  // Path to file that contains trigger resource definition
  optional string filePath = 6 [(gogoproto.customname) = "FilePath", (gogoproto.nullable) = false];

  // Branch to use to pull trigger resource
  // +optional
  optional string branch = 7 [(gogoproto.customname) = "Branch", (gogoproto.nullable) = false];

  // Tag to use to pull trigger resource
  // +optional
  optional string tag = 8 [(gogoproto.customname) = "Tag", (gogoproto.nullable) = false];

  // Remote to manage set of tracked repositories. Defaults to "origin".
  // Refer https://git-scm.com/docs/git-remote
  // +optional
  optional GitRemoteConfig remote = 9 [(gogoproto.customname) = "Remote"];
}

// GitCreds contain reference to git username and password
message GitCreds {
  optional k8s.io.api.core.v1.SecretKeySelector username = 1 [(gogoproto.customname) = "Username"];

  optional k8s.io.api.core.v1.SecretKeySelector password = 2 [(gogoproto.customname) = "Password"];
}

// GitRemoteConfig contains the configuration of a Git remote
message GitRemoteConfig {
  // Name of the remote to fetch from.
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // URLs the URLs of a remote repository. It must be non-empty. Fetch will
  // always use the first URL, while push will use all of them.
  repeated string urls = 2 [(gogoproto.customname) = "URLS"];
}

// NodeStatus describes the status for an individual node in the sensor's FSM.
// A single node can represent the status for event or a trigger.
message NodeStatus {
  // ID is a unique identifier of a node within a sensor
  // It is a hash of the node name
  optional string id = 1 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];

  // Name is a unique name in the node tree used to generate the node ID
  optional string name = 2 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // DisplayName is the human readable representation of the node
  optional string displayName = 3 [(gogoproto.customname) = "DisplayName", (gogoproto.nullable) = false];

  // Type is the type of the node
  optional string type = 4 [(gogoproto.casttype) = "NodeType", (gogoproto.customname) = "Type", (gogoproto.nullable) = false];

  // Phase of the node
  optional string phase = 5 [(gogoproto.casttype) = "NodePhase", (gogoproto.customname) = "Phase", (gogoproto.nullable) = false];

  // StartedAt is the time at which this node started
  optional k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime startedAt = 6 [(gogoproto.customname) = "StartedAt", (gogoproto.nullable) = false];

  // CompletedAt is the time at which this node completed
  optional k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime completedAt = 7 [(gogoproto.customname) = "CompletedAt", (gogoproto.nullable) = false];

  // store data or something to save for event notifications or trigger events
  optional string message = 8 [(gogoproto.customname) = "Message", (gogoproto.nullable) = false];

  // Event stores the last seen event for this node
  optional github.com.argoproj.argo_events.pkg.apis.common.Event event = 9 [(gogoproto.customname) = "Event"];
}

// Sensor is the definition of a sensor resource
// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
message Sensor {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional SensorSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  optional SensorStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// SensorList is the list of Sensor resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message SensorList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated Sensor items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// SensorSpec represents desired sensor state
message SensorSpec {
  // Dependencies is a list of the events that this sensor is dependent on.
  repeated EventDependency dependencies = 1 [(gogoproto.customname) = "Dependencies", (gogoproto.nullable) = false];

  // Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.
  repeated Trigger triggers = 2 [(gogoproto.customname) = "Triggers", (gogoproto.nullable) = false];

  // Template contains sensor pod specification. For more information, read https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#pod-v1-core
  optional k8s.io.api.core.v1.PodTemplateSpec template = 3 [(gogoproto.customname) = "Template"];

  // EventProtocol is the protocol through which sensor receives events from gateway
  optional github.com.argoproj.argo_events.pkg.apis.common.EventProtocol eventProtocol = 4 [(gogoproto.customname) = "EventProtocol"];

  // Circuit is a boolean expression of dependency groups
  optional string circuit = 5 [(gogoproto.customname) = "Circuit", (gogoproto.nullable) = false];

  // DependencyGroups is a list of the groups of events.
  repeated DependencyGroup dependencyGroups = 6 [(gogoproto.customname) = "DependencyGroups", (gogoproto.nullable) = false];

  // ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger round fails.
  // Once sensor state is set to `error`, no further triggers will be processed.
  optional bool errorOnFailedRound = 7 [(gogoproto.customname) = "ErrorOnFailedRound", (gogoproto.nullable) = false];
}

// SensorStatus contains information about the status of a sensor.
message SensorStatus {
  // Phase is the high-level summary of the sensor
  optional string phase = 1 [(gogoproto.casttype) = "NodePhase", (gogoproto.customname) = "Phase", (gogoproto.nullable) = false];

  // StartedAt is the time at which this sensor was initiated
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startedAt = 2 [(gogoproto.customname) = "StartedAt", (gogoproto.nullable) = false];

  // CompletedAt is the time at which this sensor was completed
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completedAt = 3 [(gogoproto.customname) = "CompletedAt", (gogoproto.nullable) = false];

  // Message is a human readable string indicating details about a sensor in its phase
  optional string message = 4 [(gogoproto.customname) = "Message", (gogoproto.nullable) = false];

  // Nodes is a mapping between a node ID and the node's status
  // it records the states for the FSM of this sensor.
  map<string, NodeStatus> nodes = 5 [(gogoproto.customname) = "Nodes", (gogoproto.nullable) = false];

  // TriggerCycleCount is the count of sensor's trigger cycle runs.
  optional int32 triggerCycleCount = 6 [(gogoproto.customname) = "TriggerCycleCount", (gogoproto.nullable) = false];

  // TriggerCycleState is the status from last cycle of triggers execution.
  optional string triggerCycleStatus = 7 [(gogoproto.casttype) = "TriggerCycleState", (gogoproto.customname) = "TriggerCycleStatus", (gogoproto.nullable) = false];

  // LastCycleTime is the time when last trigger cycle completed
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastCycleTime = 8 [(gogoproto.customname) = "LastCycleTime", (gogoproto.nullable) = false];
}

// TimeFilter describes a window in time.
// DataFilters out event events that occur outside the time limits.
// In other words, only events that occur after Start and before Stop
// will pass this filter.
message TimeFilter {
  // Start is the beginning of a time window.
  // Before this time, events for this event are ignored and
  // format is hh:mm:ss
  optional string start = 1 [(gogoproto.customname) = "Start", (gogoproto.nullable) = false];

  // StopPattern is the end of a time window.
  // After this time, events for this event are ignored and
  // format is hh:mm:ss
  optional string stop = 2 [(gogoproto.customname) = "Stop", (gogoproto.nullable) = false];
}

// Trigger is an action taken, output produced, an event created, a message sent
message Trigger {
  // Template describes the trigger specification.
  optional TriggerTemplate template = 1 [(gogoproto.customname) = "Template"];

  // TemplateParameters is the list of resource parameters to pass to the template object
  repeated TriggerParameter templateParameters = 2 [(gogoproto.customname) = "TemplateParameters", (gogoproto.nullable) = false];

  // ResourceParameters is the list of resource parameters to pass to resolved resource object in template object
  repeated TriggerParameter resourceParameters = 3 [(gogoproto.customname) = "ResourceParameters", (gogoproto.nullable) = false];

  // Policy to configure backoff and execution criteria for the trigger
  optional TriggerPolicy policy = 4 [(gogoproto.customname) = "Policy"];
}

// TriggerCondition describes condition which must be satisfied in order to execute a trigger.
// Depending upon condition type, status of dependency groups is used to evaluate the result.
message TriggerCondition {
  // Any acts as a OR operator between dependencies
  repeated string any = 1 [(gogoproto.customname) = "Any"];

  // All acts as a AND operator between dependencies
  repeated string all = 2 [(gogoproto.customname) = "All"];
}

// TriggerParameter indicates a passed parameter to a service template
message TriggerParameter {
  // Src contains a source reference to the value of the parameter from a event event
  optional TriggerParameterSource src = 1 [(gogoproto.customname) = "Src"];

  // Dest is the JSONPath of a resource key.
  // A path is a series of keys separated by a dot. The colon character can be escaped with '.'
  // The -1 key can be used to append a value to an existing array.
  // See https://github.com/tidwall/sjson#path-syntax for more information about how this is used.
  optional string dest = 2 [(gogoproto.customname) = "Dest", (gogoproto.nullable) = false];
}

// TriggerParameterSource defines the source for a parameter from a event event
message TriggerParameterSource {
  // Event is the name of the event for which to retrieve this event
  optional string event = 1 [(gogoproto.customname) = "Event", (gogoproto.nullable) = false];

  // Path is the JSONPath of the event's (JSON decoded) data key
  // Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'.
  // To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'.
  // See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
  optional string path = 2 [(gogoproto.customname) = "Path", (gogoproto.nullable) = false];

  // Value is the default literal value to use for this parameter source
  // This is only used if the path is invalid.
  // If the path is invalid and this is not defined, this param source will produce an error.
  optional string value = 3 [(gogoproto.customname) = "Value"];
}

// TriggerPolicy dictates the policy for the trigger retries
message TriggerPolicy {
  // Backoff before checking resource state
  optional Backoff backoff = 1 [(gogoproto.customname) = "Backoff", (gogoproto.nullable) = false];

  // State refers to labels used to check the resource state
  optional TriggerStateLabels state = 2 [(gogoproto.customname) = "State"];

  // ErrorOnBackoffTimeout determines whether sensor should transition to error state if the backoff times out and yet the resource neither transitioned into success or failure.
  optional bool errorOnBackoffTimeout = 3 [(gogoproto.customname) = "ErrorOnBackoffTimeout", (gogoproto.nullable) = false];
}

// TriggerStateLabels defines the labels used to decide if a resource is in success or failure state.
message TriggerStateLabels {
  // Success defines labels required to identify a resource in success state
  map<string, string> success = 1 [(gogoproto.customname) = "Success", (gogoproto.nullable) = false];

  // Failure defines labels required to identify a resource in failed state
  map<string, string> failure = 2 [(gogoproto.customname) = "Failure", (gogoproto.nullable) = false];
}

// TriggerTemplate is the template that describes trigger specification.
message TriggerTemplate {
  // Name is a unique name of the action to take
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // When is the condition to execute the trigger
  optional TriggerCondition when = 2 [(gogoproto.customname) = "When"];

  // The unambiguous kind of this object - used in order to retrieve the appropriate kubernetes api client for this resource
  optional k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind groupVersionKind = 3 [(gogoproto.customname) = "GroupVersionKind"];

  // Source of the K8 resource file(s)
  optional ArtifactLocation source = 4 [(gogoproto.customname) = "Source"];
}

// URLArtifact contains information about an artifact at an http endpoint.
message URLArtifact {
  // Path is the complete URL
  optional string path = 1 [(gogoproto.customname) = "Path", (gogoproto.nullable) = false];

  // VerifyCert decides whether the connection is secure or not
  optional bool verifyCert = 2 [(gogoproto.customname) = "VerifyCert", (gogoproto.nullable) = false];
}

