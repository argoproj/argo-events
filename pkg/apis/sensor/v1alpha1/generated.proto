/*
Copyright 2018 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.argoproj.argo_events.pkg.apis.sensor.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// ArtifactLocation describes the location for an external artifact
message ArtifactLocation {
  optional S3Artifact s3 = 1;
}

// ArtifactSignal describes an external object dependency
message ArtifactSignal {
  optional ArtifactLocation artifactLocation = 2;

  // NotificationStream is the stream to listen for artifact notifications
  optional Stream stream = 1;
}

// CalendarSignal describes a time based dependency. One of the fields (schedule, interval, or recurrence) must be passed.
// Schedule takes precedence over interval; interval takes precedence over recurrence
message CalendarSignal {
  // Schedule is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron
  optional string schedule = 1;

  // Interval is a string that describes an interval duration, e.g. 1s, 30m, 2h...
  optional string interval = 2;

  // List of RRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545.
  // RRULE is a recurrence rule which defines a repeating pattern for recurring events.
  // RDATE defines the list of DATE-TIME values for recurring events.
  // EXDATE defines the list of DATE-TIME exceptions for recurring events.
  // the combination of these rules and dates combine to form a set of date times.
  // NOTE: functionality currently only supports EXDATEs, but in the future could be expanded.
  repeated string recurrence = 3;
}

// EscalationPolicy describes the policy for escalating sensors in an Error state.
// NOTE: this functionality is currently experimental, but we believe serves as an
// important future enhancement around handling lifecycle error conditions of a sensor.
message EscalationPolicy {
  // Level is the degree of importance
  optional string level = 1;

  // need someway to progressively get more serious notifications
  optional Message message = 2;
}

// Event is a data record expressing an occurrence and its context.
// Adheres to the CloudEvents v0.1 specification
message Event {
  optional EventContext context = 1;

  optional bytes data = 2;
}

// EventContext contains metadata that provides circumstantial information about the occurence.
message EventContext {
  // The type of occurrence which has happened. Often this attribute is used for
  // routing, observability, policy enforcement, etc.
  // should be prefixed with a reverse-DNS name. The prefixed domain dictates
  // the organization which defines the semantics of this event type. ex: com.github.pull.create
  optional string eventType = 1;

  // The version of the eventType. Enables the interpretation of data by eventual consumers,
  // requires the consumer to be knowledgeable about the producer.
  optional string eventTypeVersion = 2;

  // The version of the CloudEvents specification which the event uses.
  // Enables the intepretation of the context.
  optional string cloudEventsVersion = 3;

  // This describes the event producer.
  optional URI source = 4;

  // ID of the event. The semantics are explicitly undefined to ease the implementation of producers.
  // Enables deduplication. Must be unique within scope of producer.
  optional string eventID = 5;

  // Timestamp of when the event happened. Must adhere to format specified in RFC 3339.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time eventTime = 6;

  // A link to the schema that the data attribute adheres to.
  // Must adhere to the format specified in RFC 3986.
  optional URI schemaURL = 7;

  // Content type of the data attribute value. Enables the data attribute to carry any type of content,
  // whereby format and encoding might differ from that of the chosen event format.
  // For example, the data attribute may carry an XML or JSON payload and the consumer is informed
  // by this attribute being set to "application/xml" or "application/json" respectively.
  optional string contentType = 8;

  // This is for additional metadata and does not have a mandated structure.
  // Enables a place for custom fields a producer or middleware might want to include and provides a place
  // to test metadata before adding them to the CloudEvents specification.
  map<string, string> extensions = 9;
}

// EventWrapper wraps an event with an additional flag to check if we processed this event already
message EventWrapper {
  optional Event event = 1;

  optional bool seen = 2;
}

// GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion
// to avoid automatic coercion.  It doesn't use a GroupVersion to avoid custom marshalling.
message GroupVersionKind {
  optional string group = 1;

  optional string version = 2;

  optional string kind = 3;
}

// Message represents a message on a queue
message Message {
  optional string body = 1;

  // Stream descibes queue resources to send the message on
  optional Stream stream = 2;
}

// NodeStatus describes the status for an individual node in the sensor's FSM.
// A single node can represent the status for signal or a trigger.
message NodeStatus {
  // ID is a unique identifier of a node within a sensor
  // It is a hash of the node name
  optional string id = 1;

  // Name is a unique name in the node tree used to generate the node ID
  optional string name = 2;

  // DisplayName is the human readable representation of the node
  optional string displayName = 3;

  // Type is the type of the node
  optional string type = 4;

  // Phase of the node
  optional string phase = 5;

  // StartedAt is the time at which this node started
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startedAt = 6;

  // CompletedAt is the time at which this node completed
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completedAt = 7;

  // store data or something to save for signal notifications or trigger events
  optional string message = 8;

  // LatestEvent stores the last seen event for this node
  optional EventWrapper latestEvent = 9;
}

// ResourceFilter contains K8 ObjectMeta information to further filter resource signal objects
message ResourceFilter {
  optional string prefix = 1;

  map<string, string> labels = 2;

  map<string, string> annotations = 3;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time createdBy = 4;
}

// ResourceObject is the resource object to create on kubernetes
message ResourceObject {
  // Namespace in which to create this object
  // optional
  optional string namespace = 1;

  // The unambiguous kind of this object - used in order to retrieve the appropriate kubernetes api client for this resource
  optional GroupVersionKind groupVersionKind = 4;

  // Location in which the K8 resource file(s) are stored.
  // If omitted, will attempt to use the default artifact location configured in the controller.
  optional ArtifactLocation artifactLocation = 2;

  // Map of string keys and values that can be used to organize and categorize
  // (scope and select) objects. This overrides any labels in the unstructured object with the same key.
  map<string, string> labels = 3;
}

// ResourceSignal refers to a dependency on a k8s resource.
message ResourceSignal {
  optional GroupVersionKind groupVersionKind = 3;

  optional string namespace = 1;

  optional ResourceFilter filter = 2;
}

// RetryStrategy represents a strategy for retrying operations
// TODO: implement me
message RetryStrategy {
}

// S3Artifact contains information about an artifact in S3
message S3Artifact {
  optional S3Bucket s3Bucket = 5;

  optional string key = 1;

  optional string event = 2;

  optional S3Filter filter = 3;
}

// S3Bucket contains information for an S3 Bucket
message S3Bucket {
  optional string endpoint = 1;

  optional string bucket = 2;

  optional string region = 3;

  optional bool insecure = 4;

  optional k8s.io.api.core.v1.SecretKeySelector accessKey = 5;

  optional k8s.io.api.core.v1.SecretKeySelector secretKey = 6;
}

// S3Filter represents filters to apply to bucket nofifications for specifying constraints on objects
message S3Filter {
  optional string prefix = 1;

  optional string suffix = 2;
}

// Sensor is the definition of a sensor resource
// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message Sensor {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SensorSpec spec = 2;

  optional SensorStatus status = 3;
}

// SensorList is the list of Sensor resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message SensorList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Sensor items = 2;
}

// SensorSpec represents desired sensor state
message SensorSpec {
  // Signals is a list of the things that this sensor is dependent on. These are the inputs to this sensor.
  repeated Signal signals = 1;

  // Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.
  repeated Trigger triggers = 2;

  // Escalation describes the policy for signal failures and violations of the dependency's constraints.
  optional EscalationPolicy escalation = 3;

  // Repeat is a flag that determines if the sensor status should be reset after completion.
  // NOTE: functionality is currently expiremental and part of an initiative to define
  // a more concrete pattern or cycle for sensor reptition.
  optional bool repeat = 4;
}

// SensorStatus contains information about the status of a sensor.
message SensorStatus {
  // Phase is the high-level summary of the sensor
  optional string phase = 1;

  // StartedAt is the time at which this sensor was initiated
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startedAt = 2;

  // CompletedAt is the time at which this sensor was completed
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completedAt = 3;

  // Message is a human readable string indicating details about a sensor in its phase
  optional string message = 4;

  // Nodes is a mapping between a node ID and the node's status
  // it records the states for the FSM of this sensor.
  map<string, NodeStatus> nodes = 5;

  // Escalated is a flag for whether this sensor was escalated
  optional bool escalated = 6;
}

// Signal describes a dependency
message Signal {
  // Name is a unique name of this dependency
  optional string name = 1;

  // Deadline is the duration in seconds after the StartedAt time of the sensor after which this signal is terminated.
  // Note: this functionality is not yet respected, but it's theoretical behavior is as follows:
  // This trumps the recurrence patterns of calendar signals and allows any signal to have a strict defined life.
  // After the deadline is reached and this signal has not in a Resolved state, this signal is marked as Failed
  // and proper escalations should proceed.
  optional int64 deadline = 2;

  // Stream defines a message stream dependency
  optional Stream stream = 3;

  // artifact defines an external file dependency
  optional ArtifactSignal artifact = 4;

  // Calendar defines a time based dependency
  optional CalendarSignal calendar = 5;

  // Resource defines a dependency on a kubernetes resource -- this can be a pod, deployment or custom resource
  optional ResourceSignal resource = 6;

  // Webhook defines a HTTP notification dependency
  optional WebhookSignal webhook = 7;

  // Constraints and rules governing tolerations of success and overrides
  optional SignalConstraints constraints = 8;
}

// SignalConstraints defines constraints for a dependent signal.
message SignalConstraints {
  // Time constraints on the signal
  optional TimeConstraints time = 1;
}

// Stream describes a queue stream resource
message Stream {
  // Type of the stream resource
  optional string type = 1;

  // URL is the exposed endpoint for client connections to this service
  optional string url = 2;

  // Attributes contains additional fields specific to each service implementation
  map<string, string> attributes = 3;
}

// TimeConstraints describes constraints in time
message TimeConstraints {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time start = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time stop = 2;
}

// Trigger is an action taken, output produced, an event created, a message sent
message Trigger {
  // Name is a unique name of the action to take
  optional string name = 1;

  // Resource describes the resource that will be created by this action
  optional ResourceObject resource = 2;

  // Message describes a message that will be sent on a queue
  optional Message message = 3;

  // RetryStrategy is the strategy to retry a trigger if it fails
  optional RetryStrategy replyStrategy = 4;
}

// URI is a Uniform Resource Identifier based on RFC 3986
message URI {
  optional string scheme = 1;

  optional string user = 2;

  optional string password = 3;

  optional string host = 4;

  optional int32 port = 5;

  optional string path = 6;

  optional string query = 7;

  optional string fragment = 8;
}

// WebhookSignal is a general purpose REST API
message WebhookSignal {
  // REST API endpoint
  optional string endpoint = 1;

  // Port to listen on
  optional int32 port = 2;

  // Method is HTTP request method that indicates the desired action to be performed for a given resource.
  // See RFC7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content
  optional string method = 3;
}

