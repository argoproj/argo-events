/*
Copyright 2018 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.argoproj.argo_events.pkg.apis.sensor.v1alpha1;

import "github.com/argoproj/argo-events/pkg/apis/common/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// ArtifactLocation describes the source location for an external artifact
message ArtifactLocation {
  optional github.com.argoproj.argo_events.pkg.apis.common.S3Artifact s3 = 1;

  optional string inline = 2;

  optional FileArtifact file = 3;

  optional URLArtifact url = 4;

  optional ConfigmapArtifact configmap = 5;
}

// ConfigmapArtifact contains information about artifact in k8 configmap
message ConfigmapArtifact {
  // Name of the configmap
  optional string name = 1;

  // Namespace where configmap is deployed
  optional string namespace = 2;

  // Key within configmap data which contains trigger resource definition
  optional string key = 3;
}

message Data {
  // filter constraints
  repeated DataFilter filters = 1;
}

// DataFilter describes constraints and filters for event data
// Regular Expressions are purposefully not a feature as they are overkill for our uses here
// See Rob Pike's Post: https://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html
message DataFilter {
  // Path is the JSONPath of the event's (JSON decoded) data key
  // Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'.
  // To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'.
  // See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
  optional string path = 1;

  // Type contains the JSON type of the data
  optional string type = 2;

  // Value is the expected string value for this key
  // Booleans are pased using strconv.ParseBool()
  // Numbers are parsed using as float64 using strconv.ParseFloat()
  // Strings are taken as is
  // Nils this value is ignored
  optional string value = 3;
}

// EventDependency describes a dependency
message EventDependency {
  // Name is a unique name of this dependency
  optional string name = 1;

  // Deadline is the duration in seconds after the StartedAt time of the sensor after which this event is terminated.
  // Note: this functionality is not yet respected, but it's theoretical behavior is as follows:
  // This trumps the recurrence patterns of calendar events and allows any event to have a strict defined life.
  // After the deadline is reached and this event has not in a Resolved state, this event is marked as Failed
  // and proper escalations should proceed.
  optional int64 deadline = 2;

  // Filters and rules governing tolerations of success and constraints on the context and data of an event
  optional EventDependencyFilter filters = 3;

  // Connected tells if subscription is already setup in case of nats protocol.
  optional bool connected = 4;
}

// EventDependencyFilter defines filters and constraints for a event.
message EventDependencyFilter {
  // Name is the name of event filter
  optional string name = 1;

  // Time filter on the event with escalation
  optional TimeFilter time = 2;

  // Context filter constraints with escalation
  optional github.com.argoproj.argo_events.pkg.apis.common.EventContext context = 3;

  // Data filter constraints with escalation
  optional Data data = 4;
}

// EventProtocol contains configuration necessary to receieve an event from gateway over different communication protocols
message EventProtocol {
  // Type defines the type of protocol over which events will be receieved
  optional string type = 1;

  // Http contains the information required to setup a http server and listen to incoming events
  optional Http http = 2;

  // Nats contains the information required to connect to nats server and get subscriptions
  optional Nats nats = 3;
}

// FileArtifact contains information about an artifact in a filesystem
message FileArtifact {
  optional string path = 1;
}

// GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion
// to avoid automatic coercion.  It doesn't use a GroupVersion to avoid custom marshalling.
message GroupVersionKind {
  optional string group = 1;

  optional string version = 2;

  optional string kind = 3;
}

// Http contains the information required to setup a http server and listen to incoming events
message Http {
  // Port on which server will run
  optional string port = 1;
}

// Nats contains the information required to connect to nats server and get subscriptions
message Nats {
  // URL is nats server/service URL
  optional string url = 1;

  // Subscribe starting with most recently published value. Refer https://github.com/nats-io/go-nats-streaming
  optional bool startWithLastReceived = 2;

  // Receive all stored values in order.
  optional bool deliverAllAvailable = 3;

  // Receive messages starting at a specific sequence number
  optional string startAtSequence = 4;

  // Subscribe starting at a specific time
  optional string startAtTime = 5;

  // Subscribe starting a specific amount of time in the past (e.g. 30 seconds ago)
  optional string startAtTimeDelta = 6;

  // Durable subscriptions allow clients to assign a durable name to a subscription when it is created
  optional bool durable = 7;

  // The NATS Streaming cluster ID
  optional string clusterId = 8;

  // The NATS Streaming cluster ID
  optional string clientId = 9;

  // Type of the connection. either standard or streaming
  optional string type = 10;
}

// NodeStatus describes the status for an individual node in the sensor's FSM.
// A single node can represent the status for event or a trigger.
message NodeStatus {
  // ID is a unique identifier of a node within a sensor
  // It is a hash of the node name
  optional string id = 1;

  // Name is a unique name in the node tree used to generate the node ID
  optional string name = 2;

  // DisplayName is the human readable representation of the node
  optional string displayName = 3;

  // Type is the type of the node
  optional string type = 4;

  // Phase of the node
  optional string phase = 5;

  // StartedAt is the time at which this node started
  optional k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime startedAt = 6;

  // CompletedAt is the time at which this node completed
  optional k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime completedAt = 7;

  // store data or something to save for event notifications or trigger events
  optional string message = 8;

  // Event stores the last seen event for this node
  optional github.com.argoproj.argo_events.pkg.apis.common.Event event = 9;
}

// ResourceObject is the resource object to create on kubernetes
message ResourceObject {
  // The unambiguous kind of this object - used in order to retrieve the appropriate kubernetes api client for this resource
  optional GroupVersionKind groupVersionKind = 5;

  // Namespace in which to create this object
  // defaults to the service account namespace
  optional string namespace = 1;

  // Source of the K8 resource file(s)
  optional ArtifactLocation source = 6;

  // Map of string keys and values that can be used to organize and categorize
  // (scope and select) objects. This overrides any labels in the unstructured object with the same key.
  map<string, string> labels = 3;

  // Parameters is the list of resource parameters to pass in the object
  repeated ResourceParameter parameters = 4;
}

// ResourceParameter indicates a passed parameter to a service template
message ResourceParameter {
  // Src contains a source reference to the value of the resource parameter from a event event
  optional ResourceParameterSource src = 1;

  // Dest is the JSONPath of a resource key.
  // A path is a series of keys separated by a dot. The colon character can be escaped with '.'
  // The -1 key can be used to append a value to an existing array.
  // See https://github.com/tidwall/sjson#path-syntax for more information about how this is used.
  optional string dest = 2;
}

// ResourceParameterSource defines the source for a resource parameter from a event event
message ResourceParameterSource {
  // Event is the name of the event for which to retrieve this event
  optional string event = 1;

  // Path is the JSONPath of the event's (JSON decoded) data key
  // Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'.
  // To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'.
  // See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
  optional string path = 2;

  // Value is the default literal value to use for this parameter source
  // This is only used if the path is invalid.
  // If the path is invalid and this is not defined, this param source will produce an error.
  optional string value = 3;
}

// RetryStrategy represents a strategy for retrying operations
// TODO: implement me
message RetryStrategy {
}

// Sensor is the definition of a sensor resource
// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
message Sensor {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SensorSpec spec = 2;

  optional SensorStatus status = 3;
}

// SensorList is the list of Sensor resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message SensorList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Sensor items = 2;
}

// SensorSpec represents desired sensor state
message SensorSpec {
  // Dependencies is a list of the events that this sensor is dependent on.
  repeated EventDependency dependencies = 1;

  // Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.
  repeated Trigger triggers = 2;

  // DeploySpec contains sensor pod specification. For more information, read https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#pod-v1-core
  optional k8s.io.api.core.v1.PodSpec deploySpec = 3;

  // EventProtocol is the protocol through which sensor receives events from gateway
  optional EventProtocol eventProtocol = 4;
}

// SensorStatus contains information about the status of a sensor.
message SensorStatus {
  // Phase is the high-level summary of the sensor
  optional string phase = 1;

  // StartedAt is the time at which this sensor was initiated
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startedAt = 2;

  // CompletedAt is the time at which this sensor was completed
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completedAt = 3;

  // CompletionCount is the count of sensor's successful runs.
  optional int32 completionCount = 6;

  // Message is a human readable string indicating details about a sensor in its phase
  optional string message = 4;

  // Nodes is a mapping between a node ID and the node's status
  // it records the states for the FSM of this sensor.
  map<string, NodeStatus> nodes = 5;
}

// TimeFilter describes a window in time.
// Filters out event events that occur outside the time limits.
// In other words, only events that occur after Start and before Stop
// will pass this filter.
message TimeFilter {
  // Start is the beginning of a time window.
  // Before this time, events for this event are ignored and
  // format is hh:mm:ss
  optional string start = 1;

  // StopPattern is the end of a time window.
  // After this time, events for this event are ignored and
  // format is hh:mm:ss
  optional string stop = 2;
}

// Trigger is an action taken, output produced, an event created, a message sent
message Trigger {
  // Name is a unique name of the action to take
  optional string name = 1;

  // Resource describes the resource that will be created by this action
  optional ResourceObject resource = 2;

  // Message describes a message that will be sent on a queue
  optional string message = 3;

  // RetryStrategy is the strategy to retry a trigger if it fails
  optional RetryStrategy replyStrategy = 4;
}

// URLArtifact contains information about an artifact at an http endpoint.
message URLArtifact {
  optional string path = 1;

  optional bool verifyCert = 2;
}

