/*
Copyright 2021 The Argoproj Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.argoproj.argo_events.pkg.apis.events.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/argoproj/argo-events/pkg/apis/events/v1alpha1";

// AMQPConsumeConfig holds the configuration to immediately starts delivering queued messages
// +k8s:openapi-gen=true
message AMQPConsumeConfig {
  // ConsumerTag is the identity of the consumer included in every delivery
  // +optional
  optional string consumerTag = 1;

  // AutoAck when true, the server will acknowledge deliveries to this consumer prior to writing
  // the delivery to the network
  // +optional
  optional bool autoAck = 2;

  // Exclusive when true, the server will ensure that this is the sole consumer from this queue
  // +optional
  optional bool exclusive = 3;

  // NoLocal flag is not supported by RabbitMQ
  // +optional
  optional bool noLocal = 4;

  // NowWait when true, do not wait for the server to confirm the request and immediately begin deliveries
  // +optional
  optional bool noWait = 5;
}

// AMQPEventSource refers to an event-source for AMQP stream events
message AMQPEventSource {
  // URL for rabbitmq service
  optional string url = 1;

  // ExchangeName is the exchange name
  // For more information, visit https://www.rabbitmq.com/tutorials/amqp-concepts.html
  optional string exchangeName = 2;

  // ExchangeType is rabbitmq exchange type
  optional string exchangeType = 3;

  // Routing key for bindings
  optional string routingKey = 4;

  // Backoff holds parameters applied to connection.
  // +optional
  optional Backoff connectionBackoff = 5;

  // JSONBody specifies that all event body payload coming from this
  // source will be JSON
  // +optional
  optional bool jsonBody = 6;

  // TLS configuration for the amqp client.
  // +optional
  optional TLSConfig tls = 7;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 8;

  // ExchangeDeclare holds the configuration for the exchange on the server
  // For more information, visit https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.ExchangeDeclare
  // +optional
  optional AMQPExchangeDeclareConfig exchangeDeclare = 9;

  // QueueDeclare holds the configuration of a queue to hold messages and deliver to consumers.
  // Declaring creates a queue if it doesn't already exist, or ensures that an existing queue matches
  // the same parameters
  // For more information, visit https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.QueueDeclare
  // +optional
  optional AMQPQueueDeclareConfig queueDeclare = 10;

  // QueueBind holds the configuration that binds an exchange to a queue so that publishings to the
  // exchange will be routed to the queue when the publishing routing key matches the binding routing key
  // For more information, visit https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.QueueBind
  // +optional
  optional AMQPQueueBindConfig queueBind = 11;

  // Consume holds the configuration to immediately starts delivering queued messages
  // For more information, visit https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.Consume
  // +optional
  optional AMQPConsumeConfig consume = 12;

  // Auth hosts secret selectors for username and password
  // +optional
  optional BasicAuth auth = 13;

  // URLSecret is secret reference for rabbitmq service URL
  optional k8s.io.api.core.v1.SecretKeySelector urlSecret = 14;

  // Filter
  // +optional
  optional EventSourceFilter filter = 15;
}

// AMQPExchangeDeclareConfig holds the configuration for the exchange on the server
// +k8s:openapi-gen=true
message AMQPExchangeDeclareConfig {
  // Durable keeps the exchange also after the server restarts
  // +optional
  optional bool durable = 1;

  // AutoDelete removes the exchange when no bindings are active
  // +optional
  optional bool autoDelete = 2;

  // Internal when true does not accept publishings
  // +optional
  optional bool internal = 3;

  // NowWait when true does not wait for a confirmation from the server
  // +optional
  optional bool noWait = 4;
}

// AMQPQueueBindConfig holds the configuration that binds an exchange to a queue so that publishings to the
// exchange will be routed to the queue when the publishing routing key matches the binding routing key
// +k8s:openapi-gen=true
message AMQPQueueBindConfig {
  // NowWait false and the queue could not be bound, the channel will be closed with an error
  // +optional
  optional bool noWait = 1;
}

// AMQPQueueDeclareConfig holds the configuration of a queue to hold messages and deliver to consumers.
// Declaring creates a queue if it doesn't already exist, or ensures that an existing queue matches
// the same parameters
// +k8s:openapi-gen=true
message AMQPQueueDeclareConfig {
  // Name of the queue. If empty the server auto-generates a unique name for this queue
  // +optional
  optional string name = 1;

  // Durable keeps the queue also after the server restarts
  // +optional
  optional bool durable = 2;

  // AutoDelete removes the queue when no consumers are active
  // +optional
  optional bool autoDelete = 3;

  // Exclusive sets the queues to be accessible only by the connection that declares them and will be
  // deleted wgen the connection closes
  // +optional
  optional bool exclusive = 4;

  // NowWait when true, the queue assumes to be declared on the server
  // +optional
  optional bool noWait = 5;

  // Arguments of a queue (also known as "x-arguments") used for optional features and plugins
  // +optional
  optional string arguments = 6;
}

// AWSLambdaTrigger refers to specification of the trigger to invoke an AWS Lambda function
message AWSLambdaTrigger {
  // FunctionName refers to the name of the function to invoke.
  optional string functionName = 1;

  // AccessKey refers K8s secret containing aws access key
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector accessKey = 2;

  // SecretKey refers K8s secret containing aws secret key
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector secretKey = 3;

  // Region is AWS region
  optional string region = 4;

  // Payload is the list of key-value extracted from an event payload to construct the request payload.
  repeated TriggerParameter payload = 5;

  // Parameters is the list of key-value extracted from event's payload that are applied to
  // the trigger resource.
  // +optional
  repeated TriggerParameter parameters = 6;

  // Choose from the following options.
  //
  //    * RequestResponse (default) - Invoke the function synchronously. Keep
  //    the connection open until the function returns a response or times out.
  //    The API response includes the function response and additional data.
  //
  //    * Event - Invoke the function asynchronously. Send events that fail multiple
  //    times to the function's dead-letter queue (if it's configured). The API
  //    response only includes a status code.
  //
  //    * DryRun - Validate parameter values and verify that the user or role
  //    has permission to invoke the function.
  // +optional
  optional string invocationType = 7;

  // RoleARN is the Amazon Resource Name (ARN) of the role to assume.
  // +optional
  optional string roleARN = 8;
}

// Amount represent a numeric amount.
message Amount {
  optional bytes value = 1;
}

// ArgoWorkflowTrigger is the trigger for the Argo Workflow
message ArgoWorkflowTrigger {
  // Source of the K8s resource file(s)
  optional ArtifactLocation source = 1;

  // Operation refers to the type of operation performed on the argo workflow resource.
  // Default value is Submit.
  // +optional
  optional string operation = 2;

  // Parameters is the list of parameters to pass to resolved Argo Workflow object
  repeated TriggerParameter parameters = 3;

  // Args is the list of arguments to pass to the argo CLI
  repeated string args = 4;
}

// ArtifactLocation describes the source location for an external artifact
message ArtifactLocation {
  // S3 compliant artifact
  optional S3Artifact s3 = 1;

  // Inline artifact is embedded in sensor spec as a string
  optional string inline = 2;

  // File artifact is artifact stored in a file
  optional FileArtifact file = 3;

  // URL to fetch the artifact from
  optional URLArtifact url = 4;

  // Configmap that stores the artifact
  optional k8s.io.api.core.v1.ConfigMapKeySelector configmap = 5;

  // Git repository hosting the artifact
  optional GitArtifact git = 6;

  // Resource is generic template for K8s resource
  optional K8SResource resource = 7;
}

// AzureEventHubsTrigger refers to specification of the Azure Event Hubs Trigger
message AzureEventHubsTrigger {
  // FQDN refers to the namespace dns of Azure Event Hubs to be used i.e. <namespace>.servicebus.windows.net
  optional string fqdn = 1;

  // HubName refers to the Azure Event Hub to send events to
  optional string hubName = 2;

  // SharedAccessKeyName refers to the name of the Shared Access Key
  optional k8s.io.api.core.v1.SecretKeySelector sharedAccessKeyName = 3;

  // SharedAccessKey refers to a K8s secret containing the primary key for the
  optional k8s.io.api.core.v1.SecretKeySelector sharedAccessKey = 4;

  // Payload is the list of key-value extracted from an event payload to construct the request payload.
  repeated TriggerParameter payload = 5;

  // Parameters is the list of key-value extracted from event's payload that are applied to
  // the trigger resource.
  // +optional
  repeated TriggerParameter parameters = 6;
}

// AzureEventsHubEventSource describes the event source for azure events hub
// More info at https://docs.microsoft.com/en-us/azure/event-hubs/
message AzureEventsHubEventSource {
  // FQDN of the EventHubs namespace you created
  // More info at https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string
  optional string fqdn = 1;

  // SharedAccessKeyName is the name you chose for your application's SAS keys
  optional k8s.io.api.core.v1.SecretKeySelector sharedAccessKeyName = 2;

  // SharedAccessKey is the generated value of the key
  optional k8s.io.api.core.v1.SecretKeySelector sharedAccessKey = 3;

  // Event Hub path/name
  optional string hubName = 4;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 5;

  // Filter
  // +optional
  optional EventSourceFilter filter = 6;
}

// AzureQueueStorageEventSource describes the event source for azure queue storage
// more info at https://learn.microsoft.com/en-us/azure/storage/queues/
message AzureQueueStorageEventSource {
  // StorageAccountName is the name of the storage account where the queue is. This field is necessary to
  // access via Azure AD (managed identity) and it is ignored if ConnectionString is set.
  // +optional
  optional string storageAccountName = 1;

  // ConnectionString is the connection string to access Azure Queue Storage. If this fields is not provided
  // it will try to access via Azure AD with StorageAccountName.
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector connectionString = 2;

  // QueueName is the name of the queue
  optional string queueName = 3;

  // JSONBody specifies that all event body payload coming from this
  // source will be JSON
  // +optional
  optional bool jsonBody = 4;

  // DLQ specifies if a dead-letter queue is configured for messages that can't be processed successfully.
  // If set to true, messages with invalid payload won't be acknowledged to allow to forward them farther to the dead-letter queue.
  // The default value is false.
  // +optional
  optional bool dlq = 5;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 6;

  // Filter
  // +optional
  optional EventSourceFilter filter = 7;

  // DecodeMessage specifies if all the messages should be base64 decoded.
  // If set to true the decoding is done before the evaluation of JSONBody
  // +optional
  optional bool decodeMessage = 8;

  // WaitTimeInSeconds is the duration (in seconds) for which the event source waits between empty results from the queue.
  // The default value is 3 seconds.
  // +optional
  optional int32 waitTimeInSeconds = 9;
}

// AzureServiceBusEventSource describes the event source for azure service bus
// More info at https://docs.microsoft.com/en-us/azure/service-bus-messaging/
message AzureServiceBusEventSource {
  // ConnectionString is the connection string for the Azure Service Bus. If this fields is not provided
  // it will try to access via Azure AD with DefaultAzureCredential and FullyQualifiedNamespace.
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector connectionString = 1;

  // QueueName is the name of the Azure Service Bus Queue
  optional string queueName = 2;

  // TopicName is the name of the Azure Service Bus Topic
  optional string topicName = 3;

  // SubscriptionName is the name of the Azure Service Bus Topic Subscription
  optional string subscriptionName = 4;

  // TLS configuration for the service bus client
  // +optional
  optional TLSConfig tls = 5;

  // JSONBody specifies that all event body payload coming from this
  // source will be JSON
  // +optional
  optional bool jsonBody = 6;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 7;

  // Filter
  // +optional
  optional EventSourceFilter filter = 8;

  // FullyQualifiedNamespace is the Service Bus namespace name (ex: myservicebus.servicebus.windows.net). This field is necessary to
  // access via Azure AD (managed identity) and it is ignored if ConnectionString is set.
  // +optional
  optional string fullyQualifiedNamespace = 9;
}

message AzureServiceBusTrigger {
  // ConnectionString is the connection string for the Azure Service Bus
  optional k8s.io.api.core.v1.SecretKeySelector connectionString = 1;

  // QueueName is the name of the Azure Service Bus Queue
  optional string queueName = 2;

  // TopicName is the name of the Azure Service Bus Topic
  optional string topicName = 3;

  // SubscriptionName is the name of the Azure Service Bus Topic Subscription
  optional string subscriptionName = 4;

  // TLS configuration for the service bus client
  // +optional
  optional TLSConfig tls = 5;

  // Payload is the list of key-value extracted from an event payload to construct the request payload.
  repeated TriggerParameter payload = 6;

  // Parameters is the list of key-value extracted from event's payload that are applied to
  // the trigger resource.
  // +optional
  repeated TriggerParameter parameters = 7;
}

// Backoff for an operation
message Backoff {
  // The initial duration in nanoseconds or strings like "1s", "3m"
  // +optional
  optional Int64OrString duration = 1;

  // Duration is multiplied by factor each iteration
  // +optional
  optional Amount factor = 2;

  // The amount of jitter applied each iteration
  // +optional
  optional Amount jitter = 3;

  // Exit with error after this many steps
  // +optional
  optional int32 steps = 4;
}

// BasicAuth contains the reference to K8s secrets that holds the username and password
message BasicAuth {
  // Username refers to the Kubernetes secret that holds the username required for basic auth.
  optional k8s.io.api.core.v1.SecretKeySelector username = 1;

  // Password refers to the Kubernetes secret that holds the password required for basic auth.
  optional k8s.io.api.core.v1.SecretKeySelector password = 2;
}

// BitbucketAuth holds the different auth strategies for connecting to Bitbucket
message BitbucketAuth {
  // Basic is BasicAuth auth strategy.
  // +optional
  optional BitbucketBasicAuth basic = 1;

  // OAuthToken refers to the K8s secret that holds the OAuth Bearer token.
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector oauthToken = 2;
}

// BitbucketBasicAuth holds the information required to authenticate user via basic auth mechanism
message BitbucketBasicAuth {
  // Username refers to the K8s secret that holds the username.
  optional k8s.io.api.core.v1.SecretKeySelector username = 1;

  // Password refers to the K8s secret that holds the password.
  optional k8s.io.api.core.v1.SecretKeySelector password = 2;
}

// BitbucketEventSource describes the event source for Bitbucket
message BitbucketEventSource {
  // DeleteHookOnFinish determines whether to delete the defined Bitbucket hook once the event source is stopped.
  // +optional
  optional bool deleteHookOnFinish = 1;

  // Metadata holds the user defined metadata which will be passed along the event payload.
  // +optional
  map<string, string> metadata = 2;

  // Webhook refers to the configuration required to run an http server
  optional WebhookContext webhook = 3;

  // Auth information required to connect to Bitbucket.
  optional BitbucketAuth auth = 4;

  // Events this webhook is subscribed to.
  repeated string events = 5;

  // DeprecatedOwner is the owner of the repository.
  // Deprecated: use Repositories instead. Will be unsupported in v1.9
  // +optional
  optional string owner = 6;

  // DeprecatedProjectKey is the key of the project to which the repository relates
  // Deprecated: use Repositories instead. Will be unsupported in v1.9
  // +optional
  optional string projectKey = 7;

  // DeprecatedRepositorySlug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL
  // Deprecated: use Repositories instead. Will be unsupported in v1.9
  // +optional
  optional string repositorySlug = 8;

  // Repositories holds a list of repositories for which integration needs to set up
  // +optional
  repeated BitbucketRepository repositories = 9;

  // Filter
  // +optional
  optional EventSourceFilter filter = 10;
}

message BitbucketRepository {
  // Owner is the owner of the repository
  optional string owner = 1;

  // RepositorySlug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL
  optional string repositorySlug = 2;
}

// BitbucketServerEventSource refers to event-source related to Bitbucket Server events
message BitbucketServerEventSource {
  // Webhook holds configuration to run a http server.
  optional WebhookContext webhook = 1;

  // DeprecatedProjectKey is the key of project for which integration needs to set up.
  // Deprecated: use Repositories instead. Will be unsupported in v1.8.
  // +optional
  optional string projectKey = 2;

  // DeprecatedRepositorySlug is the slug of the repository for which integration needs to set up.
  // Deprecated: use Repositories instead. Will be unsupported in v1.8.
  // +optional
  optional string repositorySlug = 3;

  // Projects holds a list of projects for which integration needs to set up, this will add the webhook to all repositories in the project.
  // +optional
  repeated string projects = 4;

  // Repositories holds a list of repositories for which integration needs to set up.
  // +optional
  repeated BitbucketServerRepository repositories = 5;

  // Events are bitbucket event to listen to.
  // Refer https://confluence.atlassian.com/bitbucketserver/event-payload-938025882.html
  // +optional
  repeated string events = 6;

  // SkipBranchRefsChangedOnOpenPR bypasses the event repo:refs_changed for branches whenever there's an associated open pull request.
  // This helps in optimizing the event handling process by avoiding unnecessary triggers for branch reference changes that are already part of a pull request under review.
  // +optional
  optional bool skipBranchRefsChangedOnOpenPR = 7;

  // OneEventPerChange controls whether to process each change in a repo:refs_changed webhook event as a separate event. This setting is useful when multiple tags are
  // pushed simultaneously for the same commit, and each tag needs to independently trigger an action, such as a distinct workflow in Argo Workflows. When enabled, the
  // BitbucketServerEventSource publishes an individual BitbucketServerEventData for each change, ensuring independent processing of each tag or reference update in a
  // single webhook event.
  // +optional
  optional bool oneEventPerChange = 8;

  // AccessToken is reference to K8s secret which holds the bitbucket api access information.
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector accessToken = 9;

  // WebhookSecret is reference to K8s secret which holds the bitbucket webhook secret (for HMAC validation).
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector webhookSecret = 10;

  // BitbucketServerBaseURL is the base URL for API requests to a custom endpoint.
  optional string bitbucketserverBaseURL = 11;

  // DeleteHookOnFinish determines whether to delete the Bitbucket Server hook for the project once the event source is stopped.
  // +optional
  optional bool deleteHookOnFinish = 12;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 13;

  // Filter
  // +optional
  optional EventSourceFilter filter = 14;

  // TLS configuration for the bitbucketserver client.
  // +optional
  optional TLSConfig tls = 15;

  // CheckInterval is a duration in which to wait before checking that the webhooks exist, e.g. 1s, 30m, 2h... (defaults to 1m)
  // +optional
  optional string checkInterval = 16;
}

message BitbucketServerRepository {
  // ProjectKey is the key of project for which integration needs to set up.
  optional string projectKey = 1;

  // RepositorySlug is the slug of the repository for which integration needs to set up.
  optional string repositorySlug = 2;
}

// BusConfig has the finalized configuration for EventBus
message BusConfig {
  // +optional
  optional NATSConfig nats = 1;

  // +optional
  optional JetStreamConfig jetstream = 2;

  // +optional
  optional KafkaBus kafka = 3;
}

// CalendarEventSource describes a time based dependency. One of the fields (schedule, interval, or recurrence) must be passed.
// Schedule takes precedence over interval; interval takes precedence over recurrence
message CalendarEventSource {
  // Schedule is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron
  // +optional
  optional string schedule = 1;

  // Interval is a string that describes an interval duration, e.g. 1s, 30m, 2h...
  // +optional
  optional string interval = 2;

  // ExclusionDates defines the list of DATE-TIME exceptions for recurring events.
  repeated string exclusionDates = 3;

  // Timezone in which to run the schedule
  // +optional
  optional string timezone = 4;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 5;

  // Persistence hold the configuration for event persistence
  optional EventPersistence persistence = 6;

  // Filter
  // +optional
  optional EventSourceFilter filter = 8;
}

message CatchupConfiguration {
  // Enabled enables to triggered the missed schedule when eventsource restarts
  optional bool enabled = 1;

  // MaxDuration holds max catchup duration
  optional string maxDuration = 2;
}

// Condition contains details about resource state
message Condition {
  // Condition type.
  // +required
  optional string type = 1;

  // Condition status, True, False or Unknown.
  // +required
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // Unique, this should be a short, machine understandable string that gives the reason
  // for condition's last transition. For example, "ImageNotFound"
  // +optional
  optional string reason = 4;

  // Human-readable message indicating details about last transition.
  // +optional
  optional string message = 5;
}

message ConditionsResetByTime {
  // Cron is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron
  optional string cron = 1;

  // +optional
  optional string timezone = 2;
}

message ConditionsResetCriteria {
  // Schedule is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron
  optional ConditionsResetByTime byTime = 1;
}

message ConfigMapPersistence {
  // Name of the configmap
  optional string name = 1;

  // CreateIfNotExist will create configmap if it doesn't exists
  optional bool createIfNotExist = 2;
}

// ContainerTemplate defines customized spec for a container
message ContainerTemplate {
  optional k8s.io.api.core.v1.ResourceRequirements resources = 1;

  optional string imagePullPolicy = 2;

  optional k8s.io.api.core.v1.SecurityContext securityContext = 3;
}

// CustomTrigger refers to the specification of the custom trigger.
message CustomTrigger {
  // ServerURL is the url of the gRPC server that executes custom trigger
  optional string serverURL = 1;

  // Secure refers to type of the connection between sensor to custom trigger gRPC
  optional bool secure = 2;

  // CertSecret refers to the secret that contains cert for secure connection between sensor and custom trigger gRPC server.
  optional k8s.io.api.core.v1.SecretKeySelector certSecret = 3;

  // ServerNameOverride for the secure connection between sensor and custom trigger gRPC server.
  optional string serverNameOverride = 4;

  // Spec is the custom trigger resource specification that custom trigger gRPC server knows how to interpret.
  map<string, string> spec = 5;

  // Parameters is the list of parameters that is applied to resolved custom trigger trigger object.
  repeated TriggerParameter parameters = 6;

  // Payload is the list of key-value extracted from an event payload to construct the request payload.
  repeated TriggerParameter payload = 7;
}

// DataFilter describes constraints and filters for event data
// Regular Expressions are purposefully not a feature as they are overkill for our uses here
// See Rob Pike's Post: https://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html
message DataFilter {
  // Path is the JSONPath of the event's (JSON decoded) data key
  // Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'.
  // To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'.
  // See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
  optional string path = 1;

  // Type contains the JSON type of the data
  optional string type = 2;

  // Value is the allowed string values for this key
  // Booleans are passed using strconv.ParseBool()
  // Numbers are parsed using as float64 using strconv.ParseFloat()
  // Strings are taken as is
  // Nils this value is ignored
  repeated string value = 3;

  // Comparator compares the event data with a user given value.
  // Can be ">=", ">", "=", "!=", "<", or "<=".
  // Is optional, and if left blank treated as equality "=".
  optional string comparator = 4;

  // Template is a go-template for extracting a string from the event's data.
  // A Template is evaluated with provided path, type and value.
  // The templating follows the standard go-template syntax as well as sprig's extra functions.
  // See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/
  optional string template = 5;
}

// EmailTrigger refers to the specification of the email notification trigger.
message EmailTrigger {
  // Parameters is the list of key-value extracted from event's payload that are applied to
  // the trigger resource.
  // +optional
  repeated TriggerParameter parameters = 1;

  // Username refers to the username used to connect to the smtp server.
  // +optional
  optional string username = 2;

  // SMTPPassword refers to the Kubernetes secret that holds the smtp password used to connect to smtp server.
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector smtpPassword = 3;

  // Host refers to the smtp host url to which email is send.
  optional string host = 4;

  // Port refers to the smtp server port to which email is send.
  // Defaults to 0.
  // +optional
  optional int32 port = 5;

  // To refers to the email addresses to which the emails are send.
  // +optional
  repeated string to = 6;

  // From refers to the address from which the email is send from.
  // +optional
  optional string from = 7;

  // Subject refers to the subject line for the email send.
  // +optional
  optional string subject = 8;

  // Body refers to the body/content of the email send.
  // +optional
  optional string body = 9;
}

// EmitterEventSource describes the event source for emitter
// More info at https://emitter.io/develop/getting-started/
message EmitterEventSource {
  // Broker URI to connect to.
  optional string broker = 1;

  // ChannelKey refers to the channel key
  optional string channelKey = 2;

  // ChannelName refers to the channel name
  optional string channelName = 3;

  // Username to use to connect to broker
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector username = 4;

  // Password to use to connect to broker
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector password = 5;

  // Backoff holds parameters applied to connection.
  // +optional
  optional Backoff connectionBackoff = 6;

  // JSONBody specifies that all event body payload coming from this
  // source will be JSON
  // +optional
  optional bool jsonBody = 7;

  // TLS configuration for the emitter client.
  // +optional
  optional TLSConfig tls = 8;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 9;

  // Filter
  // +optional
  optional EventSourceFilter filter = 10;
}

// Event represents the cloudevent received from an event source.
// +protobuf.options.(gogoproto.goproto_stringer)=false
message Event {
  optional EventContext context = 1;

  optional bytes data = 2;
}

// EventBus is the definition of a eventbus resource
// +genclient
// +kubebuilder:object:root=true
// +kubebuilder:resource:shortName=eb
// +kubebuilder:subresource:status
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
message EventBus {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EventBusSpec spec = 2;

  // +optional
  optional EventBusStatus status = 3;
}

// EventBusList is the list of eventbus resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message EventBusList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated EventBus items = 2;
}

// EventBusSpec refers to specification of eventbus resource
message EventBusSpec {
  // NATS eventbus
  // +optional
  optional NATSBus nats = 1;

  // +optional
  optional JetStreamBus jetstream = 2;

  // +optional
  // Kafka eventbus
  optional KafkaBus kafka = 3;

  // Exotic JetStream
  // +optional
  optional JetStreamConfig jetstreamExotic = 4;
}

// EventBusStatus holds the status of the eventbus resource
message EventBusStatus {
  optional Status status = 1;

  // Config holds the fininalized configuration of EventBus
  optional BusConfig config = 2;
}

// EventContext holds the context of the cloudevent received from an event source.
// +protobuf.options.(gogoproto.goproto_stringer)=false
message EventContext {
  // ID of the event; must be non-empty and unique within the scope of the producer.
  optional string id = 1;

  // Source - A URI describing the event producer.
  optional string source = 2;

  // SpecVersion - The version of the CloudEvents specification used by the event.
  optional string specversion = 3;

  // Type - The type of the occurrence which has happened.
  optional string type = 4;

  // DataContentType - A MIME (RFC2046) string describing the media type of `data`.
  optional string datacontenttype = 5;

  // Subject - The subject of the event in the context of the event producer
  optional string subject = 6;

  // Time - A Timestamp when the event happened.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time time = 7;
}

// EventDependency describes a dependency
message EventDependency {
  // Name is a unique name of this dependency
  optional string name = 1;

  // EventSourceName is the name of EventSource that Sensor depends on
  optional string eventSourceName = 2;

  // EventName is the name of the event
  optional string eventName = 3;

  // Filters and rules governing toleration of success and constraints on the context and data of an event
  optional EventDependencyFilter filters = 4;

  // Transform transforms the event data
  optional EventDependencyTransformer transform = 5;

  // FiltersLogicalOperator defines how different filters are evaluated together.
  // Available values: and (&&), or (||)
  // Is optional and if left blank treated as and (&&).
  optional string filtersLogicalOperator = 6;
}

// EventDependencyFilter defines filters and constraints for a event.
message EventDependencyFilter {
  // Time filter on the event with escalation
  optional TimeFilter time = 1;

  // Context filter constraints
  optional EventContext context = 2;

  // Data filter constraints with escalation
  repeated DataFilter data = 3;

  // Exprs contains the list of expressions evaluated against the event payload.
  repeated ExprFilter exprs = 4;

  // DataLogicalOperator defines how multiple Data filters (if defined) are evaluated together.
  // Available values: and (&&), or (||)
  // Is optional and if left blank treated as and (&&).
  optional string dataLogicalOperator = 5;

  // ExprLogicalOperator defines how multiple Exprs filters (if defined) are evaluated together.
  // Available values: and (&&), or (||)
  // Is optional and if left blank treated as and (&&).
  optional string exprLogicalOperator = 6;

  // Script refers to a Lua script evaluated to determine the validity of an event.
  optional string script = 7;
}

// EventDependencyTransformer transforms the event
message EventDependencyTransformer {
  // JQ holds the jq command applied for transformation
  // +optional
  optional string jq = 1;

  // Script refers to a Lua script used to transform the event
  // +optional
  optional string script = 2;
}

message EventPersistence {
  // Catchup enables to triggered the missed schedule when eventsource restarts
  optional CatchupConfiguration catchup = 1;

  // ConfigMap holds configmap details for persistence
  optional ConfigMapPersistence configMap = 2;
}

// EventSource is the definition of a eventsource resource
// +genclient
// +kubebuilder:resource:shortName=es
// +kubebuilder:subresource:status
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
message EventSource {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EventSourceSpec spec = 2;

  // +optional
  optional EventSourceStatus status = 3;
}

message EventSourceFilter {
  optional string expression = 1;
}

// EventSourceList is the list of eventsource resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message EventSourceList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated EventSource items = 2;
}

// EventSourceSpec refers to specification of event-source resource
message EventSourceSpec {
  // EventBusName references to a EventBus name. By default the value is "default"
  optional string eventBusName = 1;

  // Template is the pod specification for the event source
  // +optional
  optional Template template = 2;

  // Service is the specifications of the service to expose the event source
  // +optional
  optional Service service = 3;

  // Minio event sources
  map<string, S3Artifact> minio = 4;

  // Calendar event sources
  map<string, CalendarEventSource> calendar = 5;

  // File event sources
  map<string, FileEventSource> file = 6;

  // Resource event sources
  map<string, ResourceEventSource> resource = 7;

  // Webhook event sources
  map<string, WebhookEventSource> webhook = 8;

  // AMQP event sources
  map<string, AMQPEventSource> amqp = 9;

  // Kafka event sources
  map<string, KafkaEventSource> kafka = 10;

  // MQTT event sources
  map<string, MQTTEventSource> mqtt = 11;

  // NATS event sources
  map<string, NATSEventsSource> nats = 12;

  // SNS event sources
  map<string, SNSEventSource> sns = 13;

  // SQS event sources
  map<string, SQSEventSource> sqs = 14;

  // PubSub event sources
  map<string, PubSubEventSource> pubSub = 15;

  // Github event sources
  map<string, GithubEventSource> github = 16;

  // Gitlab event sources
  map<string, GitlabEventSource> gitlab = 17;

  // HDFS event sources
  map<string, HDFSEventSource> hdfs = 18;

  // Slack event sources
  map<string, SlackEventSource> slack = 19;

  // StorageGrid event sources
  map<string, StorageGridEventSource> storageGrid = 20;

  // AzureEventsHub event sources
  map<string, AzureEventsHubEventSource> azureEventsHub = 21;

  // Stripe event sources
  map<string, StripeEventSource> stripe = 22;

  // Emitter event source
  map<string, EmitterEventSource> emitter = 23;

  // Redis event source
  map<string, RedisEventSource> redis = 24;

  // NSQ event source
  map<string, NSQEventSource> nsq = 25;

  // Pulsar event source
  map<string, PulsarEventSource> pulsar = 26;

  // Generic event source
  map<string, GenericEventSource> generic = 27;

  // Replicas is the event source deployment replicas
  optional int32 replicas = 28;

  // Bitbucket Server event sources
  map<string, BitbucketServerEventSource> bitbucketserver = 29;

  // Bitbucket event sources
  map<string, BitbucketEventSource> bitbucket = 30;

  // Redis stream source
  map<string, RedisStreamEventSource> redisStream = 31;

  // Azure Service Bus event source
  map<string, AzureServiceBusEventSource> azureServiceBus = 32;

  // AzureQueueStorage event source
  map<string, AzureQueueStorageEventSource> azureQueueStorage = 33;

  // SFTP event sources
  map<string, SFTPEventSource> sftp = 34;

  // Gerrit event source
  map<string, GerritEventSource> gerrit = 35;
}

// EventSourceStatus holds the status of the event-source resource
message EventSourceStatus {
  optional Status status = 1;
}

message ExprFilter {
  // Expr refers to the expression that determines the outcome of the filter.
  optional string expr = 1;

  // Fields refers to set of keys that refer to the paths within event payload.
  repeated PayloadField fields = 2;
}

// FileArtifact contains information about an artifact in a filesystem
message FileArtifact {
  optional string path = 1;
}

// FileEventSource describes an event-source for file related events.
message FileEventSource {
  // Type of file operations to watch
  // Refer https://github.com/fsnotify/fsnotify/blob/master/fsnotify.go for more information
  optional string eventType = 1;

  // WatchPathConfig contains configuration about the file path to watch
  optional WatchPathConfig watchPathConfig = 2;

  // Use polling instead of inotify
  optional bool polling = 3;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 4;

  // Filter
  // +optional
  optional EventSourceFilter filter = 5;
}

// GenericEventSource refers to a generic event source. It can be used to implement a custom event source.
message GenericEventSource {
  // URL of the gRPC server that implements the event source.
  optional string url = 1;

  // Config is the event source configuration
  optional string config = 2;

  // Insecure determines the type of connection.
  optional bool insecure = 3;

  // JSONBody specifies that all event body payload coming from this
  // source will be JSON
  // +optional
  optional bool jsonBody = 4;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 5;

  // AuthSecret holds a secret selector that contains a bearer token for authentication
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector authSecret = 6;

  // Filter
  // +optional
  optional EventSourceFilter filter = 7;
}

// GerritEventSource refers to event-source related to gerrit events
message GerritEventSource {
  // Webhook holds configuration to run a http server
  optional WebhookContext webhook = 1;

  // HookName is the name of the webhook
  optional string hookName = 2;

  // Events are gerrit event to listen to.
  // Refer https://gerrit-review.googlesource.com/Documentation/cmd-stream-events.html#events
  repeated string events = 3;

  // Auth hosts secret selectors for username and password
  // +optional
  optional BasicAuth auth = 4;

  // GerritBaseURL is the base URL for API requests to a custom endpoint
  optional string gerritBaseURL = 5;

  // DeleteHookOnFinish determines whether to delete the Gerrit hook for the project once the event source is stopped.
  // +optional
  optional bool deleteHookOnFinish = 6;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 7;

  // List of project namespace paths like "whynowy/test".
  repeated string projects = 8;

  // SslVerify to enable ssl verification
  // +optional
  optional bool sslVerify = 9;

  // Filter
  // +optional
  optional EventSourceFilter filter = 10;
}

// GitArtifact contains information about an artifact stored in git
message GitArtifact {
  // Git URL
  optional string url = 1;

  // Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers.
  // Hence we don't use any specific git provider client.
  optional string cloneDirectory = 2;

  // Creds contain reference to git username and password
  // +optional
  optional GitCreds creds = 3;

  // SSHKeySecret refers to the secret that contains SSH key
  optional k8s.io.api.core.v1.SecretKeySelector sshKeySecret = 4;

  // Path to file that contains trigger resource definition
  optional string filePath = 5;

  // Branch to use to pull trigger resource
  // +optional
  optional string branch = 6;

  // Tag to use to pull trigger resource
  // +optional
  optional string tag = 7;

  // Ref to use to pull trigger resource. Will result in a shallow clone and
  // fetch.
  // +optional
  optional string ref = 8;

  // Remote to manage set of tracked repositories. Defaults to "origin".
  // Refer https://git-scm.com/docs/git-remote
  // +optional
  optional GitRemoteConfig remote = 9;

  // Whether to ignore host key
  // +optional
  optional bool insecureIgnoreHostKey = 10;
}

// GitCreds contain reference to git username and password
message GitCreds {
  optional k8s.io.api.core.v1.SecretKeySelector username = 1;

  optional k8s.io.api.core.v1.SecretKeySelector password = 2;
}

// GitRemoteConfig contains the configuration of a Git remote
message GitRemoteConfig {
  // Name of the remote to fetch from.
  optional string name = 1;

  // URLs the URLs of a remote repository. It must be non-empty. Fetch will
  // always use the first URL, while push will use all of them.
  repeated string urls = 2;
}

message GithubAppCreds {
  // PrivateKey refers to a K8s secret containing the GitHub app private key
  optional k8s.io.api.core.v1.SecretKeySelector privateKey = 1;

  // AppID refers to the GitHub App ID for the application you created
  optional int64 appID = 2;

  // InstallationID refers to the Installation ID of the GitHub app you created and installed
  optional int64 installationID = 3;
}

// GithubEventSource refers to event-source for github related events
message GithubEventSource {
  // Id is the webhook's id
  // Deprecated: This is not used at all, will be removed in v1.6
  // +optional
  optional int64 id = 1;

  // Webhook refers to the configuration required to run a http server
  optional WebhookContext webhook = 2;

  // DeprecatedOwner refers to GitHub owner name i.e. argoproj
  // Deprecated: use Repositories instead. Will be unsupported in v 1.6
  // +optional
  optional string owner = 3;

  // DeprecatedRepository refers to GitHub repo name i.e. argo-events
  // Deprecated: use Repositories instead. Will be unsupported in v 1.6
  // +optional
  optional string repository = 4;

  // Events refer to Github events to which the event source will subscribe
  repeated string events = 5;

  // APIToken refers to a K8s secret containing github api token
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector apiToken = 6;

  // WebhookSecret refers to K8s secret containing GitHub webhook secret
  // https://developer.github.com/webhooks/securing/
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector webhookSecret = 7;

  // Insecure tls verification
  optional bool insecure = 8;

  // Active refers to status of the webhook for event deliveries.
  // https://developer.github.com/webhooks/creating/#active
  // +optional
  optional bool active = 9;

  // ContentType of the event delivery
  optional string contentType = 10;

  // GitHub base URL (for GitHub Enterprise)
  // +optional
  optional string githubBaseURL = 11;

  // GitHub upload URL (for GitHub Enterprise)
  // +optional
  optional string githubUploadURL = 12;

  // DeleteHookOnFinish determines whether to delete the GitHub hook for the repository once the event source is stopped.
  // +optional
  optional bool deleteHookOnFinish = 13;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 14;

  // Repositories holds the information of repositories, which uses repo owner as the key,
  // and list of repo names as the value. Not required if Organizations is set.
  repeated OwnedRepositories repositories = 15;

  // Organizations holds the names of organizations (used for organization level webhooks). Not required if Repositories is set.
  repeated string organizations = 16;

  // GitHubApp holds the GitHub app credentials
  // +optional
  optional GithubAppCreds githubApp = 17;

  // Filter
  // +optional
  optional EventSourceFilter filter = 18;
}

// GitlabEventSource refers to event-source related to Gitlab events
message GitlabEventSource {
  // Webhook holds configuration to run a http server
  optional WebhookContext webhook = 1;

  // DeprecatedProjectID is the id of project for which integration needs to setup
  // Deprecated: use Projects instead. Will be unsupported in v 1.7
  // +optional
  optional string projectID = 2;

  // Events are gitlab event to listen to.
  // Refer https://github.com/xanzy/go-gitlab/blob/bf34eca5d13a9f4c3f501d8a97b8ac226d55e4d9/projects.go#L794.
  repeated string events = 3;

  // AccessToken references to k8 secret which holds the gitlab api access information
  optional k8s.io.api.core.v1.SecretKeySelector accessToken = 4;

  // EnableSSLVerification to enable ssl verification
  // +optional
  optional bool enableSSLVerification = 5;

  // GitlabBaseURL is the base URL for API requests to a custom endpoint
  optional string gitlabBaseURL = 6;

  // DeleteHookOnFinish determines whether to delete the GitLab hook for the project once the event source is stopped.
  // +optional
  optional bool deleteHookOnFinish = 8;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 9;

  // List of project IDs or project namespace paths like "whynowy/test". Projects and groups cannot be empty at the same time.
  // +optional
  repeated string projects = 10;

  // SecretToken references to k8 secret which holds the Secret Token used by webhook config
  optional k8s.io.api.core.v1.SecretKeySelector secretToken = 11;

  // Filter
  // +optional
  optional EventSourceFilter filter = 12;

  // List of group IDs or group name like "test".
  // Group level hook available in Premium and Ultimate Gitlab.
  // +optional
  repeated string groups = 13;
}

// HDFSEventSource refers to event-source for HDFS related events
message HDFSEventSource {
  optional WatchPathConfig watchPathConfig = 1;

  // Type of file operations to watch
  optional string type = 2;

  // CheckInterval is a string that describes an interval duration to check the directory state, e.g. 1s, 30m, 2h... (defaults to 1m)
  optional string checkInterval = 3;

  repeated string addresses = 4;

  // HDFSUser is the user to access HDFS file system.
  // It is ignored if either ccache or keytab is used.
  optional string hdfsUser = 5;

  // KrbCCacheSecret is the secret selector for Kerberos ccache
  // Either ccache or keytab can be set to use Kerberos.
  optional k8s.io.api.core.v1.SecretKeySelector krbCCacheSecret = 6;

  // KrbKeytabSecret is the secret selector for Kerberos keytab
  // Either ccache or keytab can be set to use Kerberos.
  optional k8s.io.api.core.v1.SecretKeySelector krbKeytabSecret = 7;

  // KrbUsername is the Kerberos username used with Kerberos keytab
  // It must be set if keytab is used.
  optional string krbUsername = 8;

  // KrbRealm is the Kerberos realm used with Kerberos keytab
  // It must be set if keytab is used.
  optional string krbRealm = 9;

  // KrbConfig is the configmap selector for Kerberos config as string
  // It must be set if either ccache or keytab is used.
  optional k8s.io.api.core.v1.ConfigMapKeySelector krbConfigConfigMap = 10;

  // KrbServicePrincipalName is the principal name of Kerberos service
  // It must be set if either ccache or keytab is used.
  optional string krbServicePrincipalName = 11;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 12;

  // Filter
  // +optional
  optional EventSourceFilter filter = 13;
}

// HTTPTrigger is the trigger for the HTTP request
message HTTPTrigger {
  // URL refers to the URL to send HTTP request to.
  optional string url = 1;

  repeated TriggerParameter payload = 2;

  // TLS configuration for the HTTP client.
  // +optional
  optional TLSConfig tls = 3;

  // Method refers to the type of the HTTP request.
  // Refer https://golang.org/src/net/http/method.go for more info.
  // Default value is POST.
  // +optional
  optional string method = 4;

  // Parameters is the list of key-value extracted from event's payload that are applied to
  // the HTTP trigger resource.
  repeated TriggerParameter parameters = 5;

  // Timeout refers to the HTTP request timeout in seconds.
  // Default value is 60 seconds.
  // +optional
  optional int64 timeout = 6;

  // BasicAuth configuration for the http request.
  // +optional
  optional BasicAuth basicAuth = 7;

  // Headers for the HTTP request.
  // +optional
  map<string, string> headers = 8;

  // Secure Headers stored in Kubernetes Secrets for the HTTP requests.
  // +optional
  repeated SecureHeader secureHeaders = 9;
}

message Int64OrString {
  optional int64 type = 1;

  optional int64 int64Val = 2;

  optional string strVal = 3;
}

// JetStreamBus holds the JetStream EventBus information
message JetStreamBus {
  // JetStream version, such as "2.7.3"
  optional string version = 1;

  // JetStream StatefulSet size
  // +kubebuilder:default=3
  optional int32 replicas = 2;

  // ContainerTemplate contains customized spec for Nats JetStream container
  // +optional
  optional ContainerTemplate containerTemplate = 3;

  // ReloaderContainerTemplate contains customized spec for config reloader container
  // +optional
  optional ContainerTemplate reloaderContainerTemplate = 4;

  // MetricsContainerTemplate contains customized spec for metrics container
  // +optional
  optional ContainerTemplate metricsContainerTemplate = 5;

  // +optional
  optional PersistenceStrategy persistence = 6;

  // Metadata sets the pods's metadata, i.e. annotations and labels
  optional Metadata metadata = 7;

  // NodeSelector is a selector which must be true for the pod to fit on a node.
  // Selector which must match a node's labels for the pod to be scheduled on that node.
  // More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  // +optional
  map<string, string> nodeSelector = 8;

  // If specified, the pod's tolerations.
  // +optional
  repeated k8s.io.api.core.v1.Toleration tolerations = 9;

  // SecurityContext holds pod-level security attributes and common container settings.
  // Optional: Defaults to empty.  See type description for default values of each field.
  // +optional
  optional k8s.io.api.core.v1.PodSecurityContext securityContext = 10;

  // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
  // If specified, these secrets will be passed to individual puller implementations for them to use. For example,
  // in the case of docker, only DockerConfig type secrets are honored.
  // More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
  // +optional
  // +patchMergeKey=name
  // +patchStrategy=merge
  repeated k8s.io.api.core.v1.LocalObjectReference imagePullSecrets = 11;

  // If specified, indicates the Redis pod's priority. "system-node-critical"
  // and "system-cluster-critical" are two special keywords which indicate the
  // highest priorities with the former being the highest priority. Any other
  // name must be defined by creating a PriorityClass object with that name.
  // If not specified, the pod priority will be default or zero if there is no
  // default.
  // More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  // +optional
  optional string priorityClassName = 12;

  // The priority value. Various system components use this field to find the
  // priority of the Redis pod. When Priority Admission Controller is enabled,
  // it prevents users from setting this field. The admission controller populates
  // this field from PriorityClassName.
  // The higher the value, the higher the priority.
  // More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  // +optional
  optional int32 priority = 13;

  // The pod's scheduling constraints
  // More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  // +optional
  optional k8s.io.api.core.v1.Affinity affinity = 14;

  // ServiceAccountName to apply to the StatefulSet
  // +optional
  optional string serviceAccountName = 15;

  // JetStream configuration, if not specified, global settings in controller-config will be used.
  // See https://docs.nats.io/running-a-nats-service/configuration#jetstream.
  // Only configure "max_memory_store" or "max_file_store", do not set "store_dir" as it has been hardcoded.
  // +optional
  optional string settings = 16;

  // Optional arguments to start nats-server. For example, "-D" to enable debugging output, "-DV" to enable debugging and tracing.
  // Check https://docs.nats.io/ for all the available arguments.
  // +optional
  repeated string startArgs = 17;

  // Optional configuration for the streams to be created in this JetStream service, if specified, it will be merged with the default configuration in controller-config.
  // It accepts a YAML format configuration, available fields include, "maxBytes", "maxMsgs", "maxAge" (e.g. 72h), "replicas" (1, 3, 5), "duplicates" (e.g. 5m),
  // "retention" (e.g. 0: Limits (default), 1: Interest, 2: WorkQueue), "Discard" (e.g. 0: DiscardOld (default), 1: DiscardNew).
  // +optional
  optional string streamConfig = 18;

  // Maximum number of bytes in a message payload, 0 means unlimited. Defaults to 1MB
  // +optional
  optional string maxPayload = 19;
}

message JetStreamConfig {
  // JetStream (Nats) URL
  optional string url = 1;

  // Secret for auth
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector accessSecret = 2;

  // +optional
  optional string streamConfig = 3;
}

// K8SResource represent arbitrary structured data.
message K8SResource {
  optional bytes value = 1;
}

// K8SResourcePolicy refers to the policy used to check the state of K8s based triggers using labels
message K8SResourcePolicy {
  // Labels required to identify whether a resource is in success state
  map<string, string> labels = 1;

  // Backoff before checking resource state
  optional Backoff backoff = 2;

  // ErrorOnBackoffTimeout determines whether sensor should transition to error state if the trigger policy is unable to determine
  // the state of the resource
  optional bool errorOnBackoffTimeout = 3;
}

// KafkaBus holds the KafkaBus EventBus information
message KafkaBus {
  // URL to kafka cluster, multiple URLs separated by comma
  optional string url = 1;

  // Topic name, defaults to {namespace_name}-{eventbus_name}
  // +optional
  optional string topic = 2;

  // Kafka version, sarama defaults to the oldest supported stable version
  // +optional
  optional string version = 3;

  // TLS configuration for the kafka client.
  // +optional
  optional TLSConfig tls = 4;

  // SASL configuration for the kafka client
  // +optional
  optional SASLConfig sasl = 5;

  // Consumer group for kafka client
  // +optional
  optional KafkaConsumerGroup consumerGroup = 6;
}

message KafkaConsumerGroup {
  // The name for the consumer group to use
  optional string groupName = 1;

  // When starting up a new group do we want to start from the oldest event (true) or the newest event (false), defaults to false
  // +optional
  optional bool oldest = 2;

  // Rebalance strategy can be one of: sticky, roundrobin, range. Range is the default.
  // +optional
  optional string rebalanceStrategy = 3;
}

// KafkaEventSource refers to event-source for Kafka related events
message KafkaEventSource {
  // URL to kafka cluster, multiple URLs separated by comma
  optional string url = 1;

  // Partition name
  // +optional
  optional string partition = 2;

  // Topic name
  optional string topic = 3;

  // Backoff holds parameters applied to connection.
  optional Backoff connectionBackoff = 4;

  // TLS configuration for the kafka client.
  // +optional
  optional TLSConfig tls = 5;

  // JSONBody specifies that all event body payload coming from this
  // source will be JSON
  // +optional
  optional bool jsonBody = 6;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 7;

  // Consumer group for kafka client
  // +optional
  optional KafkaConsumerGroup consumerGroup = 8;

  // Sets a limit on how many events get read from kafka per second.
  // +optional
  optional int64 limitEventsPerSecond = 9;

  // Specify what kafka version is being connected to enables certain features in sarama, defaults to 1.0.0
  // +optional
  optional string version = 10;

  // SASL configuration for the kafka client
  // +optional
  optional SASLConfig sasl = 11;

  // Filter
  // +optional
  optional EventSourceFilter filter = 12;

  // Yaml format Sarama config for Kafka connection.
  // It follows the struct of sarama.Config. See https://github.com/IBM/sarama/blob/main/config.go
  // e.g.
  //
  // consumer:
  //   fetch:
  //     min: 1
  // net:
  //   MaxOpenRequests: 5
  //
  // +optional
  optional string config = 13;
}

// KafkaTrigger refers to the specification of the Kafka trigger.
message KafkaTrigger {
  // URL of the Kafka broker, multiple URLs separated by comma.
  optional string url = 1;

  // Name of the topic.
  // More info at https://kafka.apache.org/documentation/#intro_topics
  optional string topic = 2;

  // +optional
  // DEPRECATED
  optional int32 partition = 3;

  // Parameters is the list of parameters that is applied to resolved Kafka trigger object.
  repeated TriggerParameter parameters = 4;

  // RequiredAcks used in producer to tell the broker how many replica acknowledgements
  // Defaults to 1 (Only wait for the leader to ack).
  // +optional.
  optional int32 requiredAcks = 5;

  // Compress determines whether to compress message or not.
  // Defaults to false.
  // If set to true, compresses message using snappy compression.
  // +optional
  optional bool compress = 6;

  // FlushFrequency refers to the frequency in milliseconds to flush batches.
  // Defaults to 500 milliseconds.
  // +optional
  optional int32 flushFrequency = 7;

  // TLS configuration for the Kafka producer.
  // +optional
  optional TLSConfig tls = 8;

  // Payload is the list of key-value extracted from an event payload to construct the request payload.
  repeated TriggerParameter payload = 9;

  // The partitioning key for the messages put on the Kafka topic.
  // +optional.
  optional string partitioningKey = 10;

  // Specify what kafka version is being connected to enables certain features in sarama, defaults to 1.0.0
  // +optional
  optional string version = 11;

  // SASL configuration for the kafka client
  // +optional
  optional SASLConfig sasl = 12;

  // Schema Registry configuration to producer message with avro format
  // +optional
  optional SchemaRegistryConfig schemaRegistry = 13;
}

message LogTrigger {
  // Only print messages every interval. Useful to prevent logging too much data for busy events.
  // +optional
  optional uint64 intervalSeconds = 1;
}

// MQTTEventSource refers to event-source for MQTT related events
message MQTTEventSource {
  // URL to connect to broker
  optional string url = 1;

  // Topic name
  optional string topic = 2;

  // ClientID is the id of the client
  optional string clientId = 3;

  // ConnectionBackoff holds backoff applied to connection.
  optional Backoff connectionBackoff = 4;

  // JSONBody specifies that all event body payload coming from this
  // source will be JSON
  // +optional
  optional bool jsonBody = 5;

  // TLS configuration for the mqtt client.
  // +optional
  optional TLSConfig tls = 6;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 7;

  // Filter
  // +optional
  optional EventSourceFilter filter = 8;

  // Auth hosts secret selectors for username and password
  // +optional
  optional BasicAuth auth = 9;
}

// Metadata holds the annotations and labels of an event source pod
message Metadata {
  map<string, string> annotations = 1;

  map<string, string> labels = 2;
}

// NATSAuth refers to the auth info for NATS EventSource
message NATSAuth {
  // Baisc auth with username and password
  // +optional
  optional BasicAuth basic = 1;

  // Token used to connect
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector token = 2;

  // NKey used to connect
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector nkey = 3;

  // credential used to connect
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector credential = 4;
}

// NATSBus holds the NATS eventbus information
message NATSBus {
  // Native means to bring up a native NATS service
  optional NativeStrategy native = 1;

  // Exotic holds an exotic NATS config
  optional NATSConfig exotic = 2;
}

// NATSConfig holds the config of NATS
message NATSConfig {
  // NATS streaming url
  optional string url = 1;

  // Cluster ID for nats streaming
  optional string clusterID = 2;

  // Auth strategy, default to AuthStrategyNone
  // +optional
  optional string auth = 3;

  // Secret for auth
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector accessSecret = 4;
}

// NATSEventsSource refers to event-source for NATS related events
message NATSEventsSource {
  // URL to connect to NATS cluster
  optional string url = 1;

  // Subject holds the name of the subject onto which messages are published
  optional string subject = 2;

  // ConnectionBackoff holds backoff applied to connection.
  optional Backoff connectionBackoff = 3;

  // JSONBody specifies that all event body payload coming from this
  // source will be JSON
  // +optional
  optional bool jsonBody = 4;

  // TLS configuration for the nats client.
  // +optional
  optional TLSConfig tls = 5;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 6;

  // Auth information
  // +optional
  optional NATSAuth auth = 7;

  // Filter
  // +optional
  optional EventSourceFilter filter = 8;

  // Queue is the name of the queue group to subscribe as if specified. Uses QueueSubscribe
  // logic to subscribe as queue group. If the queue is empty, uses default Subscribe logic.
  // +optional
  optional string queue = 9;
}

// NATSTrigger refers to the specification of the NATS trigger.
message NATSTrigger {
  // URL of the NATS cluster.
  optional string url = 1;

  // Name of the subject to put message on.
  optional string subject = 2;

  repeated TriggerParameter payload = 3;

  repeated TriggerParameter parameters = 4;

  // TLS configuration for the NATS producer.
  // +optional
  optional TLSConfig tls = 5;
}

// NSQEventSource describes the event source for NSQ PubSub
// More info at https://godoc.org/github.com/nsqio/go-nsq
message NSQEventSource {
  // HostAddress is the address of the host for NSQ lookup
  optional string hostAddress = 1;

  // Topic to subscribe to.
  optional string topic = 2;

  // Channel used for subscription
  optional string channel = 3;

  // Backoff holds parameters applied to connection.
  // +optional
  optional Backoff connectionBackoff = 4;

  // JSONBody specifies that all event body payload coming from this
  // source will be JSON
  // +optional
  optional bool jsonBody = 5;

  // TLS configuration for the nsq client.
  // +optional
  optional TLSConfig tls = 6;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 7;

  // Filter
  // +optional
  optional EventSourceFilter filter = 8;
}

// NativeStrategy indicates to install a native NATS service
message NativeStrategy {
  // Size is the NATS StatefulSet size
  optional int32 replicas = 1;

  optional string auth = 2;

  // +optional
  optional PersistenceStrategy persistence = 3;

  // ContainerTemplate contains customized spec for NATS container
  // +optional
  optional ContainerTemplate containerTemplate = 4;

  // MetricsContainerTemplate contains customized spec for metrics container
  // +optional
  optional ContainerTemplate metricsContainerTemplate = 5;

  // NodeSelector is a selector which must be true for the pod to fit on a node.
  // Selector which must match a node's labels for the pod to be scheduled on that node.
  // More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  // +optional
  map<string, string> nodeSelector = 6;

  // If specified, the pod's tolerations.
  // +optional
  repeated k8s.io.api.core.v1.Toleration tolerations = 7;

  // Metadata sets the pods's metadata, i.e. annotations and labels
  optional Metadata metadata = 8;

  // SecurityContext holds pod-level security attributes and common container settings.
  // Optional: Defaults to empty.  See type description for default values of each field.
  // +optional
  optional k8s.io.api.core.v1.PodSecurityContext securityContext = 9;

  // Max Age of existing messages, i.e. "72h", “4h35m”
  // +optional
  optional string maxAge = 10;

  // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
  // If specified, these secrets will be passed to individual puller implementations for them to use. For example,
  // in the case of docker, only DockerConfig type secrets are honored.
  // More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
  // +optional
  // +patchMergeKey=name
  // +patchStrategy=merge
  repeated k8s.io.api.core.v1.LocalObjectReference imagePullSecrets = 11;

  // ServiceAccountName to apply to NATS StatefulSet
  // +optional
  optional string serviceAccountName = 12;

  // If specified, indicates the EventSource pod's priority. "system-node-critical"
  // and "system-cluster-critical" are two special keywords which indicate the
  // highest priorities with the former being the highest priority. Any other
  // name must be defined by creating a PriorityClass object with that name.
  // If not specified, the pod priority will be default or zero if there is no
  // default.
  // More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  // +optional
  optional string priorityClassName = 13;

  // The priority value. Various system components use this field to find the
  // priority of the EventSource pod. When Priority Admission Controller is enabled,
  // it prevents users from setting this field. The admission controller populates
  // this field from PriorityClassName.
  // The higher the value, the higher the priority.
  // More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  // +optional
  optional int32 priority = 14;

  // The pod's scheduling constraints
  // More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  // +optional
  optional k8s.io.api.core.v1.Affinity affinity = 15;

  // Maximum number of messages per channel, 0 means unlimited. Defaults to 1000000
  optional uint64 maxMsgs = 16;

  // Total size of messages per channel, 0 means unlimited. Defaults to 1GB
  optional string maxBytes = 17;

  // Maximum number of subscriptions per channel, 0 means unlimited. Defaults to 1000
  optional uint64 maxSubs = 18;

  // Maximum number of bytes in a message payload, 0 means unlimited. Defaults to 1MB
  optional string maxPayload = 19;

  // Specifies the time in follower state without a leader before attempting an election, i.e. "72h", “4h35m”. Defaults to 2s
  optional string raftHeartbeatTimeout = 20;

  // Specifies the time in candidate state without a leader before attempting an election, i.e. "72h", “4h35m”. Defaults to 2s
  optional string raftElectionTimeout = 21;

  // Specifies how long a leader waits without being able to contact a quorum of nodes before stepping down as leader, i.e. "72h", “4h35m”. Defaults to 1s
  optional string raftLeaseTimeout = 22;

  // Specifies the time without an Apply() operation before sending an heartbeat to ensure timely commit, i.e. "72h", “4h35m”. Defaults to 100ms
  optional string raftCommitTimeout = 23;
}

// OpenWhiskTrigger refers to the specification of the OpenWhisk trigger.
message OpenWhiskTrigger {
  // Host URL of the OpenWhisk.
  optional string host = 1;

  // Version for the API.
  // Defaults to v1.
  // +optional
  optional string version = 2;

  // Namespace for the action.
  // Defaults to "_".
  // +optional.
  optional string namespace = 3;

  // AuthToken for authentication.
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector authToken = 4;

  // Name of the action/function.
  optional string actionName = 5;

  // Payload is the list of key-value extracted from an event payload to construct the request payload.
  repeated TriggerParameter payload = 6;

  // Parameters is the list of key-value extracted from event's payload that are applied to
  // the trigger resource.
  // +optional
  repeated TriggerParameter parameters = 7;
}

message OwnedRepositories {
  // Organization or user name
  optional string owner = 1;

  // Repository names
  repeated string names = 2;
}

// PayloadField binds a value at path within the event payload against a name.
message PayloadField {
  // Path is the JSONPath of the event's (JSON decoded) data key
  // Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'.
  // To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'.
  // See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
  optional string path = 1;

  // Name acts as key that holds the value at the path.
  optional string name = 2;
}

// PersistenceStrategy defines the strategy of persistence
message PersistenceStrategy {
  // Name of the StorageClass required by the claim.
  // More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
  // +optional
  optional string storageClassName = 1;

  // Available access modes such as ReadWriteOnce, ReadWriteMany
  // https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes
  // +optional
  optional string accessMode = 2;

  // Volume size, e.g. 10Gi
  optional k8s.io.apimachinery.pkg.api.resource.Quantity volumeSize = 3;
}

// PubSubEventSource refers to event-source for GCP PubSub related events.
message PubSubEventSource {
  // ProjectID is GCP project ID for the subscription.
  // Required if you run Argo Events outside of GKE/GCE.
  // (otherwise, the default value is its project)
  // +optional
  optional string projectID = 1;

  // TopicProjectID is GCP project ID for the topic.
  // By default, it is same as ProjectID.
  // +optional
  optional string topicProjectID = 2;

  // Topic to which the subscription should belongs.
  // Required if you want the eventsource to create a new subscription.
  // If you specify this field along with an existing subscription,
  // it will be verified whether it actually belongs to the specified topic.
  // +optional
  optional string topic = 3;

  // SubscriptionID is ID of subscription.
  // Required if you use existing subscription.
  // The default value will be auto generated hash based on this eventsource setting, so the subscription
  // might be recreated every time you update the setting, which has a possibility of event loss.
  // +optional
  optional string subscriptionID = 4;

  // CredentialSecret references to the secret that contains JSON credentials to access GCP.
  // If it is missing, it implicitly uses Workload Identity to access.
  // https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector credentialSecret = 5;

  // DeleteSubscriptionOnFinish determines whether to delete the GCP PubSub subscription once the event source is stopped.
  // +optional
  optional bool deleteSubscriptionOnFinish = 6;

  // JSONBody specifies that all event body payload coming from this
  // source will be JSON
  // +optional
  optional bool jsonBody = 7;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 8;

  // Filter
  // +optional
  optional EventSourceFilter filter = 9;
}

// PulsarEventSource describes the event source for Apache Pulsar
message PulsarEventSource {
  // Name of the topics to subscribe to.
  // +required
  repeated string topics = 1;

  // Type of the subscription.
  // Only "exclusive" and "shared" is supported.
  // Defaults to exclusive.
  // +optional
  optional string type = 2;

  // Configure the service URL for the Pulsar service.
  // +required
  optional string url = 3;

  // Trusted TLS certificate secret.
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector tlsTrustCertsSecret = 4;

  // Whether the Pulsar client accept untrusted TLS certificate from broker.
  // +optional
  optional bool tlsAllowInsecureConnection = 5;

  // Whether the Pulsar client verify the validity of the host name from broker.
  // +optional
  optional bool tlsValidateHostname = 6;

  // TLS configuration for the pulsar client.
  // +optional
  optional TLSConfig tls = 7;

  // Backoff holds parameters applied to connection.
  // +optional
  optional Backoff connectionBackoff = 8;

  // JSONBody specifies that all event body payload coming from this
  // source will be JSON
  // +optional
  optional bool jsonBody = 9;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 10;

  // Authentication token for the pulsar client.
  // Either token or athenz can be set to use auth.
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector authTokenSecret = 11;

  // Filter
  // +optional
  optional EventSourceFilter filter = 12;

  // Authentication athenz parameters for the pulsar client.
  // Refer https://github.com/apache/pulsar-client-go/blob/master/pulsar/auth/athenz.go
  // Either token or athenz can be set to use auth.
  // +optional
  map<string, string> authAthenzParams = 13;

  // Authentication athenz privateKey secret for the pulsar client.
  // AuthAthenzSecret must be set if AuthAthenzParams is used.
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector authAthenzSecret = 14;
}

// PulsarTrigger refers to the specification of the Pulsar trigger.
message PulsarTrigger {
  // Configure the service URL for the Pulsar service.
  // +required
  optional string url = 1;

  // Name of the topic.
  // See https://pulsar.apache.org/docs/en/concepts-messaging/
  optional string topic = 2;

  // Parameters is the list of parameters that is applied to resolved Kafka trigger object.
  repeated TriggerParameter parameters = 3;

  // Payload is the list of key-value extracted from an event payload to construct the request payload.
  repeated TriggerParameter payload = 4;

  // Trusted TLS certificate secret.
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector tlsTrustCertsSecret = 5;

  // Whether the Pulsar client accept untrusted TLS certificate from broker.
  // +optional
  optional bool tlsAllowInsecureConnection = 6;

  // Whether the Pulsar client verify the validity of the host name from broker.
  // +optional
  optional bool tlsValidateHostname = 7;

  // TLS configuration for the pulsar client.
  // +optional
  optional TLSConfig tls = 8;

  // Authentication token for the pulsar client.
  // Either token or athenz can be set to use auth.
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector authTokenSecret = 9;

  // Backoff holds parameters applied to connection.
  // +optional
  optional Backoff connectionBackoff = 10;

  // Authentication athenz parameters for the pulsar client.
  // Refer https://github.com/apache/pulsar-client-go/blob/master/pulsar/auth/athenz.go
  // Either token or athenz can be set to use auth.
  // +optional
  map<string, string> authAthenzParams = 11;

  // Authentication athenz privateKey secret for the pulsar client.
  // AuthAthenzSecret must be set if AuthAthenzParams is used.
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector authAthenzSecret = 12;
}

message RateLimit {
  // Defaults to Second
  optional string unit = 1;

  optional int32 requestsPerUnit = 2;
}

// RedisEventSource describes an event source for the Redis PubSub.
// More info at https://godoc.org/github.com/go-redis/redis#example-PubSub
message RedisEventSource {
  // HostAddress refers to the address of the Redis host/server
  optional string hostAddress = 1;

  // Password required for authentication if any.
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector password = 2;

  // Namespace to use to retrieve the password from. It should only be specified if password is declared
  // +optional
  optional string namespace = 3;

  // DB to use. If not specified, default DB 0 will be used.
  // +optional
  optional int32 db = 4;

  repeated string channels = 5;

  // TLS configuration for the redis client.
  // +optional
  optional TLSConfig tls = 6;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 7;

  // Filter
  // +optional
  optional EventSourceFilter filter = 8;

  // JSONBody specifies that all event body payload coming from this
  // source will be JSON
  // +optional
  optional bool jsonBody = 9;

  // Username required for ACL style authentication if any.
  // +optional
  optional string username = 10;
}

// RedisStreamEventSource describes an event source for
// Redis streams (https://redis.io/topics/streams-intro)
message RedisStreamEventSource {
  // HostAddress refers to the address of the Redis host/server (master instance)
  optional string hostAddress = 1;

  // Password required for authentication if any.
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector password = 2;

  // DB to use. If not specified, default DB 0 will be used.
  // +optional
  optional int32 db = 3;

  // Streams to look for entries. XREADGROUP is used on all streams using a single consumer group.
  repeated string streams = 4;

  // MaxMsgCountPerRead holds the maximum number of messages per stream that will be read in each XREADGROUP of all streams
  // Example: if there are 2 streams and MaxMsgCountPerRead=10, then each XREADGROUP may read upto a total of 20 messages.
  // Same as COUNT option in XREADGROUP(https://redis.io/topics/streams-intro). Defaults to 10
  // +optional
  optional int32 maxMsgCountPerRead = 5;

  // ConsumerGroup refers to the Redis stream consumer group that will be
  // created on all redis streams. Messages are read through this group. Defaults to 'argo-events-cg'
  // +optional
  optional string consumerGroup = 6;

  // TLS configuration for the redis client.
  // +optional
  optional TLSConfig tls = 7;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 8;

  // Filter
  // +optional
  optional EventSourceFilter filter = 9;

  // Username required for ACL style authentication if any.
  // +optional
  optional string username = 10;
}

// ResourceEventSource refers to a event-source for K8s resource related events.
message ResourceEventSource {
  // Namespace where resource is deployed
  optional string namespace = 1;

  // Filter is applied on the metadata of the resource
  // If you apply filter, then the internal event informer will only monitor objects that pass the filter.
  // +optional
  optional ResourceFilter filter = 2;

  // Group of the resource
  optional k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource groupVersionResource = 3;

  // EventTypes is the list of event type to watch.
  // Possible values are - ADD, UPDATE and DELETE.
  repeated string eventTypes = 4;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 5;
}

// ResourceFilter contains K8s ObjectMeta information to further filter resource event objects
message ResourceFilter {
  // Prefix filter is applied on the resource name.
  // +optional
  optional string prefix = 1;

  // Labels provide listing options to K8s API to watch resource/s.
  // Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/label-selectors/ for more info.
  // Unlike K8s field selector, multiple values are passed as comma separated values instead of list of values.
  // Eg: value: value1,value2.
  // Same as K8s label selector, operator "=", "==", "!=", "exists", "!", "notin", "in", "gt" and "lt"
  // are supported
  // +optional
  repeated Selector labels = 2;

  // Fields provide field filters similar to K8s field selector
  // (see https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/).
  // Unlike K8s field selector, it supports arbitrary fileds like "spec.serviceAccountName",
  // and the value could be a string or a regex.
  // Same as K8s field selector, operator "=", "==" and "!=" are supported.
  // +optional
  repeated Selector fields = 3;

  // If resource is created before the specified time then the event is treated as valid.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time createdBy = 4;

  // If the resource is created after the start time then the event is treated as valid.
  // +optional
  optional bool afterStart = 5;
}

// S3Artifact contains information about an S3 connection and bucket
message S3Artifact {
  optional string endpoint = 1;

  optional S3Bucket bucket = 2;

  optional string region = 3;

  optional bool insecure = 4;

  optional k8s.io.api.core.v1.SecretKeySelector accessKey = 5;

  optional k8s.io.api.core.v1.SecretKeySelector secretKey = 6;

  repeated string events = 7;

  optional S3Filter filter = 8;

  map<string, string> metadata = 9;

  optional k8s.io.api.core.v1.SecretKeySelector caCertificate = 10;
}

// S3Bucket contains information to describe an S3 Bucket
message S3Bucket {
  optional string key = 1;

  optional string name = 2;
}

// S3Filter represents filters to apply to bucket notifications for specifying constraints on objects
message S3Filter {
  optional string prefix = 1;

  optional string suffix = 2;
}

// SASLConfig refers to SASL configuration for a client
message SASLConfig {
  // SASLMechanism is the name of the enabled SASL mechanism.
  // Possible values: OAUTHBEARER, PLAIN (defaults to PLAIN).
  // +optional
  optional string mechanism = 1;

  // User is the authentication identity (authcid) to present for
  // SASL/PLAIN or SASL/SCRAM authentication
  optional k8s.io.api.core.v1.SecretKeySelector userSecret = 2;

  // Password for SASL/PLAIN authentication
  optional k8s.io.api.core.v1.SecretKeySelector passwordSecret = 3;
}

// SFTPEventSource describes an event-source for sftp related events.
message SFTPEventSource {
  // Type of file operations to watch
  // Refer https://github.com/fsnotify/fsnotify/blob/master/fsnotify.go for more information
  optional string eventType = 1;

  // WatchPathConfig contains configuration about the file path to watch
  optional WatchPathConfig watchPathConfig = 2;

  // Username required for authentication if any.
  optional k8s.io.api.core.v1.SecretKeySelector username = 3;

  // Password required for authentication if any.
  optional k8s.io.api.core.v1.SecretKeySelector password = 4;

  // SSHKeySecret refers to the secret that contains SSH key. Key needs to contain private key and public key.
  optional k8s.io.api.core.v1.SecretKeySelector sshKeySecret = 5;

  // Address sftp address.
  optional k8s.io.api.core.v1.SecretKeySelector address = 6;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 7;

  // Filter
  // +optional
  optional EventSourceFilter filter = 8;

  // PollIntervalDuration the interval at which to poll the SFTP server
  // defaults to 10 seconds
  // +optional
  optional string pollIntervalDuration = 9;
}

// SNSEventSource refers to event-source for AWS SNS related events
message SNSEventSource {
  // Webhook configuration for http server
  optional WebhookContext webhook = 1;

  // TopicArn
  optional string topicArn = 2;

  // AccessKey refers K8s secret containing aws access key
  optional k8s.io.api.core.v1.SecretKeySelector accessKey = 3;

  // SecretKey refers K8s secret containing aws secret key
  optional k8s.io.api.core.v1.SecretKeySelector secretKey = 4;

  // Region is AWS region
  optional string region = 5;

  // RoleARN is the Amazon Resource Name (ARN) of the role to assume.
  // +optional
  optional string roleARN = 6;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 7;

  // ValidateSignature is boolean that can be set to true for SNS signature verification
  // +optional
  optional bool validateSignature = 8;

  // Filter
  // +optional
  optional EventSourceFilter filter = 9;

  // Endpoint configures connection to a specific SNS endpoint instead of Amazons servers
  // +optional
  optional string endpoint = 10;
}

// SQSEventSource refers to event-source for AWS SQS related events
message SQSEventSource {
  // AccessKey refers K8s secret containing aws access key
  optional k8s.io.api.core.v1.SecretKeySelector accessKey = 1;

  // SecretKey refers K8s secret containing aws secret key
  optional k8s.io.api.core.v1.SecretKeySelector secretKey = 2;

  // Region is AWS region
  optional string region = 3;

  // Queue is AWS SQS queue to listen to for messages
  optional string queue = 4;

  // WaitTimeSeconds is The duration (in seconds) for which the call waits for a message to arrive
  // in the queue before returning.
  optional int64 waitTimeSeconds = 5;

  // RoleARN is the Amazon Resource Name (ARN) of the role to assume.
  // +optional
  optional string roleARN = 6;

  // JSONBody specifies that all event body payload coming from this
  // source will be JSON
  // +optional
  optional bool jsonBody = 7;

  // QueueAccountID is the ID of the account that created the queue to monitor
  // +optional
  optional string queueAccountId = 8;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 9;

  // DLQ specifies if a dead-letter queue is configured for messages that can't be processed successfully.
  // If set to true, messages with invalid payload won't be acknowledged to allow to forward them farther to the dead-letter queue.
  // The default value is false.
  // +optional
  optional bool dlq = 10;

  // Filter
  // +optional
  optional EventSourceFilter filter = 11;

  // Endpoint configures connection to a specific SQS endpoint instead of Amazons servers
  // +optional
  optional string endpoint = 12;

  // SessionToken refers to K8s secret containing AWS temporary credentials(STS) session token
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector sessionToken = 13;
}

// SchemaRegistryConfig refers to configuration for a client
message SchemaRegistryConfig {
  // Schema Registry URL.
  optional string url = 1;

  // Schema ID
  optional int32 schemaId = 2;

  // +optional
  // SchemaRegistry - basic authentication
  optional BasicAuth auth = 3;
}

// SecureHeader refers to HTTP Headers with auth tokens as values
message SecureHeader {
  optional string name = 1;

  // Values can be read from either secrets or configmaps
  optional ValueFromSource valueFrom = 2;
}

// Selector represents conditional operation to select K8s objects.
message Selector {
  // Key name
  optional string key = 1;

  // Supported operations like ==, != etc.
  // Defaults to ==.
  // Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors for more info.
  // +optional
  optional string operation = 2;

  // Value
  optional string value = 3;
}

// Sensor is the definition of a sensor resource
// +genclient
// +genclient:noStatus
// +kubebuilder:resource:shortName=sn
// +kubebuilder:subresource:status
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
message Sensor {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SensorSpec spec = 2;

  // +optional
  optional SensorStatus status = 3;
}

// SensorList is the list of Sensor resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message SensorList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Sensor items = 2;
}

// SensorSpec represents desired sensor state
message SensorSpec {
  // Dependencies is a list of the events that this sensor is dependent on.
  repeated EventDependency dependencies = 1;

  // Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.
  repeated Trigger triggers = 2;

  // Template is the pod specification for the sensor
  // +optional
  optional Template template = 3;

  // ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger round fails.
  // Once sensor state is set to `error`, no further triggers will be processed.
  optional bool errorOnFailedRound = 4;

  // EventBusName references to a EventBus name. By default the value is "default"
  optional string eventBusName = 5;

  // Replicas is the sensor deployment replicas
  optional int32 replicas = 6;

  // RevisionHistoryLimit specifies how many old deployment revisions to retain
  // +optional
  optional int32 revisionHistoryLimit = 7;

  // LoggingFields add additional key-value pairs when logging happens
  // +optional
  map<string, string> loggingFields = 8;
}

// SensorStatus contains information about the status of a sensor.
message SensorStatus {
  optional Status status = 1;
}

// Service holds the service information eventsource exposes
message Service {
  // The list of ports that are exposed by this ClusterIP service.
  // +patchMergeKey=port
  // +patchStrategy=merge
  // +listType=map
  // +listMapKey=port
  // +listMapKey=protocol
  repeated k8s.io.api.core.v1.ServicePort ports = 1;

  // clusterIP is the IP address of the service and is usually assigned
  // randomly by the master. If an address is specified manually and is not in
  // use by others, it will be allocated to the service; otherwise, creation
  // of the service will fail. This field can not be changed through updates.
  // Valid values are "None", empty string (""), or a valid IP address. "None"
  // can be specified for headless services when proxying is not required.
  // More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  // +optional
  optional string clusterIP = 2;
}

// SlackEventSource refers to event-source for Slack related events
message SlackEventSource {
  // Slack App signing secret
  optional k8s.io.api.core.v1.SecretKeySelector signingSecret = 1;

  // Token for URL verification handshake
  optional k8s.io.api.core.v1.SecretKeySelector token = 2;

  // Webhook holds configuration for a REST endpoint
  optional WebhookContext webhook = 3;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 4;

  // Filter
  // +optional
  optional EventSourceFilter filter = 5;
}

message SlackSender {
  // Username is the Slack application's username
  // +optional
  optional string username = 1;

  // Icon is the Slack application's icon, e.g. :robot_face: or https://example.com/image.png
  // +optional
  optional string icon = 2;
}

message SlackThread {
  // MessageAggregationKey allows to aggregate the messages to a thread by some key.
  // +optional
  optional string messageAggregationKey = 1;

  // BroadcastMessageToChannel allows to also broadcast the message from the thread to the channel
  // +optional
  optional bool broadcastMessageToChannel = 2;
}

// SlackTrigger refers to the specification of the slack notification trigger.
message SlackTrigger {
  // Parameters is the list of key-value extracted from event's payload that are applied to
  // the trigger resource.
  // +optional
  repeated TriggerParameter parameters = 1;

  // SlackToken refers to the Kubernetes secret that holds the slack token required to send messages.
  optional k8s.io.api.core.v1.SecretKeySelector slackToken = 2;

  // Channel refers to which Slack channel to send Slack message.
  // +optional
  optional string channel = 3;

  // Message refers to the message to send to the Slack channel.
  // +optional
  optional string message = 4;

  // Attachments is a JSON format string that represents an array of Slack attachments according to the attachments API: https://api.slack.com/reference/messaging/attachments .
  // +optional
  optional string attachments = 5;

  // Blocks is a JSON format string that represents an array of Slack blocks according to the blocks API: https://api.slack.com/reference/block-kit/blocks .
  // +optional
  optional string blocks = 6;

  // Thread refers to additional options for sending messages to a Slack thread.
  // +optional
  optional SlackThread thread = 7;

  // Sender refers to additional configuration of the Slack application that sends the message.
  // +optional
  optional SlackSender sender = 8;
}

// StandardK8STrigger is the standard Kubernetes resource trigger
message StandardK8STrigger {
  // Source of the K8s resource file(s)
  optional ArtifactLocation source = 1;

  // Operation refers to the type of operation performed on the k8s resource.
  // Default value is Create.
  // +optional
  optional string operation = 2;

  // Parameters is the list of parameters that is applied to resolved K8s trigger object.
  repeated TriggerParameter parameters = 3;

  // PatchStrategy controls the K8s object patching strategy when the trigger operation is specified as patch.
  // possible values:
  // "application/json-patch+json"
  // "application/merge-patch+json"
  // "application/strategic-merge-patch+json"
  // "application/apply-patch+yaml".
  // Defaults to "application/merge-patch+json"
  // +optional
  optional string patchStrategy = 4;

  // LiveObject specifies whether the resource should be directly fetched from K8s instead
  // of being marshaled from the resource artifact. If set to true, the resource artifact
  // must contain the information required to uniquely identify the resource in the cluster,
  // that is, you must specify "apiVersion", "kind" as well as "name" and "namespace" meta
  // data.
  // Only valid for operation type `update`
  // +optional
  optional bool liveObject = 5;
}

// Status is a common structure which can be used for Status field.
message Status {
  // Conditions are the latest available observations of a resource's current state.
  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated Condition conditions = 1;
}

// StatusPolicy refers to the policy used to check the state of the trigger using response status
message StatusPolicy {
  repeated int32 allow = 1;
}

// StorageGridEventSource refers to event-source for StorageGrid related events
message StorageGridEventSource {
  // Webhook holds configuration for a REST endpoint
  optional WebhookContext webhook = 1;

  repeated string events = 2;

  // Filter on object key which caused the notification.
  optional StorageGridFilter filter = 3;

  // TopicArn
  optional string topicArn = 4;

  // Name of the bucket to register notifications for.
  optional string bucket = 5;

  // S3 region.
  // Defaults to us-east-1
  // +optional
  optional string region = 6;

  // Auth token for storagegrid api
  optional k8s.io.api.core.v1.SecretKeySelector authToken = 7;

  // APIURL is the url of the storagegrid api.
  optional string apiURL = 8;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 9;
}

// StorageGridFilter represents filters to apply to bucket notifications for specifying constraints on objects
// +k8s:openapi-gen=true
message StorageGridFilter {
  optional string prefix = 1;

  optional string suffix = 2;
}

// StripeEventSource describes the event source for stripe webhook notifications
// More info at https://stripe.com/docs/webhooks
message StripeEventSource {
  // Webhook holds configuration for a REST endpoint
  optional WebhookContext webhook = 1;

  // CreateWebhook if specified creates a new webhook programmatically.
  // +optional
  optional bool createWebhook = 2;

  // APIKey refers to K8s secret that holds Stripe API key. Used only if CreateWebhook is enabled.
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector apiKey = 3;

  // EventFilter describes the type of events to listen to. If not specified, all types of events will be processed.
  // More info at https://stripe.com/docs/api/events/list
  // +optional
  repeated string eventFilter = 4;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 5;
}

// TLSConfig refers to TLS configuration for a client.
message TLSConfig {
  // CACertSecret refers to the secret that contains the CA cert
  optional k8s.io.api.core.v1.SecretKeySelector caCertSecret = 1;

  // ClientCertSecret refers to the secret that contains the client cert
  optional k8s.io.api.core.v1.SecretKeySelector clientCertSecret = 2;

  // ClientKeySecret refers to the secret that contains the client key
  optional k8s.io.api.core.v1.SecretKeySelector clientKeySecret = 3;

  // If true, skips creation of TLSConfig with certs and creates an empty TLSConfig. (Defaults to false)
  // +optional
  optional bool insecureSkipVerify = 4;
}

// Template holds the information of a deployment template
message Template {
  // Metadata sets the pods's metadata, i.e. annotations and labels
  optional Metadata metadata = 1;

  // ServiceAccountName is the name of the ServiceAccount to use to run sensor pod.
  // More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  // +optional
  optional string serviceAccountName = 2;

  // Container is the main container image to run in the sensor pod
  // +optional
  optional k8s.io.api.core.v1.Container container = 3;

  // Volumes is a list of volumes that can be mounted by containers in a workflow.
  // +patchStrategy=merge
  // +patchMergeKey=name
  // +optional
  repeated k8s.io.api.core.v1.Volume volumes = 4;

  // SecurityContext holds pod-level security attributes and common container settings.
  // Optional: Defaults to empty.  See type description for default values of each field.
  // +optional
  optional k8s.io.api.core.v1.PodSecurityContext securityContext = 5;

  // NodeSelector is a selector which must be true for the pod to fit on a node.
  // Selector which must match a node's labels for the pod to be scheduled on that node.
  // More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  // +optional
  map<string, string> nodeSelector = 6;

  // If specified, the pod's tolerations.
  // +optional
  repeated k8s.io.api.core.v1.Toleration tolerations = 7;

  // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
  // If specified, these secrets will be passed to individual puller implementations for them to use. For example,
  // in the case of docker, only DockerConfig type secrets are honored.
  // More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
  // +optional
  // +patchMergeKey=name
  // +patchStrategy=merge
  repeated k8s.io.api.core.v1.LocalObjectReference imagePullSecrets = 8;

  // If specified, indicates the EventSource pod's priority. "system-node-critical"
  // and "system-cluster-critical" are two special keywords which indicate the
  // highest priorities with the former being the highest priority. Any other
  // name must be defined by creating a PriorityClass object with that name.
  // If not specified, the pod priority will be default or zero if there is no
  // default.
  // More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  // +optional
  optional string priorityClassName = 9;

  // The priority value. Various system components use this field to find the
  // priority of the EventSource pod. When Priority Admission Controller is enabled,
  // it prevents users from setting this field. The admission controller populates
  // this field from PriorityClassName.
  // The higher the value, the higher the priority.
  // More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  // +optional
  optional int32 priority = 10;

  // If specified, the pod's scheduling constraints
  // +optional
  optional k8s.io.api.core.v1.Affinity affinity = 11;
}

// TimeFilter describes a window in time.
// It filters out events that occur outside the time limits.
// In other words, only events that occur after Start and before Stop
// will pass this filter.
message TimeFilter {
  // Start is the beginning of a time window in UTC.
  // Before this time, events for this dependency are ignored.
  // Format is hh:mm:ss.
  optional string start = 1;

  // Stop is the end of a time window in UTC.
  // After or equal to this time, events for this dependency are ignored and
  // Format is hh:mm:ss.
  // If it is smaller than Start, it is treated as next day of Start
  // (e.g.: 22:00:00-01:00:00 means 22:00:00-25:00:00).
  optional string stop = 2;
}

// Trigger is an action taken, output produced, an event created, a message sent
message Trigger {
  // Template describes the trigger specification.
  optional TriggerTemplate template = 1;

  // Parameters is the list of parameters applied to the trigger template definition
  repeated TriggerParameter parameters = 2;

  // Policy to configure backoff and execution criteria for the trigger
  // +optional
  optional TriggerPolicy policy = 3;

  // Retry strategy, defaults to no retry
  // +optional
  optional Backoff retryStrategy = 4;

  // Rate limit, default unit is Second
  // +optional
  optional RateLimit rateLimit = 5;

  // AtLeastOnce determines the trigger execution semantics.
  // Defaults to false. Trigger execution will use at-most-once semantics.
  // If set to true, Trigger execution will switch to at-least-once semantics.
  // +kubebuilder:default=false
  // +optional
  optional bool atLeastOnce = 6;

  // If the trigger fails, it will retry up to the configured number of
  // retries. If the maximum retries are reached and the trigger is set to
  // execute atLeastOnce, the dead letter queue (DLQ) trigger will be invoked if
  // specified.  Invoking the dead letter queue trigger helps prevent data
  // loss.
  // +optional
  optional Trigger dlqTrigger = 7;
}

// TriggerParameter indicates a passed parameter to a service template
message TriggerParameter {
  // Src contains a source reference to the value of the parameter from a dependency
  optional TriggerParameterSource src = 1;

  // Dest is the JSONPath of a resource key.
  // A path is a series of keys separated by a dot. The colon character can be escaped with '.'
  // The -1 key can be used to append a value to an existing array.
  // See https://github.com/tidwall/sjson#path-syntax for more information about how this is used.
  optional string dest = 2;

  // Operation is what to do with the existing value at Dest, whether to
  // 'prepend', 'overwrite', or 'append' it.
  optional string operation = 3;
}

// TriggerParameterSource defines the source for a parameter from a event event
message TriggerParameterSource {
  // DependencyName refers to the name of the dependency. The event which is stored for this dependency is used as payload
  // for the parameterization. Make sure to refer to one of the dependencies you have defined under Dependencies list.
  optional string dependencyName = 1;

  // ContextKey is the JSONPath of the event's (JSON decoded) context key
  // ContextKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'.
  // To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'.
  // See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
  optional string contextKey = 2;

  // ContextTemplate is a go-template for extracting a string from the event's context.
  // If a ContextTemplate is provided with a ContextKey, the template will be evaluated first and fallback to the ContextKey.
  // The templating follows the standard go-template syntax as well as sprig's extra functions.
  // See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/
  optional string contextTemplate = 3;

  // DataKey is the JSONPath of the event's (JSON decoded) data key
  // DataKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'.
  // To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'.
  // See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
  optional string dataKey = 4;

  // DataTemplate is a go-template for extracting a string from the event's data.
  // If a DataTemplate is provided with a DataKey, the template will be evaluated first and fallback to the DataKey.
  // The templating follows the standard go-template syntax as well as sprig's extra functions.
  // See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/
  optional string dataTemplate = 5;

  // Value is the default literal value to use for this parameter source
  // This is only used if the DataKey is invalid.
  // If the DataKey is invalid and this is not defined, this param source will produce an error.
  optional string value = 6;

  // UseRawData indicates if the value in an event at data key should be used without converting to string.
  // When true, a number, boolean, json or string parameter may be extracted. When the field is unspecified, or explicitly
  // false, the behavior is to turn the extracted field into a string. (e.g. when set to true, the parameter
  // 123 will resolve to the numerical type, but when false, or not provided, the string "123" will be resolved)
  // +optional
  optional bool useRawData = 7;
}

// TriggerPolicy dictates the policy for the trigger retries
message TriggerPolicy {
  // K8SResourcePolicy refers to the policy used to check the state of K8s based triggers using using labels
  optional K8SResourcePolicy k8s = 1;

  // Status refers to the policy used to check the state of the trigger using response status
  optional StatusPolicy status = 2;
}

// TriggerTemplate is the template that describes trigger specification.
message TriggerTemplate {
  // Name is a unique name of the action to take.
  optional string name = 1;

  // Conditions is the conditions to execute the trigger.
  // For example: "(dep01 || dep02) && dep04"
  // +optional
  optional string conditions = 2;

  // StandardK8STrigger refers to the trigger designed to create or update a generic Kubernetes resource.
  // +optional
  optional StandardK8STrigger k8s = 3;

  // ArgoWorkflow refers to the trigger that can perform various operations on an Argo workflow.
  // +optional
  optional ArgoWorkflowTrigger argoWorkflow = 4;

  // HTTP refers to the trigger designed to dispatch a HTTP request with on-the-fly constructable payload.
  // +optional
  optional HTTPTrigger http = 5;

  // AWSLambda refers to the trigger designed to invoke AWS Lambda function with with on-the-fly constructable payload.
  // +optional
  optional AWSLambdaTrigger awsLambda = 6;

  // CustomTrigger refers to the trigger designed to connect to a gRPC trigger server and execute a custom trigger.
  // +optional
  optional CustomTrigger custom = 7;

  // Kafka refers to the trigger designed to place messages on Kafka topic.
  // +optional.
  optional KafkaTrigger kafka = 8;

  // NATS refers to the trigger designed to place message on NATS subject.
  // +optional.
  optional NATSTrigger nats = 9;

  // Slack refers to the trigger designed to send slack notification message.
  // +optional
  optional SlackTrigger slack = 10;

  // OpenWhisk refers to the trigger designed to invoke OpenWhisk action.
  // +optional
  optional OpenWhiskTrigger openWhisk = 11;

  // Log refers to the trigger designed to invoke log the event.
  // +optional
  optional LogTrigger log = 12;

  // AzureEventHubs refers to the trigger send an event to an Azure Event Hub.
  // +optional
  optional AzureEventHubsTrigger azureEventHubs = 13;

  // Pulsar refers to the trigger designed to place messages on Pulsar topic.
  // +optional
  optional PulsarTrigger pulsar = 14;

  // Criteria to reset the conditons
  // +optional
  repeated ConditionsResetCriteria conditionsReset = 15;

  // AzureServiceBus refers to the trigger designed to place messages on Azure Service Bus
  // +optional
  optional AzureServiceBusTrigger azureServiceBus = 16;

  // Email refers to the trigger designed to send an email notification
  // +optional
  optional EmailTrigger email = 17;
}

// URLArtifact contains information about an artifact at an http endpoint.
message URLArtifact {
  // Path is the complete URL
  optional string path = 1;

  // VerifyCert decides whether the connection is secure or not
  optional bool verifyCert = 2;
}

// ValueFromSource allows you to reference keys from either a Configmap or Secret
message ValueFromSource {
  optional k8s.io.api.core.v1.SecretKeySelector secretKeyRef = 1;

  optional k8s.io.api.core.v1.ConfigMapKeySelector configMapKeyRef = 2;
}

message WatchPathConfig {
  // Directory to watch for events
  optional string directory = 1;

  // Path is relative path of object to watch with respect to the directory
  optional string path = 2;

  // PathRegexp is regexp of relative path of object to watch with respect to the directory
  optional string pathRegexp = 3;
}

// WebhookContext holds a general purpose REST API context
message WebhookContext {
  // REST API endpoint
  optional string endpoint = 1;

  // Method is HTTP request method that indicates the desired action to be performed for a given resource.
  // See RFC7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content
  optional string method = 2;

  // Port on which HTTP server is listening for incoming events.
  optional string port = 3;

  // URL is the url of the server.
  optional string url = 4;

  // ServerCertPath refers the file that contains the cert.
  optional k8s.io.api.core.v1.SecretKeySelector serverCertSecret = 5;

  // ServerKeyPath refers the file that contains private key
  optional k8s.io.api.core.v1.SecretKeySelector serverKeySecret = 6;

  // Metadata holds the user defined metadata which will passed along the event payload.
  // +optional
  map<string, string> metadata = 7;

  // AuthSecret holds a secret selector that contains a bearer token for authentication
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector authSecret = 8;

  // MaxPayloadSize is the maximum webhook payload size that the server will accept.
  // Requests exceeding that limit will be rejected with "request too large" response.
  // Default value: 1048576 (1MB).
  // +optional
  optional int64 maxPayloadSize = 9;
}

// CalendarEventSource describes an HTTP based EventSource
message WebhookEventSource {
  optional WebhookContext webhookContext = 1;

  // Filter
  // +optional
  optional EventSourceFilter filter = 2;
}

