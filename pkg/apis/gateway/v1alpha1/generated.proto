/*
Copyright 2018 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.argoproj.argo_events.pkg.apis.gateway.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// Gateway is the definition of a gateway resource
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
message Gateway {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional GatewayStatus status = 2;

  optional GatewaySpec spec = 3;
}

// GatewayList is the list of Gateway resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message GatewayList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Gateway items = 2;
}

// GatewaySpec represents gateway specifications
message GatewaySpec {
  // DeploySpec is description of gateway
  optional k8s.io.api.core.v1.PodSpec deploySpec = 1;

  // ConfigMap is name of the configmap for gateway-processor
  optional string configmap = 2;

  // Type is type of the gateway
  optional string type = 3;

  // Version is used for marking event version
  optional string version = 4;

  // ServiceSpec is the specifications of the service to expose the gateway
  optional k8s.io.api.core.v1.ServiceSpec serviceSpec = 5;

  // Sensors are list of sensors to dispatch events to
  repeated string sensors = 6;

  // RPCPort if provided deploys gateway-processor as gRPC client
  optional string rpcPort = 7;
}

// GatewayStatus contains information about the status of a gateway.
message GatewayStatus {
  // Phase is the high-level summary of the gateway
  optional string phase = 1;

  // StartedAt is the time at which this gateway was initiated
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startedAt = 2;

  // Message is a human readable string indicating details about a gateway in its phase
  optional string message = 4;
}

