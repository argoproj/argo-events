/*
Copyright 2018 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.argoproj.argo_events.pkg.apis.gateway.v1alpha1;

import "github.com/argoproj/argo-events/pkg/apis/common/generated.proto";
import "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// Gateway is the definition of a gateway resource
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
message Gateway {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional GatewayStatus status = 2;

  optional GatewaySpec spec = 3;
}

// GatewayList is the list of Gateway resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message GatewayList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Gateway items = 2;
}

// GatewayNotificationWatcher is the gateway interested in listening to notifications from this gateway
message GatewayNotificationWatcher {
  // Name is the gateway name
  optional string name = 1;

  // Port is http server port on which gateway is running
  optional string port = 2;

  // Endpoint is REST API endpoint to post event to.
  // Events are sent using HTTP POST method to this endpoint.
  optional string endpoint = 3;
}

// GatewaySpec represents gateway specifications
message GatewaySpec {
  // DeploySpec is the pod specification for the gateway
  // Refer https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#pod-v1-core
  optional k8s.io.api.core.v1.Pod deploySpec = 1;

  // ConfigMap is name of the configmap for gateway. This configmap contains event sources.
  optional string configmap = 2;

  // Type is the type of gateway. Used as metadata.
  optional string type = 3;

  // Version is used for marking event version
  optional string eventVersion = 4;

  // ServiceSpec is the specifications of the service to expose the gateway
  // Refer https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#service-v1-core
  optional k8s.io.api.core.v1.Service serviceSpec = 5;

  // Watchers are components which are interested listening to notifications from this gateway
  // These only need to be specified when gateway dispatch mechanism is through HTTP POST notifications.
  // In future, support for NATS, KAFKA will be added as a means to dispatch notifications in which case
  // specifying watchers would be unnecessary.
  optional NotificationWatchers watchers = 6;

  // Port on which the gateway event source processor is running on.
  optional string processorPort = 7;

  // EventProtocol is the underlying protocol used to send events from gateway to watchers(components interested in listening to event from this gateway)
  optional github.com.argoproj.argo_events.pkg.apis.common.EventProtocol eventProtocol = 8;
}

// GatewayStatus contains information about the status of a gateway.
message GatewayStatus {
  // Phase is the high-level summary of the gateway
  optional string phase = 1;

  // StartedAt is the time at which this gateway was initiated
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startedAt = 2;

  // Message is a human readable string indicating details about a gateway in its phase
  optional string message = 4;

  // Nodes is a mapping between a node ID and the node's status
  // it records the states for the configurations of gateway.
  map<string, NodeStatus> nodes = 5;
}

// NodeStatus describes the status for an individual node in the gateway configurations.
// A single node can represent one configuration.
message NodeStatus {
  // ID is a unique identifier of a node within a sensor
  // It is a hash of the node name
  optional string id = 1;

  // Name is a unique name in the node tree used to generate the node ID
  optional string name = 3;

  // DisplayName is the human readable representation of the node
  optional string displayName = 5;

  // Phase of the node
  optional string phase = 6;

  // StartedAt is the time at which this node started
  // +k8s:openapi-gen=false
  optional k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime startedAt = 7;

  // Message store data or something to save for configuration
  optional string message = 8;

  // UpdateTime is the time when node(gateway configuration) was updated
  optional k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime updateTime = 9;
}

// NotificationWatchers are components which are interested listening to notifications from this gateway
message NotificationWatchers {
  // Gateways is the list of gateways interested in listening to notifications from this gateway
  repeated GatewayNotificationWatcher gateways = 1;

  // Sensors is the list of sensors interested in listening to notifications from this gateway
  repeated SensorNotificationWatcher sensors = 2;
}

// SensorNotificationWatcher is the sensor interested in listening to notifications from this gateway
message SensorNotificationWatcher {
  // Name is name of the sensor
  optional string name = 1;
}

