/*
Copyright 2018 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.argoproj.argo_events.pkg.apis.gateway.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// Gateway is the definition of a gateway-controller resource
// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
message Gateway {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional GatewayStatus status = 2;

  optional GatewaySpec spec = 3;
}

// GatewayList is the list of Gateway resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message GatewayList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Gateway items = 2;
}

// GatewaySpec represents gateway-controller specifications
message GatewaySpec {
  // Image is the image provided by user
  optional string image = 1;

  // ImagePullPolicy for pulling the image
  optional string imagePullPolicy = 10;

  // Command is command to run user's image
  optional string command = 2;

  // Todo: does this needed to specified separately?
  // ConfigMap is name of the configmap user code can access if required
  optional string configmap = 3;

  // Type is type of the gateway used as event type
  optional string type = 5;

  // Version is used for marking event version
  optional string version = 6;

  // Service is the name of the service to expose the gateway
  optional Service service = 7;

  // Sensors are list of sensors to dispatch events to
  repeated string sensors = 8;

  // ServiceAccountName is name of service account to run the gateway
  optional string serviceAccountName = 9;
}

// GatewayStatus contains information about the status of a gateway-controller.
message GatewayStatus {
  // Phase is the high-level summary of the gateway-controller
  optional string phase = 1;

  // StartedAt is the time at which this gateway-controller was initiated
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startedAt = 2;

  // Message is a human readable string indicating details about a gateway-controller in its phase
  optional string message = 4;
}

// Service exposed gateway to outside cluster or in cluster components depending on it's type.
message Service {
  // Type is type of the service. Either ClusterIP, NodePort, LoadBalancer or ExternalName
  // See https://kubernetes.io/docs/concepts/services-networking/service/
  optional string type = 1;

  // Port is port exposed to components outside cluster
  optional int32 port = 2;

  // TargetPort is the gateway http server port
  optional int32 targetPort = 3;
}

