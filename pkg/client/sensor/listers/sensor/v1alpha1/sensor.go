/*
Copyright 2020 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SensorLister helps list Sensors.
type SensorLister interface {
	// List lists all Sensors in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Sensor, err error)
	// Sensors returns an object that can list and get Sensors.
	Sensors(namespace string) SensorNamespaceLister
	SensorListerExpansion
}

// sensorLister implements the SensorLister interface.
type sensorLister struct {
	indexer cache.Indexer
}

// NewSensorLister returns a new SensorLister.
func NewSensorLister(indexer cache.Indexer) SensorLister {
	return &sensorLister{indexer: indexer}
}

// List lists all Sensors in the indexer.
func (s *sensorLister) List(selector labels.Selector) (ret []*v1alpha1.Sensor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Sensor))
	})
	return ret, err
}

// Sensors returns an object that can list and get Sensors.
func (s *sensorLister) Sensors(namespace string) SensorNamespaceLister {
	return sensorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SensorNamespaceLister helps list and get Sensors.
type SensorNamespaceLister interface {
	// List lists all Sensors in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Sensor, err error)
	// Get retrieves the Sensor from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Sensor, error)
	SensorNamespaceListerExpansion
}

// sensorNamespaceLister implements the SensorNamespaceLister
// interface.
type sensorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Sensors in the indexer for a given namespace.
func (s sensorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Sensor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Sensor))
	})
	return ret, err
}

// Get retrieves the Sensor from the indexer for a given namespace and name.
func (s sensorNamespaceLister) Get(name string) (*v1alpha1.Sensor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sensor"), name)
	}
	return obj.(*v1alpha1.Sensor), nil
}
