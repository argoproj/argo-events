// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gateways/eventing.proto

/*
Package gateways is a generated protocol buffer package.

It is generated from these files:
	gateways/eventing.proto

It has these top-level messages:
	EventSource
	Event
	ValidEventSource
*/
package gateways

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventSource struct {
	// ID of the event source. internally generated.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The event source name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The event source configuration value.
	Data             *string `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EventSource) Reset()                    { *m = EventSource{} }
func (m *EventSource) String() string            { return proto.CompactTextString(m) }
func (*EventSource) ProtoMessage()               {}
func (*EventSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EventSource) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *EventSource) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *EventSource) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

type Event struct {
	// The event source name.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The event payload.
	Payload          []byte `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Event) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Event) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ValidEventSource struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ValidEventSource) Reset()                    { *m = ValidEventSource{} }
func (m *ValidEventSource) String() string            { return proto.CompactTextString(m) }
func (*ValidEventSource) ProtoMessage()               {}
func (*ValidEventSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*EventSource)(nil), "gateways.EventSource")
	proto.RegisterType((*Event)(nil), "gateways.Event")
	proto.RegisterType((*ValidEventSource)(nil), "gateways.ValidEventSource")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Eventing service

type EventingClient interface {
	// StartEventSource starts an event source and returns stream of events.
	StartEventSource(ctx context.Context, in *EventSource, opts ...grpc.CallOption) (Eventing_StartEventSourceClient, error)
	// ValidateEventSource validates an event source.
	ValidateEventSource(ctx context.Context, in *EventSource, opts ...grpc.CallOption) (*ValidEventSource, error)
}

type eventingClient struct {
	cc *grpc.ClientConn
}

func NewEventingClient(cc *grpc.ClientConn) EventingClient {
	return &eventingClient{cc}
}

func (c *eventingClient) StartEventSource(ctx context.Context, in *EventSource, opts ...grpc.CallOption) (Eventing_StartEventSourceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Eventing_serviceDesc.Streams[0], c.cc, "/gateways.Eventing/StartEventSource", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventingStartEventSourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Eventing_StartEventSourceClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventingStartEventSourceClient struct {
	grpc.ClientStream
}

func (x *eventingStartEventSourceClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventingClient) ValidateEventSource(ctx context.Context, in *EventSource, opts ...grpc.CallOption) (*ValidEventSource, error) {
	out := new(ValidEventSource)
	err := grpc.Invoke(ctx, "/gateways.Eventing/ValidateEventSource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Eventing service

type EventingServer interface {
	// StartEventSource starts an event source and returns stream of events.
	StartEventSource(*EventSource, Eventing_StartEventSourceServer) error
	// ValidateEventSource validates an event source.
	ValidateEventSource(context.Context, *EventSource) (*ValidEventSource, error)
}

func RegisterEventingServer(s *grpc.Server, srv EventingServer) {
	s.RegisterService(&_Eventing_serviceDesc, srv)
}

func _Eventing_StartEventSource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventSource)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventingServer).StartEventSource(m, &eventingStartEventSourceServer{stream})
}

type Eventing_StartEventSourceServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventingStartEventSourceServer struct {
	grpc.ServerStream
}

func (x *eventingStartEventSourceServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Eventing_ValidateEventSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventingServer).ValidateEventSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateways.Eventing/ValidateEventSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventingServer).ValidateEventSource(ctx, req.(*EventSource))
	}
	return interceptor(ctx, in, info, handler)
}

var _Eventing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gateways.Eventing",
	HandlerType: (*EventingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateEventSource",
			Handler:    _Eventing_ValidateEventSource_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartEventSource",
			Handler:       _Eventing_StartEventSource_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gateways/eventing.proto",
}

func init() { proto.RegisterFile("gateways/eventing.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0x4f, 0x2c, 0x49,
	0x2d, 0x4f, 0xac, 0x2c, 0xd6, 0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0xc9, 0xcc, 0x4b, 0xd7, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0x49, 0x28, 0xb9, 0x72, 0x71, 0xbb, 0x82, 0xe4, 0x82, 0xf3,
	0x4b, 0x8b, 0x92, 0x53, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38,
	0x83, 0x98, 0x32, 0x53, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x98, 0xc0, 0x22,
	0x60, 0x36, 0x48, 0x2c, 0x25, 0xb1, 0x24, 0x51, 0x82, 0x19, 0x22, 0x06, 0x62, 0x2b, 0x99, 0x72,
	0xb1, 0x82, 0x8d, 0x81, 0x6b, 0x60, 0x44, 0xd2, 0x20, 0xc1, 0xc5, 0x5e, 0x90, 0x58, 0x99, 0x93,
	0x9f, 0x98, 0x02, 0x36, 0x87, 0x27, 0x08, 0xc6, 0x55, 0x12, 0xe2, 0x12, 0x08, 0x4b, 0xcc, 0xc9,
	0x4c, 0x41, 0x72, 0x82, 0xd1, 0x24, 0x46, 0x2e, 0x0e, 0x57, 0xa8, 0x73, 0x85, 0x6c, 0xb8, 0x04,
	0x82, 0x4b, 0x12, 0x8b, 0x4a, 0x90, 0xdd, 0x28, 0xaa, 0x07, 0x73, 0xbd, 0x1e, 0x92, 0xb0, 0x14,
	0x3f, 0x9a, 0xb0, 0x01, 0xa3, 0x90, 0x07, 0x97, 0x30, 0xd8, 0xf8, 0xc4, 0x92, 0x54, 0x22, 0x0c,
	0x90, 0x42, 0x08, 0xa3, 0x3b, 0x0a, 0x10, 0x00, 0x00, 0xff, 0xff, 0x17, 0x63, 0x10, 0x9e, 0x4a,
	0x01, 0x00, 0x00,
}
