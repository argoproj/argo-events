// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gateway.proto

/*
Package gateways is a generated protocol buffer package.

It is generated from these files:
	gateway.proto

It has these top-level messages:
	GatewayConfig
	Event
*/
package gateways

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GatewayConfig struct {
	Src    string `protobuf:"bytes,1,opt,name=src" json:"src,omitempty"`
	Config string `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *GatewayConfig) Reset()                    { *m = GatewayConfig{} }
func (m *GatewayConfig) String() string            { return proto.CompactTextString(m) }
func (*GatewayConfig) ProtoMessage()               {}
func (*GatewayConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GatewayConfig) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *GatewayConfig) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

type Event struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Event) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*GatewayConfig)(nil), "gateways.GatewayConfig")
	proto.RegisterType((*Event)(nil), "gateways.Event")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GatewayExecutor service

type GatewayExecutorClient interface {
	// Obtains the configuration available within the given GatewayConfig.  Result events are
	// streamed back to client.
	StartConfig(ctx context.Context, in *GatewayConfig, opts ...grpc.CallOption) (GatewayExecutor_StartConfigClient, error)
}

type gatewayExecutorClient struct {
	cc *grpc.ClientConn
}

func NewGatewayExecutorClient(cc *grpc.ClientConn) GatewayExecutorClient {
	return &gatewayExecutorClient{cc}
}

func (c *gatewayExecutorClient) StartConfig(ctx context.Context, in *GatewayConfig, opts ...grpc.CallOption) (GatewayExecutor_StartConfigClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GatewayExecutor_serviceDesc.Streams[0], c.cc, "/gateways.GatewayExecutor/StartConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayExecutorStartConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayExecutor_StartConfigClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type gatewayExecutorStartConfigClient struct {
	grpc.ClientStream
}

func (x *gatewayExecutorStartConfigClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GatewayExecutor service

type GatewayExecutorServer interface {
	// Obtains the configuration available within the given GatewayConfig.  Result events are
	// streamed back to client.
	StartConfig(*GatewayConfig, GatewayExecutor_StartConfigServer) error
}

func RegisterGatewayExecutorServer(s *grpc.Server, srv GatewayExecutorServer) {
	s.RegisterService(&_GatewayExecutor_serviceDesc, srv)
}

func _GatewayExecutor_StartConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GatewayConfig)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayExecutorServer).StartConfig(m, &gatewayExecutorStartConfigServer{stream})
}

type GatewayExecutor_StartConfigServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type gatewayExecutorStartConfigServer struct {
	grpc.ServerStream
}

func (x *gatewayExecutorStartConfigServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _GatewayExecutor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gateways.GatewayExecutor",
	HandlerType: (*GatewayExecutorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartConfig",
			Handler:       _GatewayExecutor_StartConfig_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gateway.proto",
}

func init() { proto.RegisterFile("gateway.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4f, 0x2c, 0x49,
	0x2d, 0x4f, 0xac, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0x72, 0x8b, 0x95, 0x2c,
	0xb9, 0x78, 0xdd, 0x21, 0x6c, 0xe7, 0xfc, 0xbc, 0xb4, 0xcc, 0x74, 0x21, 0x01, 0x2e, 0xe6, 0xe2,
	0xa2, 0x64, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x10, 0x53, 0x48, 0x8c, 0x8b, 0x2d, 0x19,
	0x2c, 0x27, 0xc1, 0x04, 0x16, 0x84, 0xf2, 0x94, 0xa4, 0xb9, 0x58, 0x5d, 0xcb, 0x52, 0xf3, 0x4a,
	0x84, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12, 0xc1, 0x7a, 0x78, 0x82, 0xc0, 0x6c, 0x23, 0x3f,
	0x2e, 0x7e, 0xa8, 0xb9, 0xae, 0x15, 0xa9, 0xc9, 0xa5, 0x25, 0xf9, 0x45, 0x42, 0xd6, 0x5c, 0xdc,
	0xc1, 0x25, 0x89, 0x45, 0x25, 0x50, 0x8b, 0xc4, 0xf5, 0x60, 0x8e, 0xd0, 0x43, 0x71, 0x81, 0x14,
	0x3f, 0x42, 0x02, 0x6c, 0xbe, 0x12, 0x83, 0x01, 0xa3, 0x93, 0x24, 0x17, 0x77, 0x62, 0x51, 0x7a,
	0x7e, 0x41, 0x51, 0x7e, 0x96, 0x5e, 0x66, 0xbe, 0x13, 0x07, 0x54, 0x4b, 0x71, 0x00, 0x63, 0x12,
	0x1b, 0xd8, 0x4f, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0x2e, 0xef, 0xbd, 0xe4, 0x00,
	0x00, 0x00,
}
