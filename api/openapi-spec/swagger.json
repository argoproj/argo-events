{
  "swagger": "2.0",
  "info": {
    "title": "Argo",
    "version": "v0.14.0"
  },
  "paths": {},
  "definitions": {
    "io.argoproj.common.Event": {
      "description": "Event is a data and its context. Adheres to the CloudEvents v0.3 specification",
      "type": "object",
      "required": [
        "context",
        "data"
      ],
      "properties": {
        "context": {
          "$ref": "#/definitions/io.argoproj.common.EventContext"
        },
        "data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "io.argoproj.common.EventContext": {
      "description": "EventContext contains metadata that provides circumstantial information about the occurrence.",
      "type": "object",
      "required": [
        "type",
        "specVersion",
        "source",
        "eventID",
        "time",
        "dataContentType",
        "subject"
      ],
      "properties": {
        "dataContentType": {
          "description": "Content type of the data attribute value. Enables the data attribute to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, the data attribute may carry an XML or JSON payload and the consumer is informed by this attribute being set to \"application/xml\" or \"application/json\" respectively.",
          "type": "string"
        },
        "eventID": {
          "description": "ID of the event. The semantics are explicitly undefined to ease the implementation of producers.",
          "type": "string"
        },
        "source": {
          "description": "This describes the event producer.",
          "type": "string"
        },
        "specVersion": {
          "description": "The version of the CloudEvents specification which the event uses. Enables the interpretation of the context.",
          "type": "string"
        },
        "subject": {
          "description": "Subject of the event",
          "type": "string"
        },
        "time": {
          "description": "Time when the event happened. Must adhere to format specified in RFC 3339.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "type": {
          "description": "The type of occurrence which has happened. Often this attribute is used for routing, observability, policy enforcement, etc. should be prefixed with a reverse-DNS name. The prefixed domain dictates the organization which defines the semantics of this event type. ex: com.github.pull.create",
          "type": "string"
        }
      }
    },
    "io.argoproj.common.EventProtocol": {
      "description": "Dispatch protocol contains configuration necessary to dispatch an event to sensor over different communication protocols",
      "type": "object",
      "required": [
        "type",
        "http",
        "nats"
      ],
      "properties": {
        "http": {
          "$ref": "#/definitions/io.argoproj.common.Http"
        },
        "nats": {
          "$ref": "#/definitions/io.argoproj.common.Nats"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "io.argoproj.common.Http": {
      "description": "Http contains the information required to setup a http server and listen to incoming events",
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations to be set for the service generated",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Labels to be set for the service generated",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "port": {
          "description": "Port on which server will run",
          "type": "string"
        }
      }
    },
    "io.argoproj.common.Nats": {
      "description": "Nats contains the information required to connect to nats server and get subscriptions",
      "type": "object",
      "required": [
        "url",
        "type"
      ],
      "properties": {
        "clientId": {
          "description": "The NATS Streaming cluster ID",
          "type": "string"
        },
        "clusterId": {
          "description": "The NATS Streaming cluster ID",
          "type": "string"
        },
        "deliverAllAvailable": {
          "description": "Receive all stored values in order.",
          "type": "boolean"
        },
        "durable": {
          "description": "Durable subscriptions allow clients to assign a durable name to a subscription when it is created",
          "type": "boolean"
        },
        "startAtSequence": {
          "description": "Receive messages starting at a specific sequence number",
          "type": "string"
        },
        "startAtTime": {
          "description": "Subscribe starting at a specific time",
          "type": "string"
        },
        "startAtTimeDelta": {
          "description": "Subscribe starting a specific amount of time in the past (e.g. 30 seconds ago)",
          "type": "string"
        },
        "startWithLastReceived": {
          "description": "Subscribe starting with most recently published value. Refer https://github.com/nats-io/go-nats-streaming",
          "type": "boolean"
        },
        "type": {
          "description": "Type of the connection. either standard or streaming",
          "type": "string"
        },
        "url": {
          "description": "URL is nats server/service URL",
          "type": "string"
        }
      }
    },
    "io.argoproj.common.S3Artifact": {
      "description": "S3Artifact contains information about an S3 connection and bucket",
      "type": "object",
      "required": [
        "endpoint",
        "bucket",
        "accessKey",
        "secretKey"
      ],
      "properties": {
        "accessKey": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        },
        "bucket": {
          "$ref": "#/definitions/io.argoproj.common.S3Bucket"
        },
        "endpoint": {
          "type": "string"
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "filter": {
          "$ref": "#/definitions/io.argoproj.common.S3Filter"
        },
        "insecure": {
          "type": "boolean"
        },
        "region": {
          "type": "string"
        },
        "secretKey": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        }
      }
    },
    "io.argoproj.common.S3Bucket": {
      "description": "S3Bucket contains information to describe an S3 Bucket",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "io.argoproj.common.S3Filter": {
      "description": "S3Filter represents filters to apply to bucket nofifications for specifying constraints on objects",
      "type": "object",
      "required": [
        "prefix",
        "suffix"
      ],
      "properties": {
        "prefix": {
          "type": "string"
        },
        "suffix": {
          "type": "string"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.EventSourceRef": {
      "description": "EventSourceRef holds information about the EventSourceRef custom resource",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the event source",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the event source Default value is the namespace where referencing gateway is deployed",
          "type": "string"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.Gateway": {
      "description": "Gateway is the definition of a gateway resource",
      "type": "object",
      "required": [
        "metadata",
        "status",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.GatewaySpec"
        },
        "status": {
          "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.GatewayStatus"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.GatewayList": {
      "description": "GatewayList is the list of Gateway resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.Gateway"
          },
          "x-kubernetes-list-type": "items"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.GatewayResource": {
      "description": "GatewayResource holds the metadata about the gateway resources",
      "type": "object",
      "required": [
        "deployment"
      ],
      "properties": {
        "deployment": {
          "description": "Metadata of the deployment for the gateway",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "service": {
          "description": "Metadata of the service for the gateway",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.GatewaySpec": {
      "description": "GatewaySpec represents gateway specifications",
      "type": "object",
      "required": [
        "template",
        "type",
        "processorPort",
        "eventProtocol"
      ],
      "properties": {
        "eventProtocol": {
          "description": "EventProtocol is the underlying protocol used to send events from gateway to watchers(components interested in listening to event from this gateway)",
          "$ref": "#/definitions/io.argoproj.common.EventProtocol"
        },
        "eventSourceRef": {
          "description": "EventSourceRef refers to event-source that stores event source configurations for the gateway",
          "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.EventSourceRef"
        },
        "processorPort": {
          "description": "Port on which the gateway event source processor is running on.",
          "type": "string"
        },
        "replica": {
          "description": "Replica is the gateway deployment replicas",
          "type": "integer",
          "format": "int32"
        },
        "service": {
          "description": "Service is the specifications of the service to expose the gateway Refer https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#service-v1-core",
          "$ref": "#/definitions/io.k8s.api.core.v1.Service"
        },
        "subscribers": {
          "description": "Subscribers are HTTP endpoints to send events to.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "subscribers"
        },
        "template": {
          "description": "Template is the pod specification for the gateway Refer https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#pod-v1-core",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "type": {
          "description": "Type is the type of gateway. Used as metadata.",
          "type": "string"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.GatewayStatus": {
      "description": "GatewayStatus contains information about the status of a gateway.",
      "type": "object",
      "required": [
        "phase",
        "resources"
      ],
      "properties": {
        "message": {
          "description": "Message is a human readable string indicating details about a gateway in its phase",
          "type": "string"
        },
        "nodes": {
          "description": "Nodes is a mapping between a node ID and the node's status it records the states for the configurations of gateway.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.NodeStatus"
          }
        },
        "phase": {
          "description": "Phase is the high-level summary of the gateway",
          "type": "string"
        },
        "resources": {
          "description": "Resources refers to the metadata about the gateway resources",
          "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.GatewayResource"
        },
        "startedAt": {
          "description": "StartedAt is the time at which this gateway was initiated",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.NodeStatus": {
      "description": "NodeStatus describes the status for an individual node in the gateway configurations. A single node can represent one configuration.",
      "type": "object",
      "required": [
        "id",
        "name",
        "displayName",
        "phase"
      ],
      "properties": {
        "displayName": {
          "description": "DisplayName is the human readable representation of the node",
          "type": "string"
        },
        "id": {
          "description": "ID is a unique identifier of a node within a sensor It is a hash of the node name",
          "type": "string"
        },
        "message": {
          "description": "Message store data or something to save for configuration",
          "type": "string"
        },
        "name": {
          "description": "Name is a unique name in the node tree used to generate the node ID",
          "type": "string"
        },
        "phase": {
          "description": "Phase of the node",
          "type": "string"
        },
        "updateTime": {
          "description": "UpdateTime is the time when node(gateway configuration) was updated",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.ArtifactLocation": {
      "description": "ArtifactLocation describes the source location for an external minio",
      "type": "object",
      "properties": {
        "configmap": {
          "description": "Configmap that stores the minio",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ConfigmapArtifact"
        },
        "file": {
          "description": "File minio is minio stored in a file",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.FileArtifact"
        },
        "git": {
          "description": "Git repository hosting the minio",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.GitArtifact"
        },
        "inline": {
          "description": "Inline minio is embedded in sensor spec as a string",
          "type": "string"
        },
        "resource": {
          "description": "Resource is generic template for K8s resource",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.unstructured.Unstructured"
        },
        "s3": {
          "description": "S3 compliant minio",
          "$ref": "#/definitions/io.argoproj.common.S3Artifact"
        },
        "url": {
          "description": "URL to fetch the minio from",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.URLArtifact"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.Backoff": {
      "description": "Backoff for an operation",
      "type": "object",
      "required": [
        "duration",
        "factor",
        "jitter",
        "steps"
      ],
      "properties": {
        "duration": {
          "description": "Duration is the duration in nanoseconds",
          "type": "integer",
          "format": "int64"
        },
        "factor": {
          "description": "Duration is multiplied by factor each iteration",
          "type": "number",
          "format": "double"
        },
        "jitter": {
          "description": "The amount of jitter applied each iteration",
          "type": "number",
          "format": "double"
        },
        "steps": {
          "description": "Exit with error after this many steps",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.ConfigmapArtifact": {
      "description": "ConfigmapArtifact contains information about minio in k8 configmap",
      "type": "object",
      "required": [
        "name",
        "namespace",
        "key"
      ],
      "properties": {
        "key": {
          "description": "Key within configmap data which contains trigger resource definition",
          "type": "string"
        },
        "name": {
          "description": "Name of the configmap",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace where configmap is deployed",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.DataFilter": {
      "description": "DataFilter describes constraints and filters for event data Regular Expressions are purposefully not a feature as they are overkill for our uses here See Rob Pike's Post: https://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html",
      "type": "object",
      "required": [
        "path",
        "type",
        "value"
      ],
      "properties": {
        "path": {
          "description": "Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
          "type": "string"
        },
        "type": {
          "description": "Type contains the JSON type of the data",
          "type": "string"
        },
        "value": {
          "description": "Value is the allowed string values for this key Booleans are passed using strconv.ParseBool() Numbers are parsed using as float64 using strconv.ParseFloat() Strings are taken as is Nils this value is ignored",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "value"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.DependencyGroup": {
      "description": "DependencyGroup is the group of dependencies",
      "type": "object",
      "required": [
        "name",
        "dependencies"
      ],
      "properties": {
        "dependencies": {
          "description": "Dependencies of events",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "dependencies"
        },
        "name": {
          "description": "Name of the group",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.EventDependency": {
      "description": "EventDependency describes a dependency",
      "type": "object",
      "required": [
        "name",
        "gatewayName",
        "eventName"
      ],
      "properties": {
        "eventName": {
          "description": "EventName is the name of the event",
          "type": "string"
        },
        "filters": {
          "description": "Filters and rules governing toleration of success and constraints on the context and data of an event",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EventDependencyFilter"
        },
        "gatewayName": {
          "description": "GatewayName is the name of the gateway from whom the event is received",
          "type": "string"
        },
        "name": {
          "description": "Name is a unique name of this dependency",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.EventDependencyFilter": {
      "description": "EventDependencyFilter defines filters and constraints for a event.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "context": {
          "description": "Context filter constraints",
          "$ref": "#/definitions/io.argoproj.common.EventContext"
        },
        "data": {
          "description": "Data filter constraints with escalation",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.DataFilter"
          },
          "x-kubernetes-list-type": "data"
        },
        "name": {
          "description": "Name is the name of event filter",
          "type": "string"
        },
        "time": {
          "description": "Time filter on the event with escalation",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TimeFilter"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.FileArtifact": {
      "description": "FileArtifact contains information about an minio in a filesystem",
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.GitArtifact": {
      "description": "GitArtifact contains information about an minio stored in git",
      "type": "object",
      "required": [
        "url",
        "cloneDirectory",
        "filePath"
      ],
      "properties": {
        "branch": {
          "description": "Branch to use to pull trigger resource",
          "type": "string"
        },
        "cloneDirectory": {
          "description": "Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don't use any specific git provider client.",
          "type": "string"
        },
        "creds": {
          "description": "Creds contain reference to git username and password",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.GitCreds"
        },
        "filePath": {
          "description": "Path to file that contains trigger resource definition",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace where creds are stored.",
          "type": "string"
        },
        "ref": {
          "description": "Ref to use to pull trigger resource. Will result in a shallow clone and fetch.",
          "type": "string"
        },
        "remote": {
          "description": "Remote to manage set of tracked repositories. Defaults to \"origin\". Refer https://git-scm.com/docs/git-remote",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.GitRemoteConfig"
        },
        "sshKeyPath": {
          "description": "SSHKeyPath is path to your ssh key path. Use this if you don't want to provide username and password. ssh key path must be mounted in sensor pod.",
          "type": "string"
        },
        "tag": {
          "description": "Tag to use to pull trigger resource",
          "type": "string"
        },
        "url": {
          "description": "Git URL",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.GitCreds": {
      "description": "GitCreds contain reference to git username and password",
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        },
        "username": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.GitRemoteConfig": {
      "description": "GitRemoteConfig contains the configuration of a Git remote",
      "type": "object",
      "required": [
        "name",
        "urls"
      ],
      "properties": {
        "name": {
          "description": "Name of the remote to fetch from.",
          "type": "string"
        },
        "urls": {
          "description": "URLs the URLs of a remote repository. It must be non-empty. Fetch will always use the first URL, while push will use all of them.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "urls"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.NodeStatus": {
      "description": "NodeStatus describes the status for an individual node in the sensor's FSM. A single node can represent the status for event or a trigger.",
      "type": "object",
      "required": [
        "id",
        "name",
        "displayName",
        "type",
        "phase"
      ],
      "properties": {
        "completedAt": {
          "description": "CompletedAt is the time at which this node completed",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "displayName": {
          "description": "DisplayName is the human readable representation of the node",
          "type": "string"
        },
        "event": {
          "description": "Event stores the last seen event for this node",
          "$ref": "#/definitions/io.argoproj.common.Event"
        },
        "id": {
          "description": "ID is a unique identifier of a node within a sensor It is a hash of the node name",
          "type": "string"
        },
        "message": {
          "description": "store data or something to save for event notifications or trigger events",
          "type": "string"
        },
        "name": {
          "description": "Name is a unique name in the node tree used to generate the node ID",
          "type": "string"
        },
        "phase": {
          "description": "Phase of the node",
          "type": "string"
        },
        "startedAt": {
          "description": "StartedAt is the time at which this node started",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "type": {
          "description": "Type is the type of the node",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.ResourceLabelsPolicy": {
      "description": "ResourceLabels refers to the policy used to check the resource state using labels",
      "type": "object",
      "required": [
        "labels"
      ],
      "properties": {
        "labels": {
          "description": "Labels required to identify whether a resource is in success state",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.Sensor": {
      "description": "Sensor is the definition of a sensor resource",
      "type": "object",
      "required": [
        "metadata",
        "spec",
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.SensorSpec"
        },
        "status": {
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.SensorStatus"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.SensorList": {
      "description": "SensorList is the list of Sensor resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.Sensor"
          },
          "x-kubernetes-list-type": "items"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.SensorResources": {
      "description": "SensorResources holds the metadata of the resources created for the sensor",
      "type": "object",
      "required": [
        "deployment"
      ],
      "properties": {
        "deployment": {
          "description": "Deployment holds the metadata of the deployment for the sensor",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "service": {
          "description": "Service holds the metadata of the service for the sensor",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.SensorSpec": {
      "description": "SensorSpec represents desired sensor state",
      "type": "object",
      "required": [
        "dependencies",
        "triggers",
        "template",
        "eventProtocol"
      ],
      "properties": {
        "circuit": {
          "description": "Circuit is a boolean expression of dependency groups",
          "type": "string"
        },
        "dependencies": {
          "description": "Dependencies is a list of the events that this sensor is dependent on.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EventDependency"
          },
          "x-kubernetes-list-type": "dependencies"
        },
        "dependencyGroups": {
          "description": "DependencyGroups is a list of the groups of events.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.DependencyGroup"
          },
          "x-kubernetes-list-type": "dependencyGroups"
        },
        "errorOnFailedRound": {
          "description": "ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger round fails. Once sensor state is set to `error`, no further triggers will be processed.",
          "type": "boolean"
        },
        "eventProtocol": {
          "description": "EventProtocol is the protocol through which sensor receives events from gateway",
          "$ref": "#/definitions/io.argoproj.common.EventProtocol"
        },
        "port": {
          "description": "Port on which sensor server should run.",
          "type": "integer",
          "format": "int32"
        },
        "template": {
          "description": "Template contains sensor pod specification. For more information, read https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#pod-v1-core",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "triggers": {
          "description": "Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.Trigger"
          },
          "x-kubernetes-list-type": "triggers"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.SensorStatus": {
      "description": "SensorStatus contains information about the status of a sensor.",
      "type": "object",
      "required": [
        "phase",
        "triggerCycleStatus",
        "lastCycleTime",
        "resources"
      ],
      "properties": {
        "completedAt": {
          "description": "CompletedAt is the time at which this sensor was completed",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastCycleTime": {
          "description": "LastCycleTime is the time when last trigger cycle completed",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Message is a human readable string indicating details about a sensor in its phase",
          "type": "string"
        },
        "nodes": {
          "description": "Nodes is a mapping between a node ID and the node's status it records the states for the FSM of this sensor.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.NodeStatus"
          }
        },
        "phase": {
          "description": "Phase is the high-level summary of the sensor",
          "type": "string"
        },
        "resources": {
          "description": "Resources refers to metadata of the resources created for the sensor",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.SensorResources"
        },
        "startedAt": {
          "description": "StartedAt is the time at which this sensor was initiated",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "triggerCycleCount": {
          "description": "TriggerCycleCount is the count of sensor's trigger cycle runs.",
          "type": "integer",
          "format": "int32"
        },
        "triggerCycleStatus": {
          "description": "TriggerCycleState is the status from last cycle of triggers execution.",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.TimeFilter": {
      "description": "TimeFilter describes a window in time. DataFilters out event events that occur outside the time limits. In other words, only events that occur after Start and before Stop will pass this filter.",
      "type": "object",
      "properties": {
        "start": {
          "description": "Start is the beginning of a time window. Before this time, events for this event are ignored and format is hh:mm:ss",
          "type": "string"
        },
        "stop": {
          "description": "StopPattern is the end of a time window. After this time, events for this event are ignored and format is hh:mm:ss",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.Trigger": {
      "description": "Trigger is an action taken, output produced, an event created, a message sent",
      "type": "object",
      "required": [
        "template",
        "policy"
      ],
      "properties": {
        "policy": {
          "description": "Policy to configure backoff and execution criteria for the trigger",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerPolicy"
        },
        "resourceParameters": {
          "description": "ResourceParameters is the list of resource parameters to pass to resolved resource object in template object",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "resourceParameters"
        },
        "template": {
          "description": "Template describes the trigger specification.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerTemplate"
        },
        "templateParameters": {
          "description": "TemplateParameters is the list of resource parameters to pass to the template object",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "templateParameters"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.TriggerParameter": {
      "description": "TriggerParameter indicates a passed parameter to a service template",
      "type": "object",
      "required": [
        "src",
        "dest"
      ],
      "properties": {
        "dest": {
          "description": "Dest is the JSONPath of a resource key. A path is a series of keys separated by a dot. The colon character can be escaped with '.' The -1 key can be used to append a value to an existing array. See https://github.com/tidwall/sjson#path-syntax for more information about how this is used.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is what to do with the existing value at Dest, whether to 'prepend', 'overwrite', or 'append' it.",
          "type": "string"
        },
        "src": {
          "description": "Src contains a source reference to the value of the parameter from a event event",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameterSource"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.TriggerParameterSource": {
      "description": "TriggerParameterSource defines the source for a parameter from a event event",
      "type": "object",
      "required": [
        "event"
      ],
      "properties": {
        "contextKey": {
          "description": "Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
          "type": "string"
        },
        "dataKey": {
          "type": "string"
        },
        "event": {
          "description": "Event is the name of the event for which to retrieve this event",
          "type": "string"
        },
        "value": {
          "description": "Value is the default literal value to use for this parameter source This is only used if the path is invalid. If the path is invalid and this is not defined, this param source will produce an error.",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.TriggerPolicy": {
      "description": "TriggerPolicy dictates the policy for the trigger retries",
      "type": "object",
      "required": [
        "backoff",
        "errorOnBackoffTimeout",
        "resourceLabels"
      ],
      "properties": {
        "backoff": {
          "description": "Backoff before checking resource state",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.wait.Backoff"
        },
        "errorOnBackoffTimeout": {
          "description": "ErrorOnBackoffTimeout determines whether sensor should transition to error state if the trigger policy is unable to determine the state of the resource",
          "type": "boolean"
        },
        "resourceLabels": {
          "description": "ResourceLabels refers to the policy used to check the resource state using labels",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ResourceLabelsPolicy"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.TriggerSwitch": {
      "description": "TriggerSwitch describes condition which must be satisfied in order to execute a trigger. Depending upon condition type, status of dependency groups is used to evaluate the result.",
      "type": "object",
      "properties": {
        "all": {
          "description": "All acts as a AND operator between dependencies",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "all"
        },
        "any": {
          "description": "Any acts as a OR operator between dependencies",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "any"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.TriggerTemplate": {
      "description": "TriggerTemplate is the template that describes trigger specification.",
      "type": "object",
      "required": [
        "name",
        "source"
      ],
      "properties": {
        "name": {
          "description": "Name is a unique name of the action to take",
          "type": "string"
        },
        "operation": {
          "description": "Operation refers to the type of operation performed on the trigger resource. Default value is Create.",
          "type": "string"
        },
        "source": {
          "description": "Source of the K8 resource file(s)",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ArtifactLocation"
        },
        "switch": {
          "description": "Switch is the condition to execute the trigger",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerSwitch"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.URLArtifact": {
      "description": "URLArtifact contains information about an minio at an http endpoint.",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "description": "Path is the complete URL",
          "type": "string"
        },
        "verifyCert": {
          "description": "VerifyCert decides whether the connection is secure or not",
          "type": "boolean"
        }
      }
    }
  }
}
