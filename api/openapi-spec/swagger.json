{
  "swagger": "2.0",
  "info": {
    "title": "Argo",
    "version": "v0.16.0"
  },
  "paths": {},
  "definitions": {
    "io.argoproj.common.AMQPEventData": {
      "description": "AMQPEventData represents the event data generated by AMQP gateway.",
      "type": "object",
      "required": [
        "contentType",
        "contentEncoding",
        "deliveryMode",
        "priority",
        "correlationId",
        "replyTo",
        "expiration",
        "messageId",
        "timestamp",
        "type",
        "appId",
        "exchange",
        "routingKey",
        "body"
      ],
      "properties": {
        "appId": {
          "description": "AppId refers to the application id",
          "type": "string"
        },
        "body": {
          "description": "Body represents the messsage body",
          "type": "string",
          "format": "byte"
        },
        "contentEncoding": {
          "description": "ContentEncoding is the MIME content encoding",
          "type": "string"
        },
        "contentType": {
          "description": "ContentType is the MIME content type",
          "type": "string"
        },
        "correlationId": {
          "description": "CorrelationId is the correlation identifier",
          "type": "string"
        },
        "deliveryMode": {
          "description": "Delivery mode can be either - non-persistent (1) or persistent (2)",
          "type": "integer",
          "format": "int32"
        },
        "exchange": {
          "description": "Exchange is basic.publish exchange",
          "type": "string"
        },
        "expiration": {
          "description": "Expiration refers to message expiration spec",
          "type": "string"
        },
        "messageId": {
          "description": "MessageId is message identifier",
          "type": "string"
        },
        "priority": {
          "description": "Priority refers to the use - 0 to 9",
          "type": "integer",
          "format": "int32"
        },
        "replyTo": {
          "description": "ReplyTo is the address to reply to (ex: RPC)",
          "type": "string"
        },
        "routingKey": {
          "description": "RoutingKey is basic.publish routing key",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp refers to the message timestamp",
          "type": "string"
        },
        "type": {
          "description": "Type refers to the message type name",
          "type": "string"
        }
      }
    },
    "io.argoproj.common.AzureEventsHubEventData": {
      "description": "AzureEventsHubEventData represents to the event data generated by Azure Events Hub gateway.",
      "type": "object",
      "required": [
        "id",
        "partitionKey",
        "body"
      ],
      "properties": {
        "body": {
          "description": "Message body",
          "type": "string",
          "format": "byte"
        },
        "id": {
          "description": "Id of the message",
          "type": "string"
        },
        "partitionKey": {
          "description": "PartitionKey",
          "type": "string"
        }
      }
    },
    "io.argoproj.common.CalendarEventData": {
      "description": "CalendarEventData represents the event data generated by the Calendar gateway.",
      "type": "object",
      "required": [
        "eventTime"
      ],
      "properties": {
        "eventTime": {
          "description": "EventTime is time at which event occurred",
          "type": "string"
        },
        "userPayload": {
          "description": "UserPayload if any",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "io.argoproj.common.EmitterEventData": {
      "description": "EmitterEventData represents the event data generated by the Emitter gateway.",
      "type": "object",
      "required": [
        "topic",
        "body"
      ],
      "properties": {
        "body": {
          "description": "Body represents the message body",
          "type": "string",
          "format": "byte"
        },
        "topic": {
          "description": "Topic name",
          "type": "string"
        }
      }
    },
    "io.argoproj.common.Event": {
      "description": "Event is a data and its context. Adheres to the CloudEvents v0.3 specification",
      "type": "object",
      "required": [
        "context",
        "data"
      ],
      "properties": {
        "context": {
          "$ref": "#/definitions/io.argoproj.common.EventContext"
        },
        "data": {
          "type": "string",
          "format": "byte",
          "x-kubernetes-list-type": "bytes"
        }
      }
    },
    "io.argoproj.common.EventContext": {
      "description": "EventContext contains metadata that provides circumstantial information about the occurrence.",
      "type": "object",
      "required": [
        "type",
        "specVersion",
        "source",
        "id",
        "time",
        "dataContentType",
        "subject"
      ],
      "properties": {
        "dataContentType": {
          "description": "Content type of the data attribute value. Enables the data attribute to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, the data attribute may carry an XML or JSON payload and the consumer is informed by this attribute being set to \"application/xml\" or \"application/json\" respectively.",
          "type": "string"
        },
        "id": {
          "description": "ID of the event. The semantics are explicitly undefined to ease the implementation of producers.",
          "type": "string"
        },
        "source": {
          "description": "This describes the event producer.",
          "type": "string"
        },
        "specVersion": {
          "description": "The version of the CloudEvents specification which the event uses. Enables the interpretation of the context.",
          "type": "string"
        },
        "subject": {
          "description": "Subject of the event",
          "type": "string"
        },
        "time": {
          "description": "Time when the event happened. Must adhere to format specified in RFC 3339.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "type": {
          "description": "The type of occurrence which has happened. Often this attribute is used for routing, observability, policy enforcement, etc. should be prefixed with a reverse-DNS name. The prefixed domain dictates the organization which defines the semantics of this event type. ex: com.github.pull.create",
          "type": "string"
        }
      }
    },
    "io.argoproj.common.EventProtocol": {
      "description": "Dispatch protocol contains configuration necessary to dispatch an event to sensor over different communication protocols",
      "type": "object",
      "required": [
        "type",
        "http",
        "nats"
      ],
      "properties": {
        "http": {
          "$ref": "#/definitions/io.argoproj.common.Http"
        },
        "nats": {
          "$ref": "#/definitions/io.argoproj.common.Nats"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "io.argoproj.common.GitLabEventData": {
      "description": "GitLabEventData represents the event data generated by the GitLab gateway.",
      "type": "object",
      "required": [
        "body"
      ],
      "properties": {
        "body": {
          "description": "Body represents the message body",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "io.argoproj.common.GithubEventData": {
      "description": "GithubEventData represents the event data generated by the GitHub gateway.",
      "type": "object",
      "required": [
        "body"
      ],
      "properties": {
        "body": {
          "description": "Body represents the message body",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "io.argoproj.common.Http": {
      "description": "Http contains the information required to setup a http server and listen to incoming events",
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations to be set for the service generated",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Labels to be set for the service generated",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "port": {
          "description": "Port on which server will run",
          "type": "string"
        }
      }
    },
    "io.argoproj.common.KafkaEventData": {
      "description": "KafkaEventData represents the event data generated by the Kafka gateway.",
      "type": "object",
      "required": [
        "topic",
        "partition",
        "value",
        "timestamp"
      ],
      "properties": {
        "partition": {
          "description": "Partition refers to the Kafka partition",
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "description": "Timestamp of the message",
          "type": "string"
        },
        "topic": {
          "description": "Topic refers to the Kafka topic",
          "type": "string"
        },
        "value": {
          "description": "Body refers to the message value",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "io.argoproj.common.MQTTEventData": {
      "description": "MQTTEventData represents the event data generated by the MQTT gateway.",
      "type": "object",
      "required": [
        "topic",
        "messageId",
        "payload"
      ],
      "properties": {
        "messageId": {
          "description": "MessageId is the unique ID for the message",
          "type": "integer",
          "format": "int32"
        },
        "payload": {
          "description": "Payload is the message payload.",
          "type": "string",
          "format": "byte"
        },
        "topic": {
          "description": "Topic refers to the MQTT topic name.",
          "type": "string"
        }
      }
    },
    "io.argoproj.common.MinioEventData": {
      "description": "MinioEventData represents the event data generated by the Minio gateway.",
      "type": "object",
      "required": [
        "notification"
      ],
      "properties": {
        "notification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.minio.minio-go.NotificationEvent"
          }
        }
      }
    },
    "io.argoproj.common.NATSEventData": {
      "description": "NATSEventData represents the event data generated by the NATS gateway.",
      "type": "object",
      "required": [
        "subject",
        "data"
      ],
      "properties": {
        "data": {
          "description": "Message data.",
          "type": "string",
          "format": "byte"
        },
        "subject": {
          "description": "Name of the subject.",
          "type": "string"
        }
      }
    },
    "io.argoproj.common.NSQEventData": {
      "description": "NSQEventData represents the event data generated by the NSQ gateway.",
      "type": "object",
      "required": [
        "Body",
        "Timestamp",
        "NSQDAddress"
      ],
      "properties": {
        "Body": {
          "description": "Body is the message data.",
          "type": "string",
          "format": "byte"
        },
        "NSQDAddress": {
          "description": "NSQDAddress is the address of the nsq host.",
          "type": "string"
        },
        "Timestamp": {
          "description": "Timestamp of the message.",
          "type": "string"
        }
      }
    },
    "io.argoproj.common.Nats": {
      "description": "Nats contains the information required to connect to nats server and get subscriptions",
      "type": "object",
      "required": [
        "url",
        "type"
      ],
      "properties": {
        "clientId": {
          "description": "The NATS Streaming cluster ID",
          "type": "string"
        },
        "clusterId": {
          "description": "The NATS Streaming cluster ID",
          "type": "string"
        },
        "deliverAllAvailable": {
          "description": "Receive all stored values in order.",
          "type": "boolean"
        },
        "durable": {
          "description": "Durable subscriptions allow clients to assign a durable name to a subscription when it is created",
          "type": "boolean"
        },
        "startAtSequence": {
          "description": "Receive messages starting at a specific sequence number",
          "type": "string"
        },
        "startAtTime": {
          "description": "Subscribe starting at a specific time",
          "type": "string"
        },
        "startAtTimeDelta": {
          "description": "Subscribe starting a specific amount of time in the past (e.g. 30 seconds ago)",
          "type": "string"
        },
        "startWithLastReceived": {
          "description": "Subscribe starting with most recently published value. Refer https://github.com/nats-io/go-nats-streaming",
          "type": "boolean"
        },
        "type": {
          "description": "Type of the connection. either standard or streaming",
          "type": "string"
        },
        "url": {
          "description": "URL is nats server/service URL",
          "type": "string"
        }
      }
    },
    "io.argoproj.common.PubSubEventData": {
      "description": "PubSubEventData represents the event data generated by the GCP PubSub gateway.",
      "type": "object",
      "required": [
        "id",
        "body",
        "attributes",
        "publishTime"
      ],
      "properties": {
        "attributes": {
          "description": "Attributes represents the key-value pairs the current message is labelled with.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "body": {
          "description": "Body is the actual data in the message.",
          "type": "string",
          "format": "byte"
        },
        "id": {
          "description": "ID of the message",
          "type": "string"
        },
        "publishTime": {
          "description": "The time at which the message was published.",
          "type": "string"
        }
      }
    },
    "io.argoproj.common.RedisEventData": {
      "description": "RedisEventData represents the event data generated by the Redis gateway.",
      "type": "object",
      "required": [
        "channel",
        "pattern",
        "payload"
      ],
      "properties": {
        "channel": {
          "description": "Subscription channel.",
          "type": "string"
        },
        "pattern": {
          "description": "Message pattern",
          "type": "string"
        },
        "payload": {
          "description": "Message body",
          "type": "string"
        }
      }
    },
    "io.argoproj.common.ResourceEventData": {
      "description": "ResourceEventData represents the event data generated by the Resource gateway.",
      "type": "object",
      "required": [
        "type",
        "body",
        "group",
        "version",
        "resource"
      ],
      "properties": {
        "body": {
          "description": "Resource body.",
          "type": "string",
          "format": "byte"
        },
        "group": {
          "description": "Resource group name.",
          "type": "string"
        },
        "resource": {
          "description": "Resource name.",
          "type": "string"
        },
        "type": {
          "description": "EventType of the type of the event.",
          "type": "string"
        },
        "version": {
          "description": "Resource version.",
          "type": "string"
        }
      }
    },
    "io.argoproj.common.S3Artifact": {
      "description": "S3Artifact contains information about an S3 connection and bucket",
      "type": "object",
      "required": [
        "endpoint",
        "bucket",
        "accessKey",
        "secretKey"
      ],
      "properties": {
        "accessKey": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        },
        "bucket": {
          "$ref": "#/definitions/io.argoproj.common.S3Bucket"
        },
        "endpoint": {
          "type": "string"
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "string"
        },
        "filter": {
          "$ref": "#/definitions/io.argoproj.common.S3Filter"
        },
        "insecure": {
          "type": "boolean"
        },
        "region": {
          "type": "string"
        },
        "secretKey": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        }
      }
    },
    "io.argoproj.common.S3Bucket": {
      "description": "S3Bucket contains information to describe an S3 Bucket",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "io.argoproj.common.S3Filter": {
      "description": "S3Filter represents filters to apply to bucket nofifications for specifying constraints on objects",
      "type": "object",
      "required": [
        "prefix",
        "suffix"
      ],
      "properties": {
        "prefix": {
          "type": "string"
        },
        "suffix": {
          "type": "string"
        }
      }
    },
    "io.argoproj.common.SNSEventData": {
      "description": "SNSEventData represents the event data generated by SNS gateway.",
      "type": "object",
      "required": [
        "body"
      ],
      "properties": {
        "body": {
          "description": "Body represents the SNS message body",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "io.argoproj.common.SQSEventData": {
      "description": "SQSEventData represents the event data generated by SQS gateway.",
      "type": "object",
      "required": [
        "messageId",
        "messageAttributes",
        "body"
      ],
      "properties": {
        "body": {
          "description": "The message's contents (not URL-encoded).",
          "type": "string",
          "format": "byte"
        },
        "messageAttributes": {
          "description": "Each message attribute consists of a Name, Type, and Value. For more information, see Amazon SQS Message Attributes (https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html) in the Amazon Simple Queue Service Developer Guide.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/com.github.aws.aws-sdk-go.service.sqs.MessageAttributeValue"
          }
        },
        "messageId": {
          "description": "A unique identifier for the message. A MessageId is considered unique across all AWS accounts for an extended period of time.",
          "type": "string"
        }
      }
    },
    "io.argoproj.common.WebhookEventData": {
      "description": "WebhookEventData represents the event data generated by the Webhook gateway.",
      "type": "object",
      "required": [
        "header",
        "body"
      ],
      "properties": {
        "body": {
          "description": "Body is http request body",
          "type": "string",
          "format": "byte"
        },
        "header": {
          "description": "Header is the http request header",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.EventSourceRef": {
      "description": "EventSourceRef holds information about the EventSourceRef custom resource",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the event source",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the event source Default value is the namespace where referencing gateway is deployed",
          "type": "string"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.Gateway": {
      "description": "Gateway is the definition of a gateway resource",
      "type": "object",
      "required": [
        "metadata",
        "status",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.GatewaySpec"
        },
        "status": {
          "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.GatewayStatus"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.GatewayList": {
      "description": "GatewayList is the list of Gateway resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.Gateway"
          },
          "x-kubernetes-list-type": "items"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.GatewayResource": {
      "description": "GatewayResource holds the metadata about the gateway resources",
      "type": "object",
      "required": [
        "deployment"
      ],
      "properties": {
        "deployment": {
          "description": "Metadata of the deployment for the gateway",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "service": {
          "description": "Metadata of the service for the gateway",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.GatewaySpec": {
      "description": "GatewaySpec represents gateway specifications",
      "type": "object",
      "required": [
        "type",
        "processorPort"
      ],
      "properties": {
        "eventSourceRef": {
          "description": "EventSourceRef refers to event-source that stores event source configurations for the gateway",
          "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.EventSourceRef"
        },
        "processorPort": {
          "description": "Port on which the gateway event source processor is running on.",
          "type": "string"
        },
        "replica": {
          "description": "Replica is the gateway deployment replicas",
          "type": "integer",
          "format": "int32"
        },
        "service": {
          "description": "Service is the specifications of the service to expose the gateway",
          "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.Service"
        },
        "subscribers": {
          "description": "Subscribers holds the contexts of the subscribers/sinks to send events to.",
          "x-kubernetes-list-type": "subscribers",
          "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.Subscribers"
        },
        "template": {
          "description": "Template is the pod specification for the gateway",
          "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.Template"
        },
        "type": {
          "description": "Type is the type of gateway. Used as metadata.",
          "type": "string"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.GatewayStatus": {
      "description": "GatewayStatus contains information about the status of a gateway.",
      "type": "object",
      "required": [
        "phase",
        "resources"
      ],
      "properties": {
        "message": {
          "description": "Message is a human readable string indicating details about a gateway in its phase",
          "type": "string"
        },
        "nodes": {
          "description": "Nodes is a mapping between a node ID and the node's status it records the states for the configurations of gateway.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.NodeStatus"
          }
        },
        "phase": {
          "description": "Phase is the high-level summary of the gateway",
          "type": "string"
        },
        "resources": {
          "description": "Resources refers to the metadata about the gateway resources",
          "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.GatewayResource"
        },
        "startedAt": {
          "description": "StartedAt is the time at which this gateway was initiated",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.Metadata": {
      "description": "Metadata holds the annotations and labels of a gateway pod",
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.NATSSubscriber": {
      "description": "NATSSubscriber holds the context of subscriber over NATS.",
      "type": "object",
      "required": [
        "serverURL",
        "subject",
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the subscription. Must be unique.",
          "type": "string"
        },
        "serverURL": {
          "description": "ServerURL refers to the NATS server URL.",
          "type": "string"
        },
        "subject": {
          "description": "Subject refers to the NATS subject name.",
          "type": "string"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.NodeStatus": {
      "description": "NodeStatus describes the status for an individual node in the gateway configurations. A single node can represent one configuration.",
      "type": "object",
      "required": [
        "id",
        "name",
        "displayName",
        "phase"
      ],
      "properties": {
        "displayName": {
          "description": "DisplayName is the human readable representation of the node",
          "type": "string"
        },
        "id": {
          "description": "ID is a unique identifier of a node within a sensor It is a hash of the node name",
          "type": "string"
        },
        "message": {
          "description": "Message store data or something to save for configuration",
          "type": "string"
        },
        "name": {
          "description": "Name is a unique name in the node tree used to generate the node ID",
          "type": "string"
        },
        "phase": {
          "description": "Phase of the node",
          "type": "string"
        },
        "updateTime": {
          "description": "UpdateTime is the time when node(gateway configuration) was updated",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.Service": {
      "description": "Service holds the service information gateway exposes",
      "type": "object",
      "properties": {
        "clusterIP": {
          "description": "clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "type": "string"
        },
        "ports": {
          "description": "The list of ports that are exposed by this ClusterIP service.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
          },
          "x-kubernetes-list-map-keys": [
            "port",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "port",
          "x-kubernetes-patch-strategy": "merge"
        },
        "spec": {
          "description": "Spec holds the gateway service spec. DEPRECATED: Use Ports to declare the ports to be exposed.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceSpec"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.Subscribers": {
      "type": "object",
      "properties": {
        "http": {
          "description": "HTTP subscribers are HTTP endpoints to send events to.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "string"
        },
        "nats": {
          "description": "NATS refers to the subscribers over NATS protocol.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.NATSSubscriber"
          },
          "x-kubernetes-list-type": "NATSSubscriber"
        }
      }
    },
    "io.argoproj.gateway.v1alpha1.Template": {
      "description": "Template holds the information of a Gateway deployment template",
      "type": "object",
      "properties": {
        "affinity": {
          "description": "If specified, the pod's scheduling constraints",
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
        },
        "container": {
          "description": "Container is the main container image to run in the gateway pod",
          "$ref": "#/definitions/io.k8s.api.core.v1.Container"
        },
        "metadata": {
          "description": "Metdata sets the pods's metadata, i.e. annotations and labels",
          "$ref": "#/definitions/io.argoproj.gateway.v1alpha1.Metadata"
        },
        "securityContext": {
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run gateway pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "type": "string"
        },
        "spec": {
          "description": "Spec holds the gateway deployment spec. DEPRECATED: Use Container instead.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec"
        },
        "tolerations": {
          "description": "If specified, the pod's tolerations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          }
        },
        "volumes": {
          "description": "Volumes is a list of volumes that can be mounted by containers in a workflow.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.AWSLambdaTrigger": {
      "description": "AWSLambdaTrigger refers to specification of the trigger to invoke an AWS Lambda function",
      "type": "object",
      "required": [
        "functionName",
        "region",
        "payload"
      ],
      "properties": {
        "accessKey": {
          "description": "AccessKey refers K8 secret containing aws access key",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        },
        "functionName": {
          "description": "FunctionName refers to the name of the function to invoke.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace refers to Kubernetes namespace to read access related secret from. Defaults to sensor's namespace.",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "triggerParameters"
        },
        "payload": {
          "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "payloadParameters"
        },
        "region": {
          "description": "Region is AWS region",
          "type": "string"
        },
        "secretKey": {
          "description": "SecretKey refers K8 secret containing aws secret key",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.ArgoWorkflowTrigger": {
      "description": "ArgoWorkflowTrigger is the trigger for the Argo Workflow",
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "operation": {
          "description": "Operation refers to the type of operation performed on the argo workflow resource. Default value is Submit.",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters is the list of parameters to pass to resolved Argo Workflow object",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "triggerParameters"
        },
        "source": {
          "description": "Source of the K8 resource file(s)",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ArtifactLocation"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.ArtifactLocation": {
      "description": "ArtifactLocation describes the source location for an external minio",
      "type": "object",
      "properties": {
        "configmap": {
          "description": "Configmap that stores the minio",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ConfigmapArtifact"
        },
        "file": {
          "description": "File minio is minio stored in a file",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.FileArtifact"
        },
        "git": {
          "description": "Git repository hosting the minio",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.GitArtifact"
        },
        "inline": {
          "description": "Inline minio is embedded in sensor spec as a string",
          "type": "string"
        },
        "resource": {
          "description": "Resource is generic template for K8s resource",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.unstructured.Unstructured"
        },
        "s3": {
          "description": "S3 compliant minio",
          "$ref": "#/definitions/io.argoproj.common.S3Artifact"
        },
        "url": {
          "description": "URL to fetch the minio from",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.URLArtifact"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.Backoff": {
      "description": "Backoff for an operation",
      "type": "object",
      "required": [
        "duration",
        "factor",
        "jitter",
        "steps"
      ],
      "properties": {
        "duration": {
          "description": "Duration is the duration in nanoseconds",
          "type": "integer",
          "format": "int64"
        },
        "factor": {
          "description": "Duration is multiplied by factor each iteration",
          "type": "number",
          "format": "double"
        },
        "jitter": {
          "description": "The amount of jitter applied each iteration",
          "type": "number",
          "format": "double"
        },
        "steps": {
          "description": "Exit with error after this many steps",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.BasicAuth": {
      "description": "BasicAuth contains the reference to K8s secrets that holds the username and password",
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Namespace to read the secrets from. Defaults to sensor's namespace.",
          "type": "string"
        },
        "password": {
          "description": "Password refers to the Kubernetes secret that holds the password required for basic auth.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        },
        "username": {
          "description": "Username refers to the Kubernetes secret that holds the username required for basic auth.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.ConfigmapArtifact": {
      "description": "ConfigmapArtifact contains information about minio in k8 configmap",
      "type": "object",
      "required": [
        "name",
        "namespace",
        "key"
      ],
      "properties": {
        "key": {
          "description": "Key within configmap data which contains trigger resource definition",
          "type": "string"
        },
        "name": {
          "description": "Name of the configmap",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace where configmap is deployed",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.CustomTrigger": {
      "description": "CustomTrigger refers to the specification of the custom trigger.",
      "type": "object",
      "required": [
        "serverURL",
        "secure",
        "spec",
        "payload"
      ],
      "properties": {
        "certFilePath": {
          "description": "CertFilePath is path to the cert file within sensor for secure connection between sensor and custom trigger gRPC server.",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters is the list of parameters that is applied to resolved custom trigger trigger object.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "triggerParameters"
        },
        "payload": {
          "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "payloadParameters"
        },
        "secure": {
          "description": "Secure refers to type of the connection between sensor to custom trigger gRPC",
          "type": "boolean"
        },
        "serverNameOverride": {
          "description": "ServerNameOverride for the secure connection between sensor and custom trigger gRPC server.",
          "type": "string"
        },
        "serverURL": {
          "description": "ServerURL is the url of the gRPC server that executes custom trigger",
          "type": "string"
        },
        "spec": {
          "description": "Spec is the custom trigger resource specification that custom trigger gRPC server knows how to interpret.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.DataFilter": {
      "description": "DataFilter describes constraints and filters for event data Regular Expressions are purposefully not a feature as they are overkill for our uses here See Rob Pike's Post: https://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html",
      "type": "object",
      "required": [
        "path",
        "type",
        "value"
      ],
      "properties": {
        "comparator": {
          "description": "Comparator compares the event data with a user given value. Can be \"\u003e=\", \"\u003e\", \"=\", \"\u003c\", or \"\u003c=\". Is optional, and if left blank treated as equality \"=\".",
          "type": "string"
        },
        "path": {
          "description": "Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
          "type": "string"
        },
        "type": {
          "description": "Type contains the JSON type of the data",
          "type": "string"
        },
        "value": {
          "description": "Value is the allowed string values for this key Booleans are passed using strconv.ParseBool() Numbers are parsed using as float64 using strconv.ParseFloat() Strings are taken as is Nils this value is ignored",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "value"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.DependencyGroup": {
      "description": "DependencyGroup is the group of dependencies",
      "type": "object",
      "required": [
        "name",
        "dependencies"
      ],
      "properties": {
        "dependencies": {
          "description": "Dependencies of events",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "dependencies"
        },
        "name": {
          "description": "Name of the group",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.Event": {
      "description": "Event represents the cloudevent received from a gateway.",
      "type": "object",
      "required": [
        "context",
        "data"
      ],
      "properties": {
        "context": {
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EventContext"
        },
        "data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.EventContext": {
      "description": "EventContext holds the context of the cloudevent received from a gateway.",
      "type": "object",
      "required": [
        "id",
        "source",
        "specversion",
        "type",
        "dataContentType",
        "subject",
        "time"
      ],
      "properties": {
        "dataContentType": {
          "description": "DataContentType - A MIME (RFC2046) string describing the media type of `data`.",
          "type": "string"
        },
        "id": {
          "description": "ID of the event; must be non-empty and unique within the scope of the producer.",
          "type": "string"
        },
        "source": {
          "description": "Source - A URI describing the event producer.",
          "type": "string"
        },
        "specversion": {
          "description": "SpecVersion - The version of the CloudEvents specification used by the event.",
          "type": "string"
        },
        "subject": {
          "description": "Subject - The subject of the event in the context of the event producer",
          "type": "string"
        },
        "time": {
          "description": "Time - A Timestamp when the event happened.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "type": {
          "description": "Type - The type of the occurrence which has happened.",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.EventDependency": {
      "description": "EventDependency describes a dependency",
      "type": "object",
      "required": [
        "name",
        "gatewayName",
        "eventName"
      ],
      "properties": {
        "eventName": {
          "description": "EventName is the name of the event",
          "type": "string"
        },
        "filters": {
          "description": "Filters and rules governing toleration of success and constraints on the context and data of an event",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EventDependencyFilter"
        },
        "gatewayName": {
          "description": "GatewayName is the name of the gateway from whom the event is received",
          "type": "string"
        },
        "name": {
          "description": "Name is a unique name of this dependency",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.EventDependencyFilter": {
      "description": "EventDependencyFilter defines filters and constraints for a event.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "context": {
          "description": "Context filter constraints",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EventContext"
        },
        "data": {
          "description": "Data filter constraints with escalation",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.DataFilter"
          },
          "x-kubernetes-list-type": "data"
        },
        "name": {
          "description": "Name is the name of event filter",
          "type": "string"
        },
        "time": {
          "description": "Time filter on the event with escalation",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TimeFilter"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.FileArtifact": {
      "description": "FileArtifact contains information about an minio in a filesystem",
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.GitArtifact": {
      "description": "GitArtifact contains information about an minio stored in git",
      "type": "object",
      "required": [
        "url",
        "cloneDirectory",
        "filePath"
      ],
      "properties": {
        "branch": {
          "description": "Branch to use to pull trigger resource",
          "type": "string"
        },
        "cloneDirectory": {
          "description": "Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don't use any specific git provider client.",
          "type": "string"
        },
        "creds": {
          "description": "Creds contain reference to git username and password",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.GitCreds"
        },
        "filePath": {
          "description": "Path to file that contains trigger resource definition",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace where creds are stored.",
          "type": "string"
        },
        "ref": {
          "description": "Ref to use to pull trigger resource. Will result in a shallow clone and fetch.",
          "type": "string"
        },
        "remote": {
          "description": "Remote to manage set of tracked repositories. Defaults to \"origin\". Refer https://git-scm.com/docs/git-remote",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.GitRemoteConfig"
        },
        "sshKeyPath": {
          "description": "SSHKeyPath is path to your ssh key path. Use this if you don't want to provide username and password. ssh key path must be mounted in sensor pod.",
          "type": "string"
        },
        "tag": {
          "description": "Tag to use to pull trigger resource",
          "type": "string"
        },
        "url": {
          "description": "Git URL",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.GitCreds": {
      "description": "GitCreds contain reference to git username and password",
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        },
        "username": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.GitRemoteConfig": {
      "description": "GitRemoteConfig contains the configuration of a Git remote",
      "type": "object",
      "required": [
        "name",
        "urls"
      ],
      "properties": {
        "name": {
          "description": "Name of the remote to fetch from.",
          "type": "string"
        },
        "urls": {
          "description": "URLs the URLs of a remote repository. It must be non-empty. Fetch will always use the first URL, while push will use all of them.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "urls"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.HTTPSubscription": {
      "description": "HTTPSubscription holds the context of the HTTP subscription of events for the sensor.",
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "port": {
          "description": "Port on which sensor server should run.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.HTTPTrigger": {
      "description": "HTTPTrigger is the trigger for the HTTP request",
      "type": "object",
      "required": [
        "url",
        "payload"
      ],
      "properties": {
        "basicAuth": {
          "description": "BasicAuth configuration for the http request.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.BasicAuth"
        },
        "headers": {
          "description": "Headers for the HTTP request.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "method": {
          "description": "Method refers to the type of the HTTP request. Refer https://golang.org/src/net/http/method.go for more info. Default value is POST.",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters is the list of key-value extracted from event's payload that are applied to the HTTP trigger resource.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "payload": {
          "description": "Payload is the list of key-value extracted from an event payload to construct the HTTP request payload.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "timeout": {
          "description": "Timeout refers to the HTTP request timeout in seconds. Default value is 60 seconds.",
          "type": "integer",
          "format": "int32"
        },
        "tls": {
          "description": "TLS configuration for the HTTP client.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TLSConfig"
        },
        "url": {
          "description": "URL refers to the URL to send HTTP request to.",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.K8sResourcePolicy": {
      "description": "K8sResourcePolicy refers to the policy used to check the state of K8s based triggers using using labels",
      "type": "object",
      "required": [
        "labels",
        "backoff",
        "errorOnBackoffTimeout"
      ],
      "properties": {
        "backoff": {
          "description": "Backoff before checking resource state",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.wait.Backoff"
        },
        "errorOnBackoffTimeout": {
          "description": "ErrorOnBackoffTimeout determines whether sensor should transition to error state if the trigger policy is unable to determine the state of the resource",
          "type": "boolean"
        },
        "labels": {
          "description": "Labels required to identify whether a resource is in success state",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.KafkaTrigger": {
      "description": "KafkaTrigger refers to the specification of the Kafka trigger.",
      "type": "object",
      "required": [
        "url",
        "topic",
        "partition",
        "payload"
      ],
      "properties": {
        "compress": {
          "description": "Compress determines whether to compress message or not. Defaults to false. If set to true, compresses message using snappy compression.",
          "type": "boolean"
        },
        "flushFrequency": {
          "description": "FlushFrequency refers to the frequency in milliseconds to flush batches. Defaults to 500 milliseconds.",
          "type": "integer",
          "format": "int32"
        },
        "parameters": {
          "description": "Parameters is the list of parameters that is applied to resolved Kafka trigger object.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "triggerParameters"
        },
        "partition": {
          "description": "Partition to write data to.",
          "type": "integer",
          "format": "int32"
        },
        "partitioningKey": {
          "description": "The partitioning key for the messages put on the Kafka topic. Defaults to broker url.",
          "type": "string"
        },
        "payload": {
          "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "payloadParameters"
        },
        "requiredAcks": {
          "description": "RequiredAcks used in producer to tell the broker how many replica acknowledgements Defaults to 1 (Only wait for the leader to ack).",
          "type": "integer",
          "format": "int32"
        },
        "tls": {
          "description": "TLS configuration for the Kafka producer.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TLSConfig"
        },
        "topic": {
          "description": "Name of the topic. More info at https://kafka.apache.org/documentation/#intro_topics",
          "type": "string"
        },
        "url": {
          "description": "URL of the Kafka broker.",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.NATSSubscription": {
      "description": "NATSSubscription holds the context of the NATS subscription of events for the sensor",
      "type": "object",
      "required": [
        "serverURL",
        "subject"
      ],
      "properties": {
        "serverURL": {
          "description": "ServerURL refers to NATS server url.",
          "type": "string"
        },
        "subject": {
          "description": "Subject refers to NATS subject name.",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.NATSTrigger": {
      "description": "NATSTrigger refers to the specification of the NATS trigger.",
      "type": "object",
      "required": [
        "url",
        "subject",
        "payload"
      ],
      "properties": {
        "parameters": {
          "description": "Parameters is the list of parameters that is applied to resolved NATS trigger object.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "triggerParameters"
        },
        "payload": {
          "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "payloadParameters"
        },
        "subject": {
          "description": "Name of the subject to put message on.",
          "type": "string"
        },
        "tls": {
          "description": "TLS configuration for the NATS producer.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TLSConfig"
        },
        "url": {
          "description": "URL of the NATS cluster.",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.NodeStatus": {
      "description": "NodeStatus describes the status for an individual node in the sensor's FSM. A single node can represent the status for event or a trigger.",
      "type": "object",
      "required": [
        "id",
        "name",
        "displayName",
        "type",
        "phase"
      ],
      "properties": {
        "completedAt": {
          "description": "CompletedAt is the time at which this node completed",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "displayName": {
          "description": "DisplayName is the human readable representation of the node",
          "type": "string"
        },
        "event": {
          "description": "Event stores the last seen event for this node",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.Event"
        },
        "id": {
          "description": "ID is a unique identifier of a node within a sensor It is a hash of the node name",
          "type": "string"
        },
        "message": {
          "description": "store data or something to save for event notifications or trigger events",
          "type": "string"
        },
        "name": {
          "description": "Name is a unique name in the node tree used to generate the node ID",
          "type": "string"
        },
        "phase": {
          "description": "Phase of the node",
          "type": "string"
        },
        "resolvedAt": {
          "description": "ResolvedAt refers to the time at which the node was resolved.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "startedAt": {
          "description": "StartedAt is the time at which this node started",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "type": {
          "description": "Type is the type of the node",
          "type": "string"
        },
        "updatedAt": {
          "description": "UpdatedAt refers to the time at which the node was updated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.OpenWhiskTrigger": {
      "description": "OpenWhiskTrigger refers to the specification of the OpenWhisk trigger.",
      "type": "object",
      "required": [
        "host",
        "actionName",
        "payload"
      ],
      "properties": {
        "actionName": {
          "description": "Name of the action/function.",
          "type": "string"
        },
        "authToken": {
          "description": "AuthToken for authentication.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        },
        "host": {
          "description": "Host URL of the OpenWhisk.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace for the action. Defaults to \"_\".",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "triggerParameters"
        },
        "payload": {
          "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "payloadParameters"
        },
        "version": {
          "description": "Version for the API. Defaults to v1.",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.Sensor": {
      "description": "Sensor is the definition of a sensor resource",
      "type": "object",
      "required": [
        "metadata",
        "spec",
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.SensorSpec"
        },
        "status": {
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.SensorStatus"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.SensorList": {
      "description": "SensorList is the list of Sensor resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.Sensor"
          },
          "x-kubernetes-list-type": "items"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.SensorResources": {
      "description": "SensorResources holds the metadata of the resources created for the sensor",
      "type": "object",
      "required": [
        "deployment"
      ],
      "properties": {
        "deployment": {
          "description": "Deployment holds the metadata of the deployment for the sensor",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "service": {
          "description": "Service holds the metadata of the service for the sensor",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.SensorSpec": {
      "description": "SensorSpec represents desired sensor state",
      "type": "object",
      "required": [
        "dependencies",
        "triggers",
        "subscription"
      ],
      "properties": {
        "circuit": {
          "description": "Circuit is a boolean expression of dependency groups",
          "type": "string"
        },
        "dependencies": {
          "description": "Dependencies is a list of the events that this sensor is dependent on.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EventDependency"
          },
          "x-kubernetes-list-type": "dependencies"
        },
        "dependencyGroups": {
          "description": "DependencyGroups is a list of the groups of events.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.DependencyGroup"
          },
          "x-kubernetes-list-type": "dependencyGroups"
        },
        "errorOnFailedRound": {
          "description": "ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger round fails. Once sensor state is set to `error`, no further triggers will be processed.",
          "type": "boolean"
        },
        "serviceAnnotations": {
          "description": "ServiceAnnotations refers to annotations to be set for the service generated",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "serviceLabels": {
          "description": "ServiceLabels to be set for the service generated",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "subscription": {
          "description": "Subscription refers to the modes of events subscriptions for the sensor. At least one of the types of subscription must be defined in order for sensor to be meaningful.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.Subscription"
        },
        "template": {
          "description": "Template is the pod specification for the sensor",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.Template"
        },
        "triggers": {
          "description": "Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.Trigger"
          },
          "x-kubernetes-list-type": "triggers"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.SensorStatus": {
      "description": "SensorStatus contains information about the status of a sensor.",
      "type": "object",
      "required": [
        "phase",
        "triggerCycleStatus",
        "lastCycleTime",
        "resources"
      ],
      "properties": {
        "completedAt": {
          "description": "CompletedAt is the time at which this sensor was completed",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastCycleTime": {
          "description": "LastCycleTime is the time when last trigger cycle completed",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Message is a human readable string indicating details about a sensor in its phase",
          "type": "string"
        },
        "nodes": {
          "description": "Nodes is a mapping between a node ID and the node's status it records the states for the FSM of this sensor.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.NodeStatus"
          }
        },
        "phase": {
          "description": "Phase is the high-level summary of the sensor.",
          "type": "string"
        },
        "resources": {
          "description": "Resources refers to metadata of the resources created for the sensor",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.SensorResources"
        },
        "startedAt": {
          "description": "StartedAt is the time at which this sensor was initiated",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "triggerCycleCount": {
          "description": "TriggerCycleCount is the count of sensor's trigger cycle runs.",
          "type": "integer",
          "format": "int32"
        },
        "triggerCycleStatus": {
          "description": "TriggerCycleState is the status from last cycle of triggers execution.",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.SlackTrigger": {
      "description": "SlackTrigger refers to the specification of the slack notification trigger.",
      "type": "object",
      "required": [
        "slackToken"
      ],
      "properties": {
        "channel": {
          "description": "Channel refers to which Slack channel to send slack message.",
          "type": "string"
        },
        "message": {
          "description": "Message refers to the message to send to the Slack channel.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace to read the password secret from. This is required if the password secret selector is specified.",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "triggerParameters"
        },
        "slackToken": {
          "description": "SlackToken refers to the Kubernetes secret that holds the slack token required to send messages.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.StandardK8sTrigger": {
      "description": "StandardK8sTrigger is the standard Kubernetes resource trigger",
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "liveObject": {
          "description": "LiveObject specifies whether the resource should be directly fetched from K8s instead of being marshaled from the resource artifact. If set to true, the resource artifact must contain the information required to uniquely identify the resource in the cluster, that is, you must specify \"apiVersion\", \"kind\" as well as \"name\" and \"namespace\" meta data. Only valid for operation type `update`",
          "type": "boolean"
        },
        "operation": {
          "description": "Operation refers to the type of operation performed on the k8s resource. Default value is Create.",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters is the list of parameters that is applied to resolved K8s trigger object.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "triggerParameters"
        },
        "patchStrategy": {
          "description": "PatchStrategy controls the K8s object patching strategy when the trigger operation is specified as patch. possible values: \"application/json-patch+json\" \"application/merge-patch+json\" \"application/strategic-merge-patch+json\" \"application/apply-patch+yaml\". Defaults to \"application/merge-patch+json\"",
          "type": "string"
        },
        "source": {
          "description": "Source of the K8 resource file(s)",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ArtifactLocation"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.StatusPolicy": {
      "description": "StatusPolicy refers to the policy used to check the state of the trigger using response status",
      "type": "object",
      "required": [
        "allow"
      ],
      "properties": {
        "allow": {
          "description": "Allow refers to the list of allowed response statuses. If the response status of the the trigger is within the list, the trigger will marked as successful else it will result in trigger failure.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "x-kubernetes-list-type": "allowedStatuses"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.Subscription": {
      "description": "Subscription holds different modes of subscription available for sensor to consume events.",
      "type": "object",
      "properties": {
        "http": {
          "description": "HTTP refers to the HTTP subscription of events for the sensor.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.HTTPSubscription"
        },
        "nats": {
          "description": "NATS refers to the NATS subscription of events for the sensor",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.NATSSubscription"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.TLSConfig": {
      "description": "TLSConfig refers to TLS configuration for the HTTP client",
      "type": "object",
      "required": [
        "caCertPath",
        "clientCertPath",
        "clientKeyPath"
      ],
      "properties": {
        "caCertPath": {
          "description": "CACertPath refers the file path that contains the CA cert.",
          "type": "string"
        },
        "clientCertPath": {
          "description": "ClientCertPath refers the file path that contains client cert.",
          "type": "string"
        },
        "clientKeyPath": {
          "description": "ClientKeyPath refers the file path that contains client key.",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.Template": {
      "description": "Template holds the information of a sensor deployment template",
      "type": "object",
      "properties": {
        "container": {
          "description": "Container is the main container image to run in the gateway pod",
          "$ref": "#/definitions/io.k8s.api.core.v1.Container"
        },
        "securityContext": {
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run gateway pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "type": "string"
        },
        "spec": {
          "description": "Spec holds the sensor deployment spec. DEPRECATED: Use Container instead.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec"
        },
        "volumes": {
          "description": "Volumes is a list of volumes that can be mounted by containers in a workflow.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.TimeFilter": {
      "description": "TimeFilter describes a window in time. DataFilters out event events that occur outside the time limits. In other words, only events that occur after Start and before Stop will pass this filter.",
      "type": "object",
      "properties": {
        "start": {
          "description": "Start is the beginning of a time window. Before this time, events for this event are ignored and format is hh:mm:ss",
          "type": "string"
        },
        "stop": {
          "description": "StopPattern is the end of a time window. After this time, events for this event are ignored and format is hh:mm:ss",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.Trigger": {
      "description": "Trigger is an action taken, output produced, an event created, a message sent",
      "type": "object",
      "required": [
        "template",
        "policy"
      ],
      "properties": {
        "parameters": {
          "description": "Parameters is the list of parameters applied to the trigger template definition",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
          },
          "x-kubernetes-list-type": "templateParameters"
        },
        "policy": {
          "description": "Policy to configure backoff and execution criteria for the trigger",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerPolicy"
        },
        "template": {
          "description": "Template describes the trigger specification.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerTemplate"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.TriggerParameter": {
      "description": "TriggerParameter indicates a passed parameter to a service template",
      "type": "object",
      "required": [
        "src",
        "dest"
      ],
      "properties": {
        "dest": {
          "description": "Dest is the JSONPath of a resource key. A path is a series of keys separated by a dot. The colon character can be escaped with '.' The -1 key can be used to append a value to an existing array. See https://github.com/tidwall/sjson#path-syntax for more information about how this is used.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is what to do with the existing value at Dest, whether to 'prepend', 'overwrite', or 'append' it.",
          "type": "string"
        },
        "src": {
          "description": "Src contains a source reference to the value of the parameter from a dependency",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameterSource"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.TriggerParameterSource": {
      "description": "TriggerParameterSource defines the source for a parameter from a event event",
      "type": "object",
      "required": [
        "dependencyName"
      ],
      "properties": {
        "contextKey": {
          "description": "ContextKey is the JSONPath of the event's (JSON decoded) context key ContextKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
          "type": "string"
        },
        "contextTemplate": {
          "description": "ContextTemplate is a go-template for extracting a string from the event's context. If a ContextTemplate is provided with a ContextKey, the template will be evaluated first and fallback to the ContextKey. The templating follows the standard go-template syntax as well as sprig's extra functions. See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/",
          "type": "string"
        },
        "dataKey": {
          "description": "DataKey is the JSONPath of the event's (JSON decoded) data key DataKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
          "type": "string"
        },
        "dataTemplate": {
          "description": "DataTemplate is a go-template for extracting a string from the event's data. If a DataTemplate is provided with a DataKey, the template will be evaluated first and fallback to the DataKey. The templating follows the standard go-template syntax as well as sprig's extra functions. See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/",
          "type": "string"
        },
        "dependencyName": {
          "description": "DependencyName refers to the name of the dependency. The event which is stored for this dependency is used as payload for the parameterization. Make sure to refer to one of the dependencies you have defined under Dependencies list.",
          "type": "string"
        },
        "value": {
          "description": "Value is the default literal value to use for this parameter source This is only used if the DataKey is invalid. If the DataKey is invalid and this is not defined, this param source will produce an error.",
          "type": "string"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.TriggerPolicy": {
      "description": "TriggerPolicy dictates the policy for the trigger retries",
      "type": "object",
      "properties": {
        "k8s": {
          "description": "K8sResourcePolicy refers to the policy used to check the state of K8s based triggers using using labels",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.K8sResourcePolicy"
        },
        "status": {
          "description": "Status refers to the policy used to check the state of the trigger using response status",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.StatusPolicy"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.TriggerSwitch": {
      "description": "TriggerSwitch describes condition which must be satisfied in order to execute a trigger. Depending upon condition type, status of dependency groups is used to evaluate the result.",
      "type": "object",
      "properties": {
        "all": {
          "description": "All acts as a AND operator between dependencies",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "all"
        },
        "any": {
          "description": "Any acts as a OR operator between dependencies",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "any"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.TriggerTemplate": {
      "description": "TriggerTemplate is the template that describes trigger specification.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "argoWorkflow": {
          "description": "ArgoWorkflow refers to the trigger that can perform various operations on an Argo workflow.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ArgoWorkflowTrigger"
        },
        "awsLambda": {
          "description": "AWSLambda refers to the trigger designed to invoke AWS Lambda function with with on-the-fly constructable payload.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.AWSLambdaTrigger"
        },
        "custom": {
          "description": "CustomTrigger refers to the trigger designed to connect to a gRPC trigger server and execute a custom trigger.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.CustomTrigger"
        },
        "http": {
          "description": "HTTP refers to the trigger designed to dispatch a HTTP request with on-the-fly constructable payload.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.HTTPTrigger"
        },
        "k8s": {
          "description": "StandardK8sTrigger refers to the trigger designed to create or update a generic Kubernetes resource.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.StandardK8sTrigger"
        },
        "kafka": {
          "description": "Kafka refers to the trigger designed to place messages on Kafka topic.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.KafkaTrigger"
        },
        "name": {
          "description": "Name is a unique name of the action to take.",
          "type": "string"
        },
        "nats": {
          "description": "NATS refers to the trigger designed to place message on NATS subject.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.NATSTrigger"
        },
        "openWhisk": {
          "description": "OpenWhisk refers to the trigger designed to invoke OpenWhisk action.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.OpenWhiskTrigger"
        },
        "slack": {
          "description": "Slack refers to the trigger designed to send slack notification message.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.SlackTrigger"
        },
        "switch": {
          "description": "Switch is the condition to execute the trigger.",
          "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerSwitch"
        }
      }
    },
    "io.argoproj.sensor.v1alpha1.URLArtifact": {
      "description": "URLArtifact contains information about an minio at an http endpoint.",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "description": "Path is the complete URL",
          "type": "string"
        },
        "verifyCert": {
          "description": "VerifyCert decides whether the connection is secure or not",
          "type": "boolean"
        }
      }
    }
  }
}
