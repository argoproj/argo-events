// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sdk/signal.proto

/*
Package sdk is a generated protocol buffer package.

It is generated from these files:
	sdk/signal.proto

It has these top-level messages:
	SignalContext
	EventContext
*/
package sdk

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = google_protobuf.Empty{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SignalService service

type SignalService interface {
	// Listen to the signal. Events are streamed back to the client.
	//
	// The following describes the mechanics for the stream.
	// The first send MUST contain a non-nil signal.
	// This first send MUST be followed by a first receive which contains
	// a confirmation in the form of done=true to signify that the Signal is set up
	// correctly.
	//
	// Later sends should only signify if the signal is done. Later sends do not
	// update the signal process attached to this channel.
	Listen(ctx context.Context, opts ...client.CallOption) (SignalService_ListenService, error)
	// Ping the signal service.
	// This is used on the client-side to monitor the presence of signal services.
	Ping(ctx context.Context, in *google_protobuf.Empty, opts ...client.CallOption) (*google_protobuf.Empty, error)
}

type signalService struct {
	c    client.Client
	name string
}

func NewSignalService(name string, c client.Client) SignalService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "sdk"
	}
	return &signalService{
		c:    c,
		name: name,
	}
}

func (c *signalService) Listen(ctx context.Context, opts ...client.CallOption) (SignalService_ListenService, error) {
	req := c.c.NewRequest(c.name, "SignalService.Listen", &SignalContext{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &signalServiceListen{stream}, nil
}

type SignalService_ListenService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SignalContext) error
	Recv() (*EventContext, error)
}

type signalServiceListen struct {
	stream client.Stream
}

func (x *signalServiceListen) Close() error {
	return x.stream.Close()
}

func (x *signalServiceListen) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *signalServiceListen) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *signalServiceListen) Send(m *SignalContext) error {
	return x.stream.Send(m)
}

func (x *signalServiceListen) Recv() (*EventContext, error) {
	m := new(EventContext)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *signalService) Ping(ctx context.Context, in *google_protobuf.Empty, opts ...client.CallOption) (*google_protobuf.Empty, error) {
	req := c.c.NewRequest(c.name, "SignalService.Ping", in)
	out := new(google_protobuf.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SignalService service

type SignalServiceHandler interface {
	// Listen to the signal. Events are streamed back to the client.
	//
	// The following describes the mechanics for the stream.
	// The first send MUST contain a non-nil signal.
	// This first send MUST be followed by a first receive which contains
	// a confirmation in the form of done=true to signify that the Signal is set up
	// correctly.
	//
	// Later sends should only signify if the signal is done. Later sends do not
	// update the signal process attached to this channel.
	Listen(context.Context, SignalService_ListenStream) error
	// Ping the signal service.
	// This is used on the client-side to monitor the presence of signal services.
	Ping(context.Context, *google_protobuf.Empty, *google_protobuf.Empty) error
}

func RegisterSignalServiceHandler(s server.Server, hdlr SignalServiceHandler, opts ...server.HandlerOption) {
	type signalService interface {
		Listen(ctx context.Context, stream server.Stream) error
		Ping(ctx context.Context, in *google_protobuf.Empty, out *google_protobuf.Empty) error
	}
	type SignalService struct {
		signalService
	}
	h := &signalServiceHandler{hdlr}
	s.Handle(s.NewHandler(&SignalService{h}, opts...))
}

type signalServiceHandler struct {
	SignalServiceHandler
}

func (h *signalServiceHandler) Listen(ctx context.Context, stream server.Stream) error {
	return h.SignalServiceHandler.Listen(ctx, &signalServiceListenStream{stream})
}

type SignalService_ListenStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*EventContext) error
	Recv() (*SignalContext, error)
}

type signalServiceListenStream struct {
	stream server.Stream
}

func (x *signalServiceListenStream) Close() error {
	return x.stream.Close()
}

func (x *signalServiceListenStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *signalServiceListenStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *signalServiceListenStream) Send(m *EventContext) error {
	return x.stream.Send(m)
}

func (x *signalServiceListenStream) Recv() (*SignalContext, error) {
	m := new(SignalContext)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *signalServiceHandler) Ping(ctx context.Context, in *google_protobuf.Empty, out *google_protobuf.Empty) error {
	return h.SignalServiceHandler.Ping(ctx, in, out)
}
