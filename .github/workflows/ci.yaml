name: test
on:
  push:
    branches:
      - "master"
      - "release-*"
  pull_request:
    branches: [ master ]
jobs:
  build:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: "1.15.7"
        id: go
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Restore Go build cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-v1-${{ github.run_id }}
      - name: Get dependencies
        run: go mod download
      - name: Test
        run: make test

  codegen:
    name: Codegen
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Restore go build cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-v1-${{ hashFiles('**/go.mod') }}
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: "1.15.7"
      - name: Add bins to PATH
        run: |
          echo /home/runner/go/bin >> $GITHUB_PATH
          echo /usr/local/bin >> $GITHUB_PATH
      - name: Install protoc
        run: |
          set -eux -o pipefail
          PROTOC_ZIP=protoc-3.11.1-linux-x86_64.zip
          curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.11.1/$PROTOC_ZIP
          sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
          sudo unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
          sudo chmod +x /usr/local/bin/protoc
          sudo find /usr/local/include -type f | xargs sudo chmod a+r
          sudo find /usr/local/include -type d | xargs sudo chmod a+rx
          rm -f $PROTOC_ZIP
          ls /usr/local/include/google/protobuf/
      - name: Install pandoc
        run: |
          set -eux -o pipefail
          PANDOC_ZIP=pandoc-2.11.1-linux-amd64.tar.gz
          curl -OL https://github.com/jgm/pandoc/releases/download/2.11.1/$PANDOC_ZIP
          sudo tar xvzf $PANDOC_ZIP --strip-components 1 -C /usr/local
          rm -f $PANDOC_ZIP
          echo /usr/local/pandoc-2.11.1/bin >> $GITHUB_PATH
      - name: Get dependencies
        run: go mod download
      - name: Make codegen
        run: |
          echo 'GOPATH=/home/runner/go' >> $GITHUB_ENV
          make -B codegen
      - name: Ensure nothing changed
        run: git diff --exit-code

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Restore go build cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-v2-${{ hashFiles('**/go.mod') }}
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: "1.15.7"
      - name: Add bins to PATH
        run: |
          echo /home/runner/go/bin >> $GITHUB_PATH
          echo /usr/local/bin >> $GITHUB_PATH
      - name: Install and start K3S v1.18.8+k3s1
        run: curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.18.8+k3s1 INSTALL_K3S_CHANNEL=stable INSTALL_K3S_EXEC=--docker K3S_KUBECONFIG_MODE=644 sh - &
      - name: Create Kubeconfig
        run: |
          mkdir -p ~/.kube
          until stat /etc/rancher/k3s/k3s.yaml ; do sleep 10s ; done
          cat /etc/rancher/k3s/k3s.yaml | sed "s/127.0.0.1/$(hostname)/g" > ~/.kube/config
      - name: Install Argo Events
        env:
          GOPATH: /home/runner/go
        run: |
          git fetch --tags
          KUBECONFIG=~/.kube/config make start K3D=true
      - name: Run tests
        env:
          GOPATH: /home/runner/go
        run: make test-functional

