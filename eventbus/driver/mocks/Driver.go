// Code generated by mockery v2.1.0. DO NOT EDIT.

package mocks

import (
	context "context"

	driver "github.com/argoproj/argo-events/eventbus/driver"
	event "github.com/cloudevents/sdk-go/v2/event"

	mock "github.com/stretchr/testify/mock"
)

// Driver is an autogenerated mock type for the Driver type
type Driver struct {
	mock.Mock
}

// Connect provides a mock function with given fields:
func (_m *Driver) Connect() (driver.Connection, error) {
	ret := _m.Called()

	var r0 driver.Connection
	if rf, ok := ret.Get(0).(func() driver.Connection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Connection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: conn, message
func (_m *Driver) Publish(conn driver.Connection, message []byte) error {
	ret := _m.Called(conn, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(driver.Connection, []byte) error); ok {
		r0 = rf(conn, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeEventSources provides a mock function with given fields: ctx, conn, closeCh, dependencyExpr, dependencies, filter, action
func (_m *Driver) SubscribeEventSources(ctx context.Context, conn driver.Connection, closeCh <-chan struct{}, dependencyExpr string, dependencies []driver.Dependency, filter func(string, event.Event) bool, action func(map[string]event.Event)) error {
	ret := _m.Called(ctx, conn, closeCh, dependencyExpr, dependencies, filter, action)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, driver.Connection, <-chan struct{}, string, []driver.Dependency, func(string, event.Event) bool, func(map[string]event.Event)) error); ok {
		r0 = rf(ctx, conn, closeCh, dependencyExpr, dependencies, filter, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
